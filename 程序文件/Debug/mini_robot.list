
mini_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800a170  0800a170  0001a170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f8  0800a4f8  00022b88  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a500  0800a500  00022b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a500  0800a500  0001a500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a504  0800a504  0001a504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002b88  20000000  0800a508  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20002b88  0800d090  00022b88  2**3
                  ALLOC
 10 ._user_heap_stack 00001e04  2000350c  0800d090  0002350c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022b88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a64  00000000  00000000  00022bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f8  00000000  00000000  0004561c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011188  00000000  00000000  00049f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0005b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d0  00000000  00000000  0005c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f50  00000000  00000000  0005dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f08c  00000000  00000000  00082c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c0a  00000000  00000000  000a1c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00182896  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003be8  00000000  00000000  001828ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002b88 	.word	0x20002b88
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a154 	.word	0x0800a154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002b8c 	.word	0x20002b8c
 80001cc:	0800a154 	.word	0x0800a154

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e90:	b500      	push	{lr}
 8000e92:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e94:	2300      	movs	r3, #0
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e9e:	4842      	ldr	r0, [pc, #264]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000ea0:	4a42      	ldr	r2, [pc, #264]	; (8000fac <MX_ADC1_Init+0x11c>)
 8000ea2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ea8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eaa:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eac:	2201      	movs	r2, #1
 8000eae:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb0:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb8:	493d      	ldr	r1, [pc, #244]	; (8000fb0 <MX_ADC1_Init+0x120>)
 8000eba:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ec2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	f004 f830 	bl	8004f2c <HAL_ADC_Init>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d14f      	bne.n	8000f70 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000edc:	4669      	mov	r1, sp
 8000ede:	4832      	ldr	r0, [pc, #200]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000ee0:	f004 faaa 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d146      	bne.n	8000f76 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	4669      	mov	r1, sp
 8000ef2:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000ef4:	f004 faa0 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d13f      	bne.n	8000f7c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000f00:	2303      	movs	r3, #3
 8000f02:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	4669      	mov	r1, sp
 8000f06:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000f08:	f004 fa96 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d138      	bne.n	8000f82 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f10:	2303      	movs	r3, #3
 8000f12:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	4669      	mov	r1, sp
 8000f1a:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000f1c:	f004 fa8c 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000f20:	bb90      	cbnz	r0, 8000f88 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8000f26:	2305      	movs	r3, #5
 8000f28:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	4669      	mov	r1, sp
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000f2e:	f004 fa83 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000f32:	bb60      	cbnz	r0, 8000f8e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f34:	2305      	movs	r3, #5
 8000f36:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8000f38:	2306      	movs	r3, #6
 8000f3a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	4669      	mov	r1, sp
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000f40:	f004 fa7a 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000f44:	bb30      	cbnz	r0, 8000f94 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f46:	2306      	movs	r3, #6
 8000f48:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	4669      	mov	r1, sp
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000f52:	f004 fa71 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000f56:	bb00      	cbnz	r0, 8000f9a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	4669      	mov	r1, sp
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_ADC1_Init+0x118>)
 8000f64:	f004 fa68 	bl	8005438 <HAL_ADC_ConfigChannel>
 8000f68:	b9d0      	cbnz	r0, 8000fa0 <MX_ADC1_Init+0x110>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6a:	b005      	add	sp, #20
 8000f6c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f70:	f003 fd3c 	bl	80049ec <Error_Handler>
 8000f74:	e7ac      	b.n	8000ed0 <MX_ADC1_Init+0x40>
    Error_Handler();
 8000f76:	f003 fd39 	bl	80049ec <Error_Handler>
 8000f7a:	e7b5      	b.n	8000ee8 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000f7c:	f003 fd36 	bl	80049ec <Error_Handler>
 8000f80:	e7bc      	b.n	8000efc <MX_ADC1_Init+0x6c>
    Error_Handler();
 8000f82:	f003 fd33 	bl	80049ec <Error_Handler>
 8000f86:	e7c3      	b.n	8000f10 <MX_ADC1_Init+0x80>
    Error_Handler();
 8000f88:	f003 fd30 	bl	80049ec <Error_Handler>
 8000f8c:	e7c9      	b.n	8000f22 <MX_ADC1_Init+0x92>
    Error_Handler();
 8000f8e:	f003 fd2d 	bl	80049ec <Error_Handler>
 8000f92:	e7cf      	b.n	8000f34 <MX_ADC1_Init+0xa4>
    Error_Handler();
 8000f94:	f003 fd2a 	bl	80049ec <Error_Handler>
 8000f98:	e7d5      	b.n	8000f46 <MX_ADC1_Init+0xb6>
    Error_Handler();
 8000f9a:	f003 fd27 	bl	80049ec <Error_Handler>
 8000f9e:	e7db      	b.n	8000f58 <MX_ADC1_Init+0xc8>
    Error_Handler();
 8000fa0:	f003 fd24 	bl	80049ec <Error_Handler>
}
 8000fa4:	e7e1      	b.n	8000f6a <MX_ADC1_Init+0xda>
 8000fa6:	bf00      	nop
 8000fa8:	20003048 	.word	0x20003048
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	9304      	str	r3, [sp, #16]
 8000fbe:	9305      	str	r3, [sp, #20]
 8000fc0:	9306      	str	r3, [sp, #24]
 8000fc2:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000fc4:	6802      	ldr	r2, [r0, #0]
 8000fc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fca:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_ADC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fd2:	b009      	add	sp, #36	; 0x24
 8000fd4:	bd30      	pop	{r4, r5, pc}
 8000fd6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd8:	2500      	movs	r5, #0
 8000fda:	9501      	str	r5, [sp, #4]
 8000fdc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	9502      	str	r5, [sp, #8]
 8000ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001006:	23ff      	movs	r3, #255	; 0xff
 8001008:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	a903      	add	r1, sp, #12
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 8001014:	f004 ff64 	bl	8005ee0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001018:	4814      	ldr	r0, [pc, #80]	; (800106c <HAL_ADC_MspInit+0xb8>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0xbc>)
 800101c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800101e:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001020:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800103c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001040:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001042:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001044:	f004 fb4c 	bl	80056e0 <HAL_DMA_Init>
 8001048:	b958      	cbnz	r0, 8001062 <HAL_ADC_MspInit+0xae>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_ADC_MspInit+0xb8>)
 800104c:	63a3      	str	r3, [r4, #56]	; 0x38
 800104e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	2012      	movs	r0, #18
 8001056:	f004 facd 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800105a:	2012      	movs	r0, #18
 800105c:	f004 fafc 	bl	8005658 <HAL_NVIC_EnableIRQ>
}
 8001060:	e7b7      	b.n	8000fd2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8001062:	f003 fcc3 	bl	80049ec <Error_Handler>
 8001066:	e7f0      	b.n	800104a <HAL_ADC_MspInit+0x96>
 8001068:	40020000 	.word	0x40020000
 800106c:	20003090 	.word	0x20003090
 8001070:	40026410 	.word	0x40026410

08001074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001074:	b510      	push	{r4, lr}
 8001076:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001078:	2400      	movs	r4, #0
 800107a:	9400      	str	r4, [sp, #0]
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_DMA_Init+0x74>)
 800107e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001080:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800108c:	9200      	str	r2, [sp, #0]
 800108e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001090:	9401      	str	r4, [sp, #4]
 8001092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001094:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80010a4:	4622      	mov	r2, r4
 80010a6:	2105      	movs	r1, #5
 80010a8:	2010      	movs	r0, #16
 80010aa:	f004 faa3 	bl	80055f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010ae:	2010      	movs	r0, #16
 80010b0:	f004 fad2 	bl	8005658 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80010b4:	4622      	mov	r2, r4
 80010b6:	2105      	movs	r1, #5
 80010b8:	2011      	movs	r0, #17
 80010ba:	f004 fa9b 	bl	80055f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010be:	2011      	movs	r0, #17
 80010c0:	f004 faca 	bl	8005658 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010c4:	4622      	mov	r2, r4
 80010c6:	2105      	movs	r1, #5
 80010c8:	2038      	movs	r0, #56	; 0x38
 80010ca:	f004 fa93 	bl	80055f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010ce:	2038      	movs	r0, #56	; 0x38
 80010d0:	f004 fac2 	bl	8005658 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80010d4:	4622      	mov	r2, r4
 80010d6:	2105      	movs	r1, #5
 80010d8:	2046      	movs	r0, #70	; 0x46
 80010da:	f004 fa8b 	bl	80055f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010de:	2046      	movs	r0, #70	; 0x46
 80010e0:	f004 faba 	bl	8005658 <HAL_NVIC_EnableIRQ>

}
 80010e4:	b002      	add	sp, #8
 80010e6:	bd10      	pop	{r4, pc}
 80010e8:	40023800 	.word	0x40023800

080010ec <GetSector>:
  */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80010ec:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80010f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010f4:	d346      	bcc.n	8001184 <GetSector+0x98>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80010f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80010fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010fe:	d343      	bcc.n	8001188 <GetSector+0x9c>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8001100:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8001104:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800110c:	d33e      	bcc.n	800118c <GetSector+0xa0>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800110e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8001112:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800111a:	d339      	bcc.n	8001190 <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 800111c:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8001120:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d334      	bcc.n	8001194 <GetSector+0xa8>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800112a:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 800112e:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001136:	d32f      	bcc.n	8001198 <GetSector+0xac>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8001138:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 800113c:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 8001140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001144:	d32a      	bcc.n	800119c <GetSector+0xb0>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8001146:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 800114a:	f503 037a 	add.w	r3, r3, #16384000	; 0xfa0000
 800114e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001152:	d325      	bcc.n	80011a0 <GetSector+0xb4>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8001154:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8001158:	f503 0378 	add.w	r3, r3, #16252928	; 0xf80000
 800115c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001160:	d320      	bcc.n	80011a4 <GetSector+0xb8>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8001162:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8001166:	f503 0376 	add.w	r3, r3, #16121856	; 0xf60000
 800116a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800116e:	d31b      	bcc.n	80011a8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8001170:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
 8001174:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
  {
    sector = FLASH_SECTOR_10;
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 8001178:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800117c:	bf34      	ite	cc
 800117e:	200a      	movcc	r0, #10
 8001180:	200b      	movcs	r0, #11
 8001182:	4770      	bx	lr
    sector = FLASH_SECTOR_0;
 8001184:	2000      	movs	r0, #0
 8001186:	4770      	bx	lr
    sector = FLASH_SECTOR_1;
 8001188:	2001      	movs	r0, #1
 800118a:	4770      	bx	lr
    sector = FLASH_SECTOR_2;
 800118c:	2002      	movs	r0, #2
 800118e:	4770      	bx	lr
    sector = FLASH_SECTOR_3;
 8001190:	2003      	movs	r0, #3
 8001192:	4770      	bx	lr
    sector = FLASH_SECTOR_4;
 8001194:	2004      	movs	r0, #4
 8001196:	4770      	bx	lr
    sector = FLASH_SECTOR_5;
 8001198:	2005      	movs	r0, #5
 800119a:	4770      	bx	lr
    sector = FLASH_SECTOR_6;
 800119c:	2006      	movs	r0, #6
 800119e:	4770      	bx	lr
    sector = FLASH_SECTOR_7;
 80011a0:	2007      	movs	r0, #7
 80011a2:	4770      	bx	lr
    sector = FLASH_SECTOR_8;
 80011a4:	2008      	movs	r0, #8
 80011a6:	4770      	bx	lr
    sector = FLASH_SECTOR_9;
 80011a8:	2009      	movs	r0, #9
  }

  return sector;
}
 80011aa:	4770      	bx	lr

080011ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011ae:	2401      	movs	r4, #1
 80011b0:	4620      	mov	r0, r4
 80011b2:	f006 fa76 	bl	80076a2 <osDelay>
  for(;;)
 80011b6:	e7fb      	b.n	80011b0 <StartDefaultTask+0x4>

080011b8 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void const * argument)
{
 80011b8:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  /* USER CODE BEGIN StartSendTask */
  /* Infinite loop */
  for(;;)
  {

  	instruct[0][4] = cur_pulse1*0.6338;
 80011bc:	4c36      	ldr	r4, [pc, #216]	; (8001298 <StartSendTask+0xe0>)
 80011be:	a72c      	add	r7, pc, #176	; (adr r7, 8001270 <StartSendTask+0xb8>)
 80011c0:	e9d7 6700 	ldrd	r6, r7, [r7]
  	instruct[0][5] = cur_pulse2*0.67164;
  	instruct[0][6] = cur_pulse3*1.13924;
 80011c4:	f20f 09b0 	addw	r9, pc, #176	; 0xb0
 80011c8:	e9d9 8900 	ldrd	r8, r9, [r9]
  	instruct[0][7] = cur_pulse4*1.56673;
 80011cc:	f20f 0bb0 	addw	fp, pc, #176	; 0xb0
 80011d0:	e9db ab00 	ldrd	sl, fp, [fp]
  	instruct[0][4] = cur_pulse1*0.6338;
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <StartSendTask+0xe4>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f7ff f94c 	bl	8000474 <__aeabi_i2d>
 80011dc:	4632      	mov	r2, r6
 80011de:	463b      	mov	r3, r7
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_dmul>
 80011e4:	f7ff fc60 	bl	8000aa8 <__aeabi_d2iz>
 80011e8:	8120      	strh	r0, [r4, #8]
  	instruct[0][5] = cur_pulse2*0.67164;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <StartSendTask+0xe8>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	f7ff f941 	bl	8000474 <__aeabi_i2d>
 80011f2:	a325      	add	r3, pc, #148	; (adr r3, 8001288 <StartSendTask+0xd0>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f9a6 	bl	8000548 <__aeabi_dmul>
 80011fc:	f7ff fc54 	bl	8000aa8 <__aeabi_d2iz>
 8001200:	8160      	strh	r0, [r4, #10]
  	instruct[0][6] = cur_pulse3*1.13924;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <StartSendTask+0xec>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f7ff f935 	bl	8000474 <__aeabi_i2d>
 800120a:	4642      	mov	r2, r8
 800120c:	464b      	mov	r3, r9
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_dmul>
 8001212:	f7ff fc49 	bl	8000aa8 <__aeabi_d2iz>
 8001216:	81a0      	strh	r0, [r4, #12]
  	instruct[0][7] = cur_pulse4*1.56673;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <StartSendTask+0xf0>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	f7ff f92a 	bl	8000474 <__aeabi_i2d>
 8001220:	4652      	mov	r2, sl
 8001222:	465b      	mov	r3, fp
 8001224:	f7ff f990 	bl	8000548 <__aeabi_dmul>
 8001228:	f7ff fc3e 	bl	8000aa8 <__aeabi_d2iz>
 800122c:	81e0      	strh	r0, [r4, #14]
  	instruct[0][8] = cur_pulse5*2.45108;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <StartSendTask+0xf4>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	f7ff f91f 	bl	8000474 <__aeabi_i2d>
 8001236:	a316      	add	r3, pc, #88	; (adr r3, 8001290 <StartSendTask+0xd8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f984 	bl	8000548 <__aeabi_dmul>
 8001240:	f7ff fc32 	bl	8000aa8 <__aeabi_d2iz>
 8001244:	8220      	strh	r0, [r4, #16]
  	instruct[0][9] = cur_pulse6;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <StartSendTask+0xf8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	8263      	strh	r3, [r4, #18]


  	instruct[2][4] = (instruct[2][2]+10)*11;
 800124c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8001250:	330a      	adds	r3, #10
 8001252:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001256:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800125a:	86a2      	strh	r2, [r4, #52]	; 0x34
  	instruct_step = instruct[2][2]+10;
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <StartSendTask+0xfc>)
 800125e:	6013      	str	r3, [r2, #0]
  	total_step = instruct[2][1];
 8001260:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <StartSendTask+0x100>)
 8001266:	601a      	str	r2, [r3, #0]
    osDelay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f006 fa1a 	bl	80076a2 <osDelay>
  for(;;)
 800126e:	e7b1      	b.n	80011d4 <StartSendTask+0x1c>
 8001270:	f0068db9 	.word	0xf0068db9
 8001274:	3fe44816 	.word	0x3fe44816
 8001278:	b8e4b87c 	.word	0xb8e4b87c
 800127c:	3ff23a53 	.word	0x3ff23a53
 8001280:	79fa97e1 	.word	0x79fa97e1
 8001284:	3ff91153 	.word	0x3ff91153
 8001288:	2b55ef20 	.word	0x2b55ef20
 800128c:	3fe57e13 	.word	0x3fe57e13
 8001290:	d4bf0996 	.word	0xd4bf0996
 8001294:	40039bcf 	.word	0x40039bcf
 8001298:	20000000 	.word	0x20000000
 800129c:	20002bc8 	.word	0x20002bc8
 80012a0:	20002bcc 	.word	0x20002bcc
 80012a4:	20002bd0 	.word	0x20002bd0
 80012a8:	20002bd4 	.word	0x20002bd4
 80012ac:	20002bd8 	.word	0x20002bd8
 80012b0:	20002bdc 	.word	0x20002bdc
 80012b4:	20002af8 	.word	0x20002af8
 80012b8:	20002afc 	.word	0x20002afc

080012bc <StartDemoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDemoTask */
void StartDemoTask(void const * argument)
{
 80012bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDemoTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012be:	2401      	movs	r4, #1
 80012c0:	4620      	mov	r0, r4
 80012c2:	f006 f9ee 	bl	80076a2 <osDelay>
  for(;;)
 80012c6:	e7fb      	b.n	80012c0 <StartDemoTask+0x4>

080012c8 <StartLedTask>:
{
 80012c8:	b508      	push	{r3, lr}
  	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80012ca:	4e06      	ldr	r6, [pc, #24]	; (80012e4 <StartLedTask+0x1c>)
 80012cc:	f44f 7500 	mov.w	r5, #512	; 0x200
    osDelay(100);
 80012d0:	2464      	movs	r4, #100	; 0x64
  	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80012d2:	4629      	mov	r1, r5
 80012d4:	4630      	mov	r0, r6
 80012d6:	f004 ff01 	bl	80060dc <HAL_GPIO_TogglePin>
    osDelay(100);
 80012da:	4620      	mov	r0, r4
 80012dc:	f006 f9e1 	bl	80076a2 <osDelay>
  for(;;)
 80012e0:	e7f7      	b.n	80012d2 <StartLedTask+0xa>
 80012e2:	bf00      	nop
 80012e4:	40021400 	.word	0x40021400

080012e8 <StartTestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTestTask */
void StartTestTask(void const * argument)
{
 80012e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTestTask */
  /* Infinite loop */
  for(;;)
  {
  	HAL_UART_Receive_DMA(&huart2, rx_data, rx_bufSize);
 80012ea:	4e07      	ldr	r6, [pc, #28]	; (8001308 <StartTestTask+0x20>)
 80012ec:	4d07      	ldr	r5, [pc, #28]	; (800130c <StartTestTask+0x24>)
 80012ee:	f44f 7480 	mov.w	r4, #256	; 0x100
 80012f2:	4622      	mov	r2, r4
 80012f4:	4631      	mov	r1, r6
 80012f6:	4628      	mov	r0, r5
 80012f8:	f006 f986 	bl	8007608 <HAL_UART_Receive_DMA>
    osDelay(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f006 f9cf 	bl	80076a2 <osDelay>
  for(;;)
 8001304:	e7f5      	b.n	80012f2 <StartTestTask+0xa>
 8001306:	bf00      	nop
 8001308:	20003104 	.word	0x20003104
 800130c:	20003494 	.word	0x20003494

08001310 <StartRobotTask>:
{
 8001310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	osDelay(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f006 f9c3 	bl	80076a2 <osDelay>
	Address = FLASH_USER_START_ADDR;
 800131c:	4ba6      	ldr	r3, [pc, #664]	; (80015b8 <StartRobotTask+0x2a8>)
 800131e:	4aa7      	ldr	r2, [pc, #668]	; (80015bc <StartRobotTask+0x2ac>)
 8001320:	601a      	str	r2, [r3, #0]
	for(int j=11;j<(500*11);j++)
 8001322:	230b      	movs	r3, #11
		instruct[j/11][j%11] = (*(__IO int16_t*)Address);
 8001324:	49a4      	ldr	r1, [pc, #656]	; (80015b8 <StartRobotTask+0x2a8>)
 8001326:	4da6      	ldr	r5, [pc, #664]	; (80015c0 <StartRobotTask+0x2b0>)
	for(int j=11;j<(500*11);j++)
 8001328:	f241 547c 	movw	r4, #5500	; 0x157c
		instruct[j/11][j%11] = (*(__IO int16_t*)Address);
 800132c:	680a      	ldr	r2, [r1, #0]
 800132e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001332:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
		Address = Address + 2;
 8001336:	600a      	str	r2, [r1, #0]
	for(int j=11;j<(500*11);j++)
 8001338:	3301      	adds	r3, #1
 800133a:	42a3      	cmp	r3, r4
 800133c:	d1f6      	bne.n	800132c <StartRobotTask+0x1c>
	instruct[1][0]=0;
 800133e:	4aa0      	ldr	r2, [pc, #640]	; (80015c0 <StartRobotTask+0x2b0>)
 8001340:	2300      	movs	r3, #0
 8001342:	82d3      	strh	r3, [r2, #22]
	instruct[1][1]=0;
 8001344:	8313      	strh	r3, [r2, #24]
	instruct[1][2]=0;
 8001346:	8353      	strh	r3, [r2, #26]
	instruct[1][3]=0;
 8001348:	8393      	strh	r3, [r2, #28]
	instruct[1][4]=0;
 800134a:	83d3      	strh	r3, [r2, #30]
	instruct[1][5]=0;
 800134c:	8413      	strh	r3, [r2, #32]
	instruct[1][6]=0;
 800134e:	8453      	strh	r3, [r2, #34]	; 0x22
	instruct[1][7]=0;
 8001350:	8493      	strh	r3, [r2, #36]	; 0x24
	instruct[1][8]=0;
 8001352:	84d3      	strh	r3, [r2, #38]	; 0x26
	instruct[1][9]=0;
 8001354:	8513      	strh	r3, [r2, #40]	; 0x28
	instruct[1][10]=0;
 8001356:	8553      	strh	r3, [r2, #42]	; 0x2a
	instruct[2][0]=0;
 8001358:	8593      	strh	r3, [r2, #44]	; 0x2c
	instruct[2][2]=0;
 800135a:	8613      	strh	r3, [r2, #48]	; 0x30
	is_start = 0;
 800135c:	4a99      	ldr	r2, [pc, #612]	; (80015c4 <StartRobotTask+0x2b4>)
 800135e:	7013      	strb	r3, [r2, #0]
  	if(is_start==0)
 8001360:	4614      	mov	r4, r2
  		if(instruct[0][0]==0)
 8001362:	4d97      	ldr	r5, [pc, #604]	; (80015c0 <StartRobotTask+0x2b0>)
  		   Address = FLASH_USER_START_ADDR;
 8001364:	4e94      	ldr	r6, [pc, #592]	; (80015b8 <StartRobotTask+0x2a8>)
 8001366:	e02c      	b.n	80013c2 <StartRobotTask+0xb2>
 8001368:	4b97      	ldr	r3, [pc, #604]	; (80015c8 <StartRobotTask+0x2b8>)
 800136a:	f103 0118 	add.w	r1, r3, #24
  				if(foc_cut[i]>-10)foc_cut[i]-=10;
 800136e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001372:	f112 0f09 	cmn.w	r2, #9
 8001376:	bfa4      	itt	ge
 8001378:	3a0a      	subge	r2, #10
 800137a:	f843 2c04 	strge.w	r2, [r3, #-4]
  				if(foc_cut[i]<10)foc_cut[i]+=10;
 800137e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8001382:	2a09      	cmp	r2, #9
 8001384:	bfdc      	itt	le
 8001386:	320a      	addle	r2, #10
 8001388:	f843 2c04 	strle.w	r2, [r3, #-4]
  			for(int i=0;i<6;i++)
 800138c:	4299      	cmp	r1, r3
 800138e:	d1ee      	bne.n	800136e <StartRobotTask+0x5e>
  		if(instruct[2][0]==0)
 8001390:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 80af 	bne.w	80014f8 <StartRobotTask+0x1e8>
  			is_single_run = 0;
 800139a:	4b8c      	ldr	r3, [pc, #560]	; (80015cc <StartRobotTask+0x2bc>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
		if(instruct[3][0]&0x01)
 80013a0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 80013a4:	f003 0201 	and.w	r2, r3, #1
 80013a8:	7022      	strb	r2, [r4, #0]
		if(instruct[3][0]&0x02)
 80013aa:	f013 0f02 	tst.w	r3, #2
 80013ae:	f000 81c4 	beq.w	800173a <StartRobotTask+0x42a>
			is_stop = 1;
 80013b2:	4b87      	ldr	r3, [pc, #540]	; (80015d0 <StartRobotTask+0x2c0>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			is_start = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	7023      	strb	r3, [r4, #0]
    osDelay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f006 f970 	bl	80076a2 <osDelay>
  	if(is_start==0)
 80013c2:	7823      	ldrb	r3, [r4, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1eb      	bne.n	80013a0 <StartRobotTask+0x90>
  		if(instruct[0][0]==0)
 80013c8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0cb      	beq.n	8001368 <StartRobotTask+0x58>
  		else if(instruct[0][0]==1&&foc_cut[0]<3000)foc_cut[0]++;
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d020      	beq.n	8001416 <StartRobotTask+0x106>
  		else if(instruct[0][0]==2&&foc_cut[0]>-3000)foc_cut[0]--;
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d028      	beq.n	800142a <StartRobotTask+0x11a>
  		else if(instruct[0][0]==4&&foc_cut[1]<3000)foc_cut[1]++;
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d02f      	beq.n	800143c <StartRobotTask+0x12c>
  		else if(instruct[0][0]==8&&foc_cut[1]>-3000)foc_cut[1]--;
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d037      	beq.n	8001450 <StartRobotTask+0x140>
  		else if(instruct[0][0]==16&&foc_cut[2]<3000)foc_cut[2]++;
 80013e0:	2b10      	cmp	r3, #16
 80013e2:	d03e      	beq.n	8001462 <StartRobotTask+0x152>
  		else if(instruct[0][0]==32&&foc_cut[2]>-3000)foc_cut[2]--;
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d046      	beq.n	8001476 <StartRobotTask+0x166>
  		else if(instruct[0][0]==64&&foc_cut[3]<3000)foc_cut[3]++;
 80013e8:	2b40      	cmp	r3, #64	; 0x40
 80013ea:	d04d      	beq.n	8001488 <StartRobotTask+0x178>
  		else if(instruct[0][0]==128&&foc_cut[3]>-3000)foc_cut[3]--;
 80013ec:	2b80      	cmp	r3, #128	; 0x80
 80013ee:	d056      	beq.n	800149e <StartRobotTask+0x18e>
  		else if(instruct[0][0]==256&&foc_cut[4]<3000)foc_cut[4]++;
 80013f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f4:	d05d      	beq.n	80014b2 <StartRobotTask+0x1a2>
  		else if(instruct[0][0]==512&&foc_cut[4]>-3000)foc_cut[4]--;
 80013f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013fa:	d065      	beq.n	80014c8 <StartRobotTask+0x1b8>
  		else if(instruct[0][0]==1024&&foc_cut[5]<3000)foc_cut[5]++;
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d16c      	bne.n	80014dc <StartRobotTask+0x1cc>
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <StartRobotTask+0x2b8>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800140a:	4293      	cmp	r3, r2
 800140c:	dcc0      	bgt.n	8001390 <StartRobotTask+0x80>
 800140e:	3301      	adds	r3, #1
 8001410:	4a6d      	ldr	r2, [pc, #436]	; (80015c8 <StartRobotTask+0x2b8>)
 8001412:	6153      	str	r3, [r2, #20]
 8001414:	e7bc      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==1&&foc_cut[0]<3000)foc_cut[0]++;
 8001416:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <StartRobotTask+0x2b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800141e:	4293      	cmp	r3, r2
 8001420:	dcb6      	bgt.n	8001390 <StartRobotTask+0x80>
 8001422:	3301      	adds	r3, #1
 8001424:	4a68      	ldr	r2, [pc, #416]	; (80015c8 <StartRobotTask+0x2b8>)
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e7b2      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==2&&foc_cut[0]>-3000)foc_cut[0]--;
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <StartRobotTask+0x2b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <StartRobotTask+0x2c4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	dbad      	blt.n	8001390 <StartRobotTask+0x80>
 8001434:	3b01      	subs	r3, #1
 8001436:	4a64      	ldr	r2, [pc, #400]	; (80015c8 <StartRobotTask+0x2b8>)
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e7a9      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==4&&foc_cut[1]<3000)foc_cut[1]++;
 800143c:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <StartRobotTask+0x2b8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001444:	4293      	cmp	r3, r2
 8001446:	dca3      	bgt.n	8001390 <StartRobotTask+0x80>
 8001448:	3301      	adds	r3, #1
 800144a:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <StartRobotTask+0x2b8>)
 800144c:	6053      	str	r3, [r2, #4]
 800144e:	e79f      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==8&&foc_cut[1]>-3000)foc_cut[1]--;
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <StartRobotTask+0x2b8>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a5f      	ldr	r2, [pc, #380]	; (80015d4 <StartRobotTask+0x2c4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	db9a      	blt.n	8001390 <StartRobotTask+0x80>
 800145a:	3b01      	subs	r3, #1
 800145c:	4a5a      	ldr	r2, [pc, #360]	; (80015c8 <StartRobotTask+0x2b8>)
 800145e:	6053      	str	r3, [r2, #4]
 8001460:	e796      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==16&&foc_cut[2]<3000)foc_cut[2]++;
 8001462:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <StartRobotTask+0x2b8>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800146a:	4293      	cmp	r3, r2
 800146c:	dc90      	bgt.n	8001390 <StartRobotTask+0x80>
 800146e:	3301      	adds	r3, #1
 8001470:	4a55      	ldr	r2, [pc, #340]	; (80015c8 <StartRobotTask+0x2b8>)
 8001472:	6093      	str	r3, [r2, #8]
 8001474:	e78c      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==32&&foc_cut[2]>-3000)foc_cut[2]--;
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <StartRobotTask+0x2b8>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4a56      	ldr	r2, [pc, #344]	; (80015d4 <StartRobotTask+0x2c4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	db87      	blt.n	8001390 <StartRobotTask+0x80>
 8001480:	3b01      	subs	r3, #1
 8001482:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <StartRobotTask+0x2b8>)
 8001484:	6093      	str	r3, [r2, #8]
 8001486:	e783      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==64&&foc_cut[3]<3000)foc_cut[3]++;
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <StartRobotTask+0x2b8>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001490:	4293      	cmp	r3, r2
 8001492:	f73f af7d 	bgt.w	8001390 <StartRobotTask+0x80>
 8001496:	3301      	adds	r3, #1
 8001498:	4a4b      	ldr	r2, [pc, #300]	; (80015c8 <StartRobotTask+0x2b8>)
 800149a:	60d3      	str	r3, [r2, #12]
 800149c:	e778      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==128&&foc_cut[3]>-3000)foc_cut[3]--;
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <StartRobotTask+0x2b8>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <StartRobotTask+0x2c4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	f6ff af73 	blt.w	8001390 <StartRobotTask+0x80>
 80014aa:	3b01      	subs	r3, #1
 80014ac:	4a46      	ldr	r2, [pc, #280]	; (80015c8 <StartRobotTask+0x2b8>)
 80014ae:	60d3      	str	r3, [r2, #12]
 80014b0:	e76e      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==256&&foc_cut[4]<3000)foc_cut[4]++;
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <StartRobotTask+0x2b8>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f73f af68 	bgt.w	8001390 <StartRobotTask+0x80>
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <StartRobotTask+0x2b8>)
 80014c4:	6113      	str	r3, [r2, #16]
 80014c6:	e763      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==512&&foc_cut[4]>-3000)foc_cut[4]--;
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <StartRobotTask+0x2b8>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <StartRobotTask+0x2c4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f6ff af5e 	blt.w	8001390 <StartRobotTask+0x80>
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <StartRobotTask+0x2b8>)
 80014d8:	6113      	str	r3, [r2, #16]
 80014da:	e759      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[0][0]==2048&&foc_cut[5]>-3000)foc_cut[5]--;
 80014dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014e0:	f47f af56 	bne.w	8001390 <StartRobotTask+0x80>
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <StartRobotTask+0x2b8>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <StartRobotTask+0x2c4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	f6ff af50 	blt.w	8001390 <StartRobotTask+0x80>
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <StartRobotTask+0x2b8>)
 80014f4:	6153      	str	r3, [r2, #20]
 80014f6:	e74b      	b.n	8001390 <StartRobotTask+0x80>
  		else if(instruct[2][0]==1)
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d079      	beq.n	80015f0 <StartRobotTask+0x2e0>
  		else if(instruct[2][0]==2)
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f000 808f 	beq.w	8001620 <StartRobotTask+0x310>
  		else if(instruct[2][0]==4)
 8001502:	2b04      	cmp	r3, #4
 8001504:	f000 8090 	beq.w	8001628 <StartRobotTask+0x318>
  		else if(instruct[2][0]==8)
 8001508:	2b08      	cmp	r3, #8
 800150a:	f47f af49 	bne.w	80013a0 <StartRobotTask+0x90>
  		  HAL_FLASH_Unlock();
 800150e:	f004 fb91 	bl	8005c34 <HAL_FLASH_Unlock>
  		  FirstSector = GetSector(FLASH_USER_START_ADDR);
 8001512:	482a      	ldr	r0, [pc, #168]	; (80015bc <StartRobotTask+0x2ac>)
 8001514:	f7ff fdea 	bl	80010ec <GetSector>
 8001518:	4607      	mov	r7, r0
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <StartRobotTask+0x2c8>)
 800151c:	6018      	str	r0, [r3, #0]
  		  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800151e:	482f      	ldr	r0, [pc, #188]	; (80015dc <StartRobotTask+0x2cc>)
 8001520:	f7ff fde4 	bl	80010ec <GetSector>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	1bdb      	subs	r3, r3, r7
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <StartRobotTask+0x2d0>)
 800152a:	6013      	str	r3, [r2, #0]
  		  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <StartRobotTask+0x2d4>)
 800152e:	2200      	movs	r2, #0
 8001530:	6002      	str	r2, [r0, #0]
  		  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001532:	2202      	movs	r2, #2
 8001534:	6102      	str	r2, [r0, #16]
  		  EraseInitStruct.Sector = FirstSector;
 8001536:	6087      	str	r7, [r0, #8]
  		  EraseInitStruct.NbSectors = NbOfSectors;
 8001538:	60c3      	str	r3, [r0, #12]
  		  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800153a:	492b      	ldr	r1, [pc, #172]	; (80015e8 <StartRobotTask+0x2d8>)
 800153c:	f004 fc7c 	bl	8005e38 <HAL_FLASHEx_Erase>
 8001540:	2800      	cmp	r0, #0
 8001542:	f040 80e0 	bne.w	8001706 <StartRobotTask+0x3f6>
  		   __HAL_FLASH_DATA_CACHE_DISABLE();
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <StartRobotTask+0x2dc>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154e:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001556:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_DATA_CACHE_RESET();
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001566:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001576:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157e:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001586:	601a      	str	r2, [r3, #0]
  		   Address = FLASH_USER_START_ADDR;
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <StartRobotTask+0x2ac>)
 800158a:	6031      	str	r1, [r6, #0]
  		     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, 0) == HAL_OK)
 800158c:	f04f 0800 	mov.w	r8, #0
 8001590:	f04f 0900 	mov.w	r9, #0
  		   while (Address < FLASH_USER_END_ADDR)
 8001594:	4f11      	ldr	r7, [pc, #68]	; (80015dc <StartRobotTask+0x2cc>)
  		     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, 0) == HAL_OK)
 8001596:	4642      	mov	r2, r8
 8001598:	464b      	mov	r3, r9
 800159a:	2001      	movs	r0, #1
 800159c:	f004 fb9a 	bl	8005cd4 <HAL_FLASH_Program>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	f040 80bd 	bne.w	8001720 <StartRobotTask+0x410>
  		       Address = Address + 2;
 80015a6:	6831      	ldr	r1, [r6, #0]
 80015a8:	3102      	adds	r1, #2
 80015aa:	6031      	str	r1, [r6, #0]
  		   while (Address < FLASH_USER_END_ADDR)
 80015ac:	42b9      	cmp	r1, r7
 80015ae:	d3f2      	bcc.n	8001596 <StartRobotTask+0x286>
  		   HAL_FLASH_Lock();
 80015b0:	f004 fb54 	bl	8005c5c <HAL_FLASH_Lock>
 80015b4:	e6f4      	b.n	80013a0 <StartRobotTask+0x90>
 80015b6:	bf00      	nop
 80015b8:	20002ba4 	.word	0x20002ba4
 80015bc:	08020000 	.word	0x08020000
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20002be1 	.word	0x20002be1
 80015c8:	20003288 	.word	0x20003288
 80015cc:	20002be0 	.word	0x20002be0
 80015d0:	20002be2 	.word	0x20002be2
 80015d4:	fffff449 	.word	0xfffff449
 80015d8:	20002bbc 	.word	0x20002bbc
 80015dc:	0805ffff 	.word	0x0805ffff
 80015e0:	20002bc0 	.word	0x20002bc0
 80015e4:	20002ba8 	.word	0x20002ba8
 80015e8:	20002bc4 	.word	0x20002bc4
 80015ec:	40023c00 	.word	0x40023c00
  			instruct[instruct_step][4] = cur_pulse1;
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <StartRobotTask+0x434>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2216      	movs	r2, #22
 80015f6:	fb02 5303 	mla	r3, r2, r3, r5
 80015fa:	4a53      	ldr	r2, [pc, #332]	; (8001748 <StartRobotTask+0x438>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	811a      	strh	r2, [r3, #8]
  			instruct[instruct_step][5] = cur_pulse2;
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <StartRobotTask+0x43c>)
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	815a      	strh	r2, [r3, #10]
  			instruct[instruct_step][6] = cur_pulse3;
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <StartRobotTask+0x440>)
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	819a      	strh	r2, [r3, #12]
  			instruct[instruct_step][7] = cur_pulse4;
 800160c:	4a51      	ldr	r2, [pc, #324]	; (8001754 <StartRobotTask+0x444>)
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	81da      	strh	r2, [r3, #14]
  			instruct[instruct_step][8] = cur_pulse5;
 8001612:	4a51      	ldr	r2, [pc, #324]	; (8001758 <StartRobotTask+0x448>)
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	821a      	strh	r2, [r3, #16]
  			instruct[instruct_step][9] = cur_pulse6;
 8001618:	4a50      	ldr	r2, [pc, #320]	; (800175c <StartRobotTask+0x44c>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	825a      	strh	r2, [r3, #18]
 800161e:	e6bf      	b.n	80013a0 <StartRobotTask+0x90>
  			is_single_run = 1;
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <StartRobotTask+0x450>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e6bb      	b.n	80013a0 <StartRobotTask+0x90>
  		  HAL_FLASH_Unlock();
 8001628:	f004 fb04 	bl	8005c34 <HAL_FLASH_Unlock>
  		  FirstSector = GetSector(FLASH_USER_START_ADDR);
 800162c:	484d      	ldr	r0, [pc, #308]	; (8001764 <StartRobotTask+0x454>)
 800162e:	f7ff fd5d 	bl	80010ec <GetSector>
 8001632:	4607      	mov	r7, r0
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <StartRobotTask+0x458>)
 8001636:	6018      	str	r0, [r3, #0]
  		  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8001638:	484c      	ldr	r0, [pc, #304]	; (800176c <StartRobotTask+0x45c>)
 800163a:	f7ff fd57 	bl	80010ec <GetSector>
 800163e:	1c43      	adds	r3, r0, #1
 8001640:	1bdb      	subs	r3, r3, r7
 8001642:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <StartRobotTask+0x460>)
 8001644:	6013      	str	r3, [r2, #0]
  		  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001646:	484b      	ldr	r0, [pc, #300]	; (8001774 <StartRobotTask+0x464>)
 8001648:	2200      	movs	r2, #0
 800164a:	6002      	str	r2, [r0, #0]
  		  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800164c:	2202      	movs	r2, #2
 800164e:	6102      	str	r2, [r0, #16]
  		  EraseInitStruct.Sector = FirstSector;
 8001650:	6087      	str	r7, [r0, #8]
  		  EraseInitStruct.NbSectors = NbOfSectors;
 8001652:	60c3      	str	r3, [r0, #12]
  		  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8001654:	4948      	ldr	r1, [pc, #288]	; (8001778 <StartRobotTask+0x468>)
 8001656:	f004 fbef 	bl	8005e38 <HAL_FLASHEx_Erase>
 800165a:	2800      	cmp	r0, #0
 800165c:	d139      	bne.n	80016d2 <StartRobotTask+0x3c2>
  		   __HAL_FLASH_DATA_CACHE_DISABLE();
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <StartRobotTask+0x46c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001666:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800166e:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_DATA_CACHE_RESET();
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800167e:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001696:	601a      	str	r2, [r3, #0]
  		   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800169e:	601a      	str	r2, [r3, #0]
  		   Address = FLASH_USER_START_ADDR;
 80016a0:	4930      	ldr	r1, [pc, #192]	; (8001764 <StartRobotTask+0x454>)
 80016a2:	6031      	str	r1, [r6, #0]
  		   int instruct_addr = 11;
 80016a4:	270b      	movs	r7, #11
  		  	 if(instruct_addr<(11*500))
 80016a6:	f241 537b 	movw	r3, #5499	; 0x157b
 80016aa:	429f      	cmp	r7, r3
  		  		 instruct_data = instruct[instruct_addr/11][instruct_addr%11];
 80016ac:	bfd4      	ite	le
 80016ae:	f935 2017 	ldrshle.w	r2, [r5, r7, lsl #1]
  		  	 else instruct_data = 0;
 80016b2:	2200      	movgt	r2, #0
  		     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, instruct_data) == HAL_OK)
 80016b4:	17d3      	asrs	r3, r2, #31
 80016b6:	2001      	movs	r0, #1
 80016b8:	f004 fb0c 	bl	8005cd4 <HAL_FLASH_Program>
 80016bc:	b9b0      	cbnz	r0, 80016ec <StartRobotTask+0x3dc>
  		    	 instruct_addr++;
 80016be:	3701      	adds	r7, #1
  		       Address = Address + 2;
 80016c0:	6831      	ldr	r1, [r6, #0]
 80016c2:	3102      	adds	r1, #2
 80016c4:	6031      	str	r1, [r6, #0]
  		   while (Address < FLASH_USER_END_ADDR)
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <StartRobotTask+0x45c>)
 80016c8:	4299      	cmp	r1, r3
 80016ca:	d3ec      	bcc.n	80016a6 <StartRobotTask+0x396>
  		   HAL_FLASH_Lock();
 80016cc:	f004 fac6 	bl	8005c5c <HAL_FLASH_Lock>
 80016d0:	e666      	b.n	80013a0 <StartRobotTask+0x90>
  		    	osDelay(1000);
 80016d2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  		    	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80016d6:	4d2a      	ldr	r5, [pc, #168]	; (8001780 <StartRobotTask+0x470>)
 80016d8:	f44f 7400 	mov.w	r4, #512	; 0x200
  		    	osDelay(1000);
 80016dc:	4630      	mov	r0, r6
 80016de:	f005 ffe0 	bl	80076a2 <osDelay>
  		    	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80016e2:	4621      	mov	r1, r4
 80016e4:	4628      	mov	r0, r5
 80016e6:	f004 fcf9 	bl	80060dc <HAL_GPIO_TogglePin>
  		    while (1)
 80016ea:	e7f7      	b.n	80016dc <StartRobotTask+0x3cc>
    		       	osDelay(500);
 80016ec:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    		       	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80016f0:	4d23      	ldr	r5, [pc, #140]	; (8001780 <StartRobotTask+0x470>)
 80016f2:	f44f 7400 	mov.w	r4, #512	; 0x200
    		       	osDelay(500);
 80016f6:	4630      	mov	r0, r6
 80016f8:	f005 ffd3 	bl	80076a2 <osDelay>
    		       	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80016fc:	4621      	mov	r1, r4
 80016fe:	4628      	mov	r0, r5
 8001700:	f004 fcec 	bl	80060dc <HAL_GPIO_TogglePin>
  		       while (1)
 8001704:	e7f7      	b.n	80016f6 <StartRobotTask+0x3e6>
  		    	osDelay(1000);
 8001706:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  		    	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800170a:	4d1d      	ldr	r5, [pc, #116]	; (8001780 <StartRobotTask+0x470>)
 800170c:	f44f 7400 	mov.w	r4, #512	; 0x200
  		    	osDelay(1000);
 8001710:	4630      	mov	r0, r6
 8001712:	f005 ffc6 	bl	80076a2 <osDelay>
  		    	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001716:	4621      	mov	r1, r4
 8001718:	4628      	mov	r0, r5
 800171a:	f004 fcdf 	bl	80060dc <HAL_GPIO_TogglePin>
  		    while (1)
 800171e:	e7f7      	b.n	8001710 <StartRobotTask+0x400>
    		       	osDelay(500);
 8001720:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    		       	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001724:	4d16      	ldr	r5, [pc, #88]	; (8001780 <StartRobotTask+0x470>)
 8001726:	f44f 7400 	mov.w	r4, #512	; 0x200
    		       	osDelay(500);
 800172a:	4630      	mov	r0, r6
 800172c:	f005 ffb9 	bl	80076a2 <osDelay>
    		       	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001730:	4621      	mov	r1, r4
 8001732:	4628      	mov	r0, r5
 8001734:	f004 fcd2 	bl	80060dc <HAL_GPIO_TogglePin>
  		       while (1)
 8001738:	e7f7      	b.n	800172a <StartRobotTask+0x41a>
		else is_stop = 0;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <StartRobotTask+0x474>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e63c      	b.n	80013bc <StartRobotTask+0xac>
 8001742:	bf00      	nop
 8001744:	20002af8 	.word	0x20002af8
 8001748:	20002bc8 	.word	0x20002bc8
 800174c:	20002bcc 	.word	0x20002bcc
 8001750:	20002bd0 	.word	0x20002bd0
 8001754:	20002bd4 	.word	0x20002bd4
 8001758:	20002bd8 	.word	0x20002bd8
 800175c:	20002bdc 	.word	0x20002bdc
 8001760:	20002be0 	.word	0x20002be0
 8001764:	08020000 	.word	0x08020000
 8001768:	20002bbc 	.word	0x20002bbc
 800176c:	0805ffff 	.word	0x0805ffff
 8001770:	20002bc0 	.word	0x20002bc0
 8001774:	20002ba8 	.word	0x20002ba8
 8001778:	20002bc4 	.word	0x20002bc4
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40021400 	.word	0x40021400
 8001784:	20002be2 	.word	0x20002be2

08001788 <CRC16_Modbus>:
{
 8001788:	b410      	push	{r4}
	for ( j=0; j<len;j++)
 800178a:	1e0c      	subs	r4, r1, #0
 800178c:	dd15      	ble.n	80017ba <CRC16_Modbus+0x32>
 800178e:	1e41      	subs	r1, r0, #1
 8001790:	440c      	add	r4, r1
	unsigned short crc=0xFFFF;
 8001792:	f64f 70ff 	movw	r0, #65535	; 0xffff
				crc=crc^ 0xa001;
 8001796:	f24a 0201 	movw	r2, #40961	; 0xa001
 800179a:	e001      	b.n	80017a0 <CRC16_Modbus+0x18>
	for ( j=0; j<len;j++)
 800179c:	42a1      	cmp	r1, r4
 800179e:	d00e      	beq.n	80017be <CRC16_Modbus+0x36>
		crc=crc^pdata[j];
 80017a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80017a4:	4058      	eors	r0, r3
 80017a6:	2308      	movs	r3, #8
			if( ( crc&0x0001) >0)
 80017a8:	f010 0f01 	tst.w	r0, #1
				crc=crc^ 0xa001;
 80017ac:	bf14      	ite	ne
 80017ae:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
				crc=crc>>1;
 80017b2:	0840      	lsreq	r0, r0, #1
		for ( i=0; i<8; i++)
 80017b4:	3b01      	subs	r3, #1
 80017b6:	d1f7      	bne.n	80017a8 <CRC16_Modbus+0x20>
 80017b8:	e7f0      	b.n	800179c <CRC16_Modbus+0x14>
	unsigned short crc=0xFFFF;
 80017ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80017be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <StartModbusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void const * argument)
{
 80017c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c8:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t tx_modbus[rx_bufSize];
	uint16_t start_count = 0;
	uint16_t end_count = 0;
	uint8_t flag = 0;
	uint16_t crc = 0;
	int time_out = 25;
 80017cc:	2719      	movs	r7, #25
	uint8_t flag = 0;
 80017ce:	2400      	movs	r4, #0
	uint16_t end_count = 0;
 80017d0:	4625      	mov	r5, r4
	uint16_t start_count = 0;
 80017d2:	4626      	mov	r6, r4
  /* Infinite loop */
  for(;;)
  {
  	rx_Count = rx_bufSize - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80017d4:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8001ac4 <StartModbusTask+0x300>
 80017d8:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8001ac8 <StartModbusTask+0x304>
  			}
  			else if(rx_modbus[1]==0x06)
  			{
					uint16_t adrr=0;
					adrr = rx_modbus[2]*256+rx_modbus[3];
					instruct[(adrr)/11][adrr%11] = rx_modbus[4]*256+rx_modbus[5];
 80017dc:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8001acc <StartModbusTask+0x308>
 80017e0:	e005      	b.n	80017ee <StartModbusTask+0x2a>
  	if(flag==1 && rx_Count==end_count)
 80017e2:	42ab      	cmp	r3, r5
 80017e4:	d017      	beq.n	8001816 <StartModbusTask+0x52>
  			}

  		}

  	}
  	if(rx_Count!=end_count)//正在接收数据
 80017e6:	461d      	mov	r5, r3
  	}




    osDelay(2);
 80017e8:	2002      	movs	r0, #2
 80017ea:	f005 ff5a 	bl	80076a2 <osDelay>
  	rx_Count = rx_bufSize - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80017ee:	f8d9 3000 	ldr.w	r3, [r9]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f8a8 3000 	strh.w	r3, [r8]
  	if(flag==1 && rx_Count==end_count)
 80017fe:	2c00      	cmp	r4, #0
 8001800:	d1ef      	bne.n	80017e2 <StartModbusTask+0x1e>
  	if(rx_Count!=end_count)//正在接收数据
 8001802:	f8b8 3000 	ldrh.w	r3, [r8]
 8001806:	42ab      	cmp	r3, r5
 8001808:	f040 8153 	bne.w	8001ab2 <StartModbusTask+0x2ee>
  		if(time_out<0)//通信断开
 800180c:	3f01      	subs	r7, #1
 800180e:	f100 814b 	bmi.w	8001aa8 <StartModbusTask+0x2e4>
 8001812:	2400      	movs	r4, #0
 8001814:	e7e8      	b.n	80017e8 <StartModbusTask+0x24>
  		for(;start_count!=end_count;)
 8001816:	42ae      	cmp	r6, r5
 8001818:	d021      	beq.n	800185e <StartModbusTask+0x9a>
 800181a:	a840      	add	r0, sp, #256	; 0x100
 800181c:	4602      	mov	r2, r0
 800181e:	f1c0 0001 	rsb	r0, r0, #1
  			rx_modbus[len++] = rx_data[start_count++];
 8001822:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 8001ad0 <StartModbusTask+0x30c>
 8001826:	1c73      	adds	r3, r6, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	1884      	adds	r4, r0, r2
 800182c:	f81c 1006 	ldrb.w	r1, [ip, r6]
 8001830:	f802 1b01 	strb.w	r1, [r2], #1
  			if(start_count>=rx_bufSize)start_count = 0;
 8001834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001838:	bf34      	ite	cc
 800183a:	461e      	movcc	r6, r3
 800183c:	2600      	movcs	r6, #0
  		for(;start_count!=end_count;)
 800183e:	42ae      	cmp	r6, r5
 8001840:	d1f1      	bne.n	8001826 <StartModbusTask+0x62>
  		crc=CRC16_Modbus(rx_modbus,len-2);
 8001842:	1ea6      	subs	r6, r4, #2
 8001844:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
 8001848:	4631      	mov	r1, r6
 800184a:	4658      	mov	r0, fp
 800184c:	f7ff ff9c 	bl	8001788 <CRC16_Modbus>
  		if(BYTE0(crc)==rx_modbus[len-2]&&BYTE1(crc)==rx_modbus[len-1])
 8001850:	f81b 2006 	ldrb.w	r2, [fp, r6]
 8001854:	b2c3      	uxtb	r3, r0
 8001856:	429a      	cmp	r2, r3
 8001858:	d003      	beq.n	8001862 <StartModbusTask+0x9e>
 800185a:	462e      	mov	r6, r5
 800185c:	e7d6      	b.n	800180c <StartModbusTask+0x48>
  		int len=0;
 800185e:	2400      	movs	r4, #0
 8001860:	e7ef      	b.n	8001842 <StartModbusTask+0x7e>
  		if(BYTE0(crc)==rx_modbus[len-2]&&BYTE1(crc)==rx_modbus[len-1])
 8001862:	ab40      	add	r3, sp, #256	; 0x100
 8001864:	441c      	add	r4, r3
 8001866:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800186a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800186e:	4298      	cmp	r0, r3
 8001870:	d001      	beq.n	8001876 <StartModbusTask+0xb2>
 8001872:	462e      	mov	r6, r5
 8001874:	e7ca      	b.n	800180c <StartModbusTask+0x48>
  			if(rx_modbus[1]==0x03)
 8001876:	f89d 3101 	ldrb.w	r3, [sp, #257]	; 0x101
 800187a:	2b03      	cmp	r3, #3
 800187c:	d00b      	beq.n	8001896 <StartModbusTask+0xd2>
  			else if(rx_modbus[1]==0x04)
 800187e:	2b04      	cmp	r3, #4
 8001880:	d058      	beq.n	8001934 <StartModbusTask+0x170>
  			else if(rx_modbus[1]==0x10)
 8001882:	2b10      	cmp	r3, #16
 8001884:	f000 809a 	beq.w	80019bc <StartModbusTask+0x1f8>
  			else if(rx_modbus[1]==0x06)
 8001888:	2b06      	cmp	r3, #6
 800188a:	f000 80e8 	beq.w	8001a5e <StartModbusTask+0x29a>
 800188e:	462e      	mov	r6, r5
  		time_out--;
 8001890:	2718      	movs	r7, #24
 8001892:	2400      	movs	r4, #0
 8001894:	e7a8      	b.n	80017e8 <StartModbusTask+0x24>
					tx_modbus[tx_len++] = rx_modbus[0];
 8001896:	f89d 3100 	ldrb.w	r3, [sp, #256]	; 0x100
 800189a:	f88d 3000 	strb.w	r3, [sp]
					tx_modbus[tx_len++] = rx_modbus[1];
 800189e:	2303      	movs	r3, #3
 80018a0:	f88d 3001 	strb.w	r3, [sp, #1]
					adrr = rx_modbus[2]*256+rx_modbus[3];
 80018a4:	f89d 3102 	ldrb.w	r3, [sp, #258]	; 0x102
 80018a8:	f89d 7103 	ldrb.w	r7, [sp, #259]	; 0x103
 80018ac:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80018b0:	b2bf      	uxth	r7, r7
					tx_modbus[tx_len++] = rx_modbus[5]*2;
 80018b2:	f89d 6105 	ldrb.w	r6, [sp, #261]	; 0x105
 80018b6:	0073      	lsls	r3, r6, #1
 80018b8:	f88d 3002 	strb.w	r3, [sp, #2]
					for(int i=0; i<rx_modbus[5];i++,adrr++)
 80018bc:	46b4      	mov	ip, r6
 80018be:	b3be      	cbz	r6, 8001930 <StartModbusTask+0x16c>
 80018c0:	2000      	movs	r0, #0
					tx_modbus[tx_len++] = rx_modbus[5]*2;
 80018c2:	2103      	movs	r1, #3
						tx_modbus[tx_len++] = BYTE1(instruct[(adrr)/11][adrr%11]);
 80018c4:	4c7c      	ldr	r4, [pc, #496]	; (8001ab8 <StartModbusTask+0x2f4>)
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	fbaa e203 	umull	lr, r2, sl, r3
 80018ce:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 80018d2:	eb0e 0b8e 	add.w	fp, lr, lr, lsl #2
 80018d6:	eb0e 024b 	add.w	r2, lr, fp, lsl #1
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	fa12 f383 	uxtah	r3, r2, r3
 80018e0:	eb04 0e43 	add.w	lr, r4, r3, lsl #1
 80018e4:	1c4a      	adds	r2, r1, #1
 80018e6:	b292      	uxth	r2, r2
 80018e8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80018ec:	f80d e001 	strb.w	lr, [sp, r1]
						tx_modbus[tx_len++] = BYTE0(instruct[(adrr)/11][adrr%11]);
 80018f0:	3102      	adds	r1, #2
 80018f2:	b289      	uxth	r1, r1
 80018f4:	f814 3013 	ldrb.w	r3, [r4, r3, lsl #1]
 80018f8:	f80d 3002 	strb.w	r3, [sp, r2]
					for(int i=0; i<rx_modbus[5];i++,adrr++)
 80018fc:	3001      	adds	r0, #1
 80018fe:	4560      	cmp	r0, ip
 8001900:	d1e1      	bne.n	80018c6 <StartModbusTask+0x102>
 8001902:	0074      	lsls	r4, r6, #1
 8001904:	3403      	adds	r4, #3
					crc=CRC16_Modbus(tx_modbus,tx_len);
 8001906:	4621      	mov	r1, r4
 8001908:	4668      	mov	r0, sp
 800190a:	f7ff ff3d 	bl	8001788 <CRC16_Modbus>
					tx_modbus[tx_len++] = BYTE0(crc);
 800190e:	f80d 0004 	strb.w	r0, [sp, r4]
 8001912:	1c62      	adds	r2, r4, #1
					tx_modbus[tx_len++] = BYTE1(crc);
 8001914:	b292      	uxth	r2, r2
 8001916:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800191a:	f80d 3002 	strb.w	r3, [sp, r2]
 800191e:	1ca2      	adds	r2, r4, #2
					HAL_UART_Transmit_DMA(&huart2, tx_modbus, tx_len);
 8001920:	b292      	uxth	r2, r2
 8001922:	4669      	mov	r1, sp
 8001924:	4865      	ldr	r0, [pc, #404]	; (8001abc <StartModbusTask+0x2f8>)
 8001926:	f005 fbc5 	bl	80070b4 <HAL_UART_Transmit_DMA>
 800192a:	462e      	mov	r6, r5
  			time_out=25;
 800192c:	2719      	movs	r7, #25
 800192e:	e768      	b.n	8001802 <StartModbusTask+0x3e>
					tx_modbus[tx_len++] = rx_modbus[5]*2;
 8001930:	2403      	movs	r4, #3
 8001932:	e7e8      	b.n	8001906 <StartModbusTask+0x142>
					tx_modbus[tx_len++] = rx_modbus[0];
 8001934:	f89d 3100 	ldrb.w	r3, [sp, #256]	; 0x100
 8001938:	f88d 3000 	strb.w	r3, [sp]
					tx_modbus[tx_len++] = rx_modbus[1];
 800193c:	2304      	movs	r3, #4
 800193e:	f88d 3001 	strb.w	r3, [sp, #1]
					adrr = rx_modbus[2]*256+rx_modbus[3];
 8001942:	f89d 3102 	ldrb.w	r3, [sp, #258]	; 0x102
 8001946:	f89d 7103 	ldrb.w	r7, [sp, #259]	; 0x103
 800194a:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 800194e:	b2bf      	uxth	r7, r7
					tx_modbus[tx_len++] = rx_modbus[5]*2;
 8001950:	f89d 4105 	ldrb.w	r4, [sp, #261]	; 0x105
 8001954:	0063      	lsls	r3, r4, #1
 8001956:	f88d 3002 	strb.w	r3, [sp, #2]
					for(int i=0; i<rx_modbus[5];i++,adrr++)
 800195a:	46a4      	mov	ip, r4
 800195c:	b364      	cbz	r4, 80019b8 <StartModbusTask+0x1f4>
 800195e:	2100      	movs	r1, #0
					tx_modbus[tx_len++] = rx_modbus[5]*2;
 8001960:	2303      	movs	r3, #3
						tx_modbus[tx_len++] = BYTE1(adc_data[adrr]);
 8001962:	4e57      	ldr	r6, [pc, #348]	; (8001ac0 <StartModbusTask+0x2fc>)
 8001964:	187a      	adds	r2, r7, r1
 8001966:	b292      	uxth	r2, r2
 8001968:	eb06 0e42 	add.w	lr, r6, r2, lsl #1
 800196c:	1c58      	adds	r0, r3, #1
 800196e:	b280      	uxth	r0, r0
 8001970:	f89e e001 	ldrb.w	lr, [lr, #1]
 8001974:	f80d e003 	strb.w	lr, [sp, r3]
						tx_modbus[tx_len++] = BYTE0(adc_data[adrr]);
 8001978:	3302      	adds	r3, #2
 800197a:	b29b      	uxth	r3, r3
 800197c:	f816 2012 	ldrb.w	r2, [r6, r2, lsl #1]
 8001980:	f80d 2000 	strb.w	r2, [sp, r0]
					for(int i=0; i<rx_modbus[5];i++,adrr++)
 8001984:	3101      	adds	r1, #1
 8001986:	4561      	cmp	r1, ip
 8001988:	d1ec      	bne.n	8001964 <StartModbusTask+0x1a0>
 800198a:	0064      	lsls	r4, r4, #1
 800198c:	3403      	adds	r4, #3
					crc=CRC16_Modbus(tx_modbus,tx_len);
 800198e:	4621      	mov	r1, r4
 8001990:	4668      	mov	r0, sp
 8001992:	f7ff fef9 	bl	8001788 <CRC16_Modbus>
					tx_modbus[tx_len++] = BYTE0(crc);
 8001996:	f80d 0004 	strb.w	r0, [sp, r4]
 800199a:	1c62      	adds	r2, r4, #1
					tx_modbus[tx_len++] = BYTE1(crc);
 800199c:	b292      	uxth	r2, r2
 800199e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80019a2:	f80d 3002 	strb.w	r3, [sp, r2]
 80019a6:	1ca2      	adds	r2, r4, #2
					HAL_UART_Transmit_DMA(&huart2, tx_modbus, tx_len);
 80019a8:	b292      	uxth	r2, r2
 80019aa:	4669      	mov	r1, sp
 80019ac:	4843      	ldr	r0, [pc, #268]	; (8001abc <StartModbusTask+0x2f8>)
 80019ae:	f005 fb81 	bl	80070b4 <HAL_UART_Transmit_DMA>
 80019b2:	462e      	mov	r6, r5
  			time_out=25;
 80019b4:	2719      	movs	r7, #25
 80019b6:	e724      	b.n	8001802 <StartModbusTask+0x3e>
					tx_modbus[tx_len++] = rx_modbus[5]*2;
 80019b8:	2403      	movs	r4, #3
 80019ba:	e7e8      	b.n	800198e <StartModbusTask+0x1ca>
					adrr = rx_modbus[2]*256+rx_modbus[3];
 80019bc:	f89d 7102 	ldrb.w	r7, [sp, #258]	; 0x102
 80019c0:	f89d 6103 	ldrb.w	r6, [sp, #259]	; 0x103
 80019c4:	eb06 2207 	add.w	r2, r6, r7, lsl #8
 80019c8:	b292      	uxth	r2, r2
					for(int i=0;i<rx_modbus[6];i+=2,adrr++)
 80019ca:	f89d 3106 	ldrb.w	r3, [sp, #262]	; 0x106
 80019ce:	b30b      	cbz	r3, 8001a14 <StartModbusTask+0x250>
 80019d0:	a940      	add	r1, sp, #256	; 0x100
 80019d2:	3b01      	subs	r3, #1
 80019d4:	1c50      	adds	r0, r2, #1
 80019d6:	eb00 0353 	add.w	r3, r0, r3, lsr #1
 80019da:	b298      	uxth	r0, r3
						instruct[(adrr)/11][adrr%11] = rx_modbus[7+i]*256+rx_modbus[8+i];
 80019dc:	4c36      	ldr	r4, [pc, #216]	; (8001ab8 <StartModbusTask+0x2f4>)
 80019de:	fbaa 3c02 	umull	r3, ip, sl, r2
 80019e2:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80019e6:	469c      	mov	ip, r3
 80019e8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80019ec:	eb03 034e 	add.w	r3, r3, lr, lsl #1
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 80019f6:	fa1c f383 	uxtah	r3, ip, r3
 80019fa:	f891 e007 	ldrb.w	lr, [r1, #7]
 80019fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 8001a02:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
 8001a06:	f824 c013 	strh.w	ip, [r4, r3, lsl #1]
					for(int i=0;i<rx_modbus[6];i+=2,adrr++)
 8001a0a:	3201      	adds	r2, #1
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	3102      	adds	r1, #2
 8001a10:	4282      	cmp	r2, r0
 8001a12:	d1e4      	bne.n	80019de <StartModbusTask+0x21a>
					tx_modbus[tx_len++] = rx_modbus[0];
 8001a14:	f89d 3100 	ldrb.w	r3, [sp, #256]	; 0x100
 8001a18:	f88d 3000 	strb.w	r3, [sp]
					tx_modbus[tx_len++] = rx_modbus[1];
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	f88d 3001 	strb.w	r3, [sp, #1]
					tx_modbus[tx_len++] = rx_modbus[2];
 8001a22:	f88d 7002 	strb.w	r7, [sp, #2]
					tx_modbus[tx_len++] = rx_modbus[3];
 8001a26:	f88d 6003 	strb.w	r6, [sp, #3]
					tx_modbus[tx_len++] = rx_modbus[4];
 8001a2a:	f89d 3104 	ldrb.w	r3, [sp, #260]	; 0x104
 8001a2e:	f88d 3004 	strb.w	r3, [sp, #4]
					tx_modbus[tx_len++] = rx_modbus[5];
 8001a32:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8001a36:	f88d 3005 	strb.w	r3, [sp, #5]
					crc=CRC16_Modbus(tx_modbus,tx_len);
 8001a3a:	2106      	movs	r1, #6
 8001a3c:	4668      	mov	r0, sp
 8001a3e:	f7ff fea3 	bl	8001788 <CRC16_Modbus>
					tx_modbus[tx_len++] = BYTE0(crc);
 8001a42:	f88d 0006 	strb.w	r0, [sp, #6]
					tx_modbus[tx_len++] = BYTE1(crc);
 8001a46:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001a4a:	f88d 3007 	strb.w	r3, [sp, #7]
					HAL_UART_Transmit_DMA(&huart2, tx_modbus, tx_len);
 8001a4e:	2208      	movs	r2, #8
 8001a50:	4669      	mov	r1, sp
 8001a52:	481a      	ldr	r0, [pc, #104]	; (8001abc <StartModbusTask+0x2f8>)
 8001a54:	f005 fb2e 	bl	80070b4 <HAL_UART_Transmit_DMA>
 8001a58:	462e      	mov	r6, r5
  			time_out=25;
 8001a5a:	2719      	movs	r7, #25
 8001a5c:	e6d1      	b.n	8001802 <StartModbusTask+0x3e>
					adrr = rx_modbus[2]*256+rx_modbus[3];
 8001a5e:	f89d 2102 	ldrb.w	r2, [sp, #258]	; 0x102
 8001a62:	f89d 3103 	ldrb.w	r3, [sp, #259]	; 0x103
 8001a66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001a6a:	b29b      	uxth	r3, r3
					instruct[(adrr)/11][adrr%11] = rx_modbus[4]*256+rx_modbus[5];
 8001a6c:	fbaa 1203 	umull	r1, r2, sl, r3
 8001a70:	08d1      	lsrs	r1, r2, #3
 8001a72:	460a      	mov	r2, r1
 8001a74:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001a78:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001a7c:	1a5b      	subs	r3, r3, r1
 8001a7e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001a82:	fa12 f383 	uxtah	r3, r2, r3
 8001a86:	f89d 1104 	ldrb.w	r1, [sp, #260]	; 0x104
 8001a8a:	f89d 2105 	ldrb.w	r2, [sp, #261]	; 0x105
 8001a8e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8001a92:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <StartModbusTask+0x2f4>)
 8001a94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					HAL_UART_Transmit_DMA(&huart2, rx_modbus, 8);
 8001a98:	2208      	movs	r2, #8
 8001a9a:	a940      	add	r1, sp, #256	; 0x100
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <StartModbusTask+0x2f8>)
 8001a9e:	f005 fb09 	bl	80070b4 <HAL_UART_Transmit_DMA>
 8001aa2:	462e      	mov	r6, r5
  			time_out=25;
 8001aa4:	2719      	movs	r7, #25
 8001aa6:	e6ac      	b.n	8001802 <StartModbusTask+0x3e>
  			instruct[0][0]=0;
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <StartModbusTask+0x2f4>)
 8001aac:	801c      	strh	r4, [r3, #0]
  			time_out=0;
 8001aae:	4627      	mov	r7, r4
 8001ab0:	e69a      	b.n	80017e8 <StartModbusTask+0x24>
  	if(rx_Count!=end_count)//正在接收数据
 8001ab2:	461d      	mov	r5, r3
  		flag = 1;
 8001ab4:	2401      	movs	r4, #1
 8001ab6:	e697      	b.n	80017e8 <StartModbusTask+0x24>
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20003494 	.word	0x20003494
 8001ac0:	200030f0 	.word	0x200030f0
 8001ac4:	20003330 	.word	0x20003330
 8001ac8:	20003044 	.word	0x20003044
 8001acc:	ba2e8ba3 	.word	0xba2e8ba3
 8001ad0:	20003104 	.word	0x20003104

08001ad4 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <vApplicationGetIdleTaskMemory+0x10>)
 8001ad6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <vApplicationGetIdleTaskMemory+0x14>)
 8001ada:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20002df4 	.word	0x20002df4
 8001ae8:	20002bf4 	.word	0x20002bf4

08001aec <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001aec:	b570      	push	{r4, r5, r6, lr}
 8001aee:	b0b2      	sub	sp, #200	; 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001af0:	4c34      	ldr	r4, [pc, #208]	; (8001bc4 <MX_FREERTOS_Init+0xd8>)
 8001af2:	ad2b      	add	r5, sp, #172	; 0xac
 8001af4:	4626      	mov	r6, r4
 8001af6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001afe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b02:	2100      	movs	r1, #0
 8001b04:	a82b      	add	r0, sp, #172	; 0xac
 8001b06:	f005 fda0 	bl	800764a <osThreadCreate>
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <MX_FREERTOS_Init+0xdc>)
 8001b0c:	6018      	str	r0, [r3, #0]
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 8001b0e:	ad24      	add	r5, sp, #144	; 0x90
 8001b10:	f104 061c 	add.w	r6, r4, #28
 8001b14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b18:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b1c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 8001b20:	2100      	movs	r1, #0
 8001b22:	a824      	add	r0, sp, #144	; 0x90
 8001b24:	f005 fd91 	bl	800764a <osThreadCreate>
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <MX_FREERTOS_Init+0xe0>)
 8001b2a:	6018      	str	r0, [r3, #0]
  osThreadDef(SendTask, StartSendTask, osPriorityNormal, 0, 512);
 8001b2c:	ad1d      	add	r5, sp, #116	; 0x74
 8001b2e:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8001b32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b3a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SendTaskHandle = osThreadCreate(osThread(SendTask), NULL);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	a81d      	add	r0, sp, #116	; 0x74
 8001b42:	f005 fd82 	bl	800764a <osThreadCreate>
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_FREERTOS_Init+0xe4>)
 8001b48:	6018      	str	r0, [r3, #0]
  osThreadDef(RobotTask, StartRobotTask, osPriorityNormal, 0, 256);
 8001b4a:	ad16      	add	r5, sp, #88	; 0x58
 8001b4c:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8001b50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  RobotTaskHandle = osThreadCreate(osThread(RobotTask), NULL);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	a816      	add	r0, sp, #88	; 0x58
 8001b60:	f005 fd73 	bl	800764a <osThreadCreate>
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_FREERTOS_Init+0xe8>)
 8001b66:	6018      	str	r0, [r3, #0]
  osThreadDef(DemoTask, StartDemoTask, osPriorityNormal, 0, 128);
 8001b68:	ad0f      	add	r5, sp, #60	; 0x3c
 8001b6a:	f104 0670 	add.w	r6, r4, #112	; 0x70
 8001b6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b72:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  DemoTaskHandle = osThreadCreate(osThread(DemoTask), NULL);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	a80f      	add	r0, sp, #60	; 0x3c
 8001b7e:	f005 fd64 	bl	800764a <osThreadCreate>
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_FREERTOS_Init+0xec>)
 8001b84:	6018      	str	r0, [r3, #0]
  osThreadDef(TestTask, StartTestTask, osPriorityIdle, 0, 128);
 8001b86:	ad08      	add	r5, sp, #32
 8001b88:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 8001b8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  TestTaskHandle = osThreadCreate(osThread(TestTask), NULL);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	a808      	add	r0, sp, #32
 8001b9c:	f005 fd55 	bl	800764a <osThreadCreate>
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_FREERTOS_Init+0xf0>)
 8001ba2:	6018      	str	r0, [r3, #0]
  osThreadDef(ModbusTask, StartModbusTask, osPriorityNormal, 0, 512);
 8001ba4:	ad01      	add	r5, sp, #4
 8001ba6:	34a8      	adds	r4, #168	; 0xa8
 8001ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	a801      	add	r0, sp, #4
 8001bb8:	f005 fd47 	bl	800764a <osThreadCreate>
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_FREERTOS_Init+0xf4>)
 8001bbe:	6018      	str	r0, [r3, #0]
}
 8001bc0:	b032      	add	sp, #200	; 0xc8
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}
 8001bc4:	0800a170 	.word	0x0800a170
 8001bc8:	20003204 	.word	0x20003204
 8001bcc:	2000323c 	.word	0x2000323c
 8001bd0:	200032a8 	.word	0x200032a8
 8001bd4:	20003220 	.word	0x20003220
 8001bd8:	200032a0 	.word	0x200032a0
 8001bdc:	200032a4 	.word	0x200032a4
 8001be0:	20003240 	.word	0x20003240

08001be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be8:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	2400      	movs	r4, #0
 8001bec:	9409      	str	r4, [sp, #36]	; 0x24
 8001bee:	940a      	str	r4, [sp, #40]	; 0x28
 8001bf0:	940b      	str	r4, [sp, #44]	; 0x2c
 8001bf2:	940c      	str	r4, [sp, #48]	; 0x30
 8001bf4:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	9401      	str	r4, [sp, #4]
 8001bf8:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <MX_GPIO_Init+0x15c>)
 8001bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfc:	f042 0204 	orr.w	r2, r2, #4
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
 8001c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c04:	f002 0204 	and.w	r2, r2, #4
 8001c08:	9201      	str	r2, [sp, #4]
 8001c0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0c:	9402      	str	r4, [sp, #8]
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
 8001c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c18:	f002 0220 	and.w	r2, r2, #32
 8001c1c:	9202      	str	r2, [sp, #8]
 8001c1e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c20:	9403      	str	r4, [sp, #12]
 8001c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c2c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001c30:	9203      	str	r2, [sp, #12]
 8001c32:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	9404      	str	r4, [sp, #16]
 8001c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	f002 0201 	and.w	r2, r2, #1
 8001c44:	9204      	str	r2, [sp, #16]
 8001c46:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c48:	9405      	str	r4, [sp, #20]
 8001c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
 8001c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c54:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001c58:	9205      	str	r2, [sp, #20]
 8001c5a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5c:	9406      	str	r4, [sp, #24]
 8001c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c60:	f042 0210 	orr.w	r2, r2, #16
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
 8001c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c68:	f002 0210 	and.w	r2, r2, #16
 8001c6c:	9206      	str	r2, [sp, #24]
 8001c6e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	9407      	str	r4, [sp, #28]
 8001c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c74:	f042 0202 	orr.w	r2, r2, #2
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7c:	f002 0202 	and.w	r2, r2, #2
 8001c80:	9207      	str	r2, [sp, #28]
 8001c82:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c84:	9408      	str	r4, [sp, #32]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	f042 0208 	orr.w	r2, r2, #8
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	9308      	str	r3, [sp, #32]
 8001c96:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001c98:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001d4c <MX_GPIO_Init+0x168>
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001ca2:	4648      	mov	r0, r9
 8001ca4:	f004 fa14 	bl	80060d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, STEP6_DIR_Pin|STEP6_PUL_Pin, GPIO_PIN_RESET);
 8001ca8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001d50 <MX_GPIO_Init+0x16c>
 8001cac:	4622      	mov	r2, r4
 8001cae:	2103      	movs	r1, #3
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	f004 fa0d 	bl	80060d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEP1_DIR_Pin|STEP1_PUL_Pin|STEP2_DIR_Pin|STEP2_PUL_Pin
 8001cb6:	4e23      	ldr	r6, [pc, #140]	; (8001d44 <MX_GPIO_Init+0x160>)
 8001cb8:	4622      	mov	r2, r4
 8001cba:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f004 fa06 	bl	80060d0 <HAL_GPIO_WritePin>
                          |STEP3_DIR_Pin|STEP3_PUL_Pin|STEP4_DIR_Pin|STEP4_PUL_Pin
                          |STEP5_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port, STEP5_PUL_Pin, GPIO_PIN_RESET);
 8001cc4:	4f20      	ldr	r7, [pc, #128]	; (8001d48 <MX_GPIO_Init+0x164>)
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f004 f9ff 	bl	80060d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cd6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2501      	movs	r5, #1
 8001cda:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ce0:	a909      	add	r1, sp, #36	; 0x24
 8001ce2:	4648      	mov	r0, r9
 8001ce4:	f004 f8fc 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STEP6_DIR_Pin|STEP6_PUL_Pin;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf2:	a909      	add	r1, sp, #36	; 0x24
 8001cf4:	4640      	mov	r0, r8
 8001cf6:	f004 f8f3 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STEP1_DIR_Pin|STEP1_PUL_Pin|STEP2_DIR_Pin|STEP2_PUL_Pin
 8001cfa:	f649 7380 	movw	r3, #40832	; 0x9f80
 8001cfe:	9309      	str	r3, [sp, #36]	; 0x24
                          |STEP3_DIR_Pin|STEP3_PUL_Pin|STEP5_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d06:	a909      	add	r1, sp, #36	; 0x24
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f004 f8e9 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = STEP4_DIR_Pin|STEP4_PUL_Pin;
 8001d0e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d12:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d14:	2311      	movs	r3, #17
 8001d16:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1c:	a909      	add	r1, sp, #36	; 0x24
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f004 f8de 	bl	8005ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEP5_PUL_Pin;
 8001d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d28:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(STEP5_PUL_GPIO_Port, &GPIO_InitStruct);
 8001d30:	a909      	add	r1, sp, #36	; 0x24
 8001d32:	4638      	mov	r0, r7
 8001d34:	f004 f8d4 	bl	8005ee0 <HAL_GPIO_Init>

}
 8001d38:	b00f      	add	sp, #60	; 0x3c
 8001d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b500      	push	{lr}
 8001d56:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d58:	2230      	movs	r2, #48	; 0x30
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	a808      	add	r0, sp, #32
 8001d5e:	f006 faa7 	bl	80082b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d62:	2300      	movs	r3, #0
 8001d64:	9303      	str	r3, [sp, #12]
 8001d66:	9304      	str	r3, [sp, #16]
 8001d68:	9305      	str	r3, [sp, #20]
 8001d6a:	9306      	str	r3, [sp, #24]
 8001d6c:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <SystemClock_Config+0x9c>)
 8001d72:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d74:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d78:	6411      	str	r1, [r2, #64]	; 0x40
 8001d7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d80:	9201      	str	r2, [sp, #4]
 8001d82:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <SystemClock_Config+0xa0>)
 8001d88:	6811      	ldr	r1, [r2, #0]
 8001d8a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001d8e:	6011      	str	r1, [r2, #0]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d96:	9202      	str	r2, [sp, #8]
 8001d98:	9a02      	ldr	r2, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d9e:	2101      	movs	r1, #1
 8001da0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da2:	2110      	movs	r1, #16
 8001da4:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001daa:	2308      	movs	r3, #8
 8001dac:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dae:	23a8      	movs	r3, #168	; 0xa8
 8001db0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db4:	2304      	movs	r3, #4
 8001db6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db8:	a808      	add	r0, sp, #32
 8001dba:	f004 f999 	bl	80060f0 <HAL_RCC_OscConfig>
 8001dbe:	b998      	cbnz	r0, 8001de8 <SystemClock_Config+0x94>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dd0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd6:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dd8:	2105      	movs	r1, #5
 8001dda:	a803      	add	r0, sp, #12
 8001ddc:	f004 fbec 	bl	80065b8 <HAL_RCC_ClockConfig>
 8001de0:	b920      	cbnz	r0, 8001dec <SystemClock_Config+0x98>
  {
    Error_Handler();
  }
}
 8001de2:	b015      	add	sp, #84	; 0x54
 8001de4:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dea:	e7fe      	b.n	8001dea <SystemClock_Config+0x96>
 8001dec:	b672      	cpsid	i
 8001dee:	e7fe      	b.n	8001dee <SystemClock_Config+0x9a>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <main>:
{
 8001df8:	b508      	push	{r3, lr}
  HAL_Init();
 8001dfa:	f003 f86b 	bl	8004ed4 <HAL_Init>
  SystemClock_Config();
 8001dfe:	f7ff ffa9 	bl	8001d54 <SystemClock_Config>
  MX_GPIO_Init();
 8001e02:	f7ff feef 	bl	8001be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e06:	f7ff f935 	bl	8001074 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e0a:	f7ff f841 	bl	8000e90 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001e0e:	f002 ff07 	bl	8004c20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e12:	f002 ff1f 	bl	8004c54 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001e16:	f002 fe8d 	bl	8004b34 <MX_TIM1_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 8);
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	490b      	ldr	r1, [pc, #44]	; (8001e4c <main+0x54>)
 8001e1e:	480c      	ldr	r0, [pc, #48]	; (8001e50 <main+0x58>)
 8001e20:	f003 f946 	bl	80050b0 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_DMA(&huart2, rx_data, rx_bufSize);
 8001e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e28:	490a      	ldr	r1, [pc, #40]	; (8001e54 <main+0x5c>)
 8001e2a:	480b      	ldr	r0, [pc, #44]	; (8001e58 <main+0x60>)
 8001e2c:	f005 fbec 	bl	8007608 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8001e30:	4c0a      	ldr	r4, [pc, #40]	; (8001e5c <main+0x64>)
 8001e32:	4620      	mov	r0, r4
 8001e34:	f004 fd26 	bl	8006884 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1,TIM_CHANNEL_1);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f004 ff4a 	bl	8006cd4 <HAL_TIM_OC_Start_IT>
  MX_FREERTOS_Init();
 8001e40:	f7ff fe54 	bl	8001aec <MX_FREERTOS_Init>
  osKernelStart();
 8001e44:	f005 fbfc 	bl	8007640 <osKernelStart>
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <main+0x50>
 8001e4a:	bf00      	nop
 8001e4c:	200030f0 	.word	0x200030f0
 8001e50:	20003048 	.word	0x20003048
 8001e54:	20003104 	.word	0x20003104
 8001e58:	20003494 	.word	0x20003494
 8001e5c:	200032e8 	.word	0x200032e8

08001e60 <HAL_TIM_OC_DelayElapsedCallback>:
	if(htim==&htim1){
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <HAL_TIM_OC_DelayElapsedCallback+0x8>)
 8001e62:	4283      	cmp	r3, r0
 8001e64:	d002      	beq.n	8001e6c <HAL_TIM_OC_DelayElapsedCallback+0xc>
 8001e66:	4770      	bx	lr
 8001e68:	200032e8 	.word	0x200032e8
{
 8001e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e70:	ed2d 8b08 	vpush	{d8-d11}
 8001e74:	b089      	sub	sp, #36	; 0x24
		HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_SET);
 8001e76:	4cc8      	ldr	r4, [pc, #800]	; (8002198 <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f004 f926 	bl	80060d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f004 f920 	bl	80060d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e96:	4620      	mov	r0, r4
 8001e98:	f004 f91a 	bl	80060d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f004 f914 	bl	80060d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_SET);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eae:	48bb      	ldr	r0, [pc, #748]	; (800219c <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 8001eb0:	f004 f90e 	bl	80060d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	48b9      	ldr	r0, [pc, #740]	; (80021a0 <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 8001eba:	f004 f909 	bl	80060d0 <HAL_GPIO_WritePin>
		if(!is_start){
 8001ebe:	4bb9      	ldr	r3, [pc, #740]	; (80021a4 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d16c      	bne.n	8001fa0 <HAL_TIM_OC_DelayElapsedCallback+0x140>
			if(foc_cut[0]>100){
 8001ec6:	4bb8      	ldr	r3, [pc, #736]	; (80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	f340 845b 	ble.w	8002786 <HAL_TIM_OC_DelayElapsedCallback+0x926>
				step1_foc++;
 8001ed0:	4ab6      	ldr	r2, [pc, #728]	; (80021ac <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	3201      	adds	r2, #1
				if(step1_foc>(10000/(foc_cut[0]))){
 8001ed6:	f242 7110 	movw	r1, #10000	; 0x2710
 8001eda:	fb91 f3f3 	sdiv	r3, r1, r3
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	f300 843e 	bgt.w	8002760 <HAL_TIM_OC_DelayElapsedCallback+0x900>
				step1_foc++;
 8001ee4:	4bb1      	ldr	r3, [pc, #708]	; (80021ac <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 8001ee6:	601a      	str	r2, [r3, #0]
			if(foc_cut[1]>100){
 8001ee8:	4baf      	ldr	r3, [pc, #700]	; (80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	f340 8486 	ble.w	80027fe <HAL_TIM_OC_DelayElapsedCallback+0x99e>
				step2_foc++;
 8001ef2:	4aaf      	ldr	r2, [pc, #700]	; (80021b0 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	3201      	adds	r2, #1
				if(step2_foc>(20000/(foc_cut[1]))){
 8001ef8:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001efc:	fb91 f3f3 	sdiv	r3, r1, r3
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f300 8468 	bgt.w	80027d6 <HAL_TIM_OC_DelayElapsedCallback+0x976>
				step2_foc++;
 8001f06:	4baa      	ldr	r3, [pc, #680]	; (80021b0 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 8001f08:	601a      	str	r2, [r3, #0]
			if(foc_cut[2]>100){
 8001f0a:	4ba7      	ldr	r3, [pc, #668]	; (80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	f340 84b2 	ble.w	8002878 <HAL_TIM_OC_DelayElapsedCallback+0xa18>
				step3_foc++;
 8001f14:	4aa7      	ldr	r2, [pc, #668]	; (80021b4 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	3201      	adds	r2, #1
				if(step3_foc>(10000/(foc_cut[2]))){
 8001f1a:	f242 7110 	movw	r1, #10000	; 0x2710
 8001f1e:	fb91 f3f3 	sdiv	r3, r1, r3
 8001f22:	429a      	cmp	r2, r3
 8001f24:	f300 8494 	bgt.w	8002850 <HAL_TIM_OC_DelayElapsedCallback+0x9f0>
				step3_foc++;
 8001f28:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 8001f2a:	601a      	str	r2, [r3, #0]
			if(foc_cut[3]>100){
 8001f2c:	4b9e      	ldr	r3, [pc, #632]	; (80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	f340 851b 	ble.w	800296c <HAL_TIM_OC_DelayElapsedCallback+0xb0c>
				step4_foc++;
 8001f36:	4aa0      	ldr	r2, [pc, #640]	; (80021b8 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	3201      	adds	r2, #1
				if(step4_foc>(10000/(foc_cut[3]))){
 8001f3c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001f40:	fb91 f3f3 	sdiv	r3, r1, r3
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f300 84f1 	bgt.w	800292c <HAL_TIM_OC_DelayElapsedCallback+0xacc>
				step4_foc++;
 8001f4a:	4b9b      	ldr	r3, [pc, #620]	; (80021b8 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8001f4c:	601a      	str	r2, [r3, #0]
			if(foc_cut[4]>100){
 8001f4e:	4b96      	ldr	r3, [pc, #600]	; (80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	f340 8552 	ble.w	80029fc <HAL_TIM_OC_DelayElapsedCallback+0xb9c>
				step5_foc++;
 8001f58:	4a98      	ldr	r2, [pc, #608]	; (80021bc <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	3201      	adds	r2, #1
				if(step5_foc>(10000/(foc_cut[4]))){
 8001f5e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001f62:	fb91 f3f3 	sdiv	r3, r1, r3
 8001f66:	429a      	cmp	r2, r3
 8001f68:	f300 8535 	bgt.w	80029d6 <HAL_TIM_OC_DelayElapsedCallback+0xb76>
				step5_foc++;
 8001f6c:	4b93      	ldr	r3, [pc, #588]	; (80021bc <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8001f6e:	601a      	str	r2, [r3, #0]
			if(foc_cut[5]>100){
 8001f70:	4b8d      	ldr	r3, [pc, #564]	; (80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	f340 857b 	ble.w	8002a70 <HAL_TIM_OC_DelayElapsedCallback+0xc10>
				step6_foc++;
 8001f7a:	4a91      	ldr	r2, [pc, #580]	; (80021c0 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	3201      	adds	r2, #1
				if(step6_foc>(5000/(foc_cut[5]))){
 8001f80:	f241 3188 	movw	r1, #5000	; 0x1388
 8001f84:	fb91 f3f3 	sdiv	r3, r1, r3
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f300 855f 	bgt.w	8002a4c <HAL_TIM_OC_DelayElapsedCallback+0xbec>
				step6_foc++;
 8001f8e:	4b8c      	ldr	r3, [pc, #560]	; (80021c0 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 8001f90:	601a      	str	r2, [r3, #0]
		if((is_start||is_single_run))
 8001f92:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f002 84f6 	beq.w	800498c <HAL_TIM_OC_DelayElapsedCallback+0x2b2c>
			step_time++;
 8001fa0:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8001fa2:	ed93 8a00 	vldr	s16, [r3]
 8001fa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001faa:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001fae:	ed83 8a00 	vstr	s16, [r3]
			instruct[0][10] = (int)step_time/100.0;
 8001fb2:	4d86      	ldr	r5, [pc, #536]	; (80021cc <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8001fb4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8001fb8:	ee17 0a90 	vmov	r0, s15
 8001fbc:	f7fe fa5a 	bl	8000474 <__aeabi_i2d>
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 8001fc4:	f7fe fbea 	bl	800079c <__aeabi_ddiv>
 8001fc8:	f7fe fd6e 	bl	8000aa8 <__aeabi_d2iz>
 8001fcc:	82a8      	strh	r0, [r5, #20]
			if(((abs(cur_pulse1-instruct[instruct_step][4])<10)&&
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 8001fd0:	f8d3 b000 	ldr.w	fp, [r3]
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	2316      	movs	r3, #22
 8001fda:	fb03 5304 	mla	r3, r3, r4, r5
 8001fde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fe2:	ebab 0303 	sub.w	r3, fp, r3
 8001fe6:	3309      	adds	r3, #9
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	d816      	bhi.n	800201a <HAL_TIM_OC_DelayElapsedCallback+0x1ba>
				 (abs(cur_pulse2-instruct[instruct_step][5])<10)&&
 8001fec:	2316      	movs	r3, #22
 8001fee:	fb03 5304 	mla	r3, r3, r4, r5
 8001ff2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ff6:	4b79      	ldr	r3, [pc, #484]	; (80021dc <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	3309      	adds	r3, #9
			if(((abs(cur_pulse1-instruct[instruct_step][4])<10)&&
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d80b      	bhi.n	800201a <HAL_TIM_OC_DelayElapsedCallback+0x1ba>
				 (abs(cur_pulse3-instruct[instruct_step][6])<10))||
 8002002:	2316      	movs	r3, #22
 8002004:	fb03 5304 	mla	r3, r3, r4, r5
 8002008:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800200c:	4b74      	ldr	r3, [pc, #464]	; (80021e0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	3309      	adds	r3, #9
				 (abs(cur_pulse2-instruct[instruct_step][5])<10)&&
 8002014:	2b12      	cmp	r3, #18
 8002016:	f240 8552 	bls.w	8002abe <HAL_TIM_OC_DelayElapsedCallback+0xc5e>
				 (key_flag==0&&is_single_run))
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
				 (abs(cur_pulse3-instruct[instruct_step][6])<10))||
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 80ac 	bne.w	800217c <HAL_TIM_OC_DelayElapsedCallback+0x31c>
				 (key_flag==0&&is_single_run))
 8002024:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a7 	beq.w	800217c <HAL_TIM_OC_DelayElapsedCallback+0x31c>
				step=0;
 800202e:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
				if((instruct[2][2]+10)>instruct[2][1])
 8002034:	4a65      	ldr	r2, [pc, #404]	; (80021cc <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8002036:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 800203a:	3309      	adds	r3, #9
 800203c:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8002040:	4293      	cmp	r3, r2
 8002042:	db1a      	blt.n	800207a <HAL_TIM_OC_DelayElapsedCallback+0x21a>
					instruct[2][2] = 0;
 8002044:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8002046:	2300      	movs	r3, #0
 8002048:	8613      	strh	r3, [r2, #48]	; 0x30
					instruct_step=10;
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800204c:	210a      	movs	r1, #10
 800204e:	6019      	str	r1, [r3, #0]
					if((instruct[3][4]*65536+instruct[3][3])>=(instruct[3][2]*65536+instruct[3][1]))
 8002050:	f9b2 104a 	ldrsh.w	r1, [r2, #74]	; 0x4a
 8002054:	f9b2 3048 	ldrsh.w	r3, [r2, #72]	; 0x48
 8002058:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800205c:	f9b2 1046 	ldrsh.w	r1, [r2, #70]	; 0x46
 8002060:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
 8002064:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8002068:	4293      	cmp	r3, r2
 800206a:	f2c0 854f 	blt.w	8002b0c <HAL_TIM_OC_DelayElapsedCallback+0xcac>
						is_start = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 8002072:	7013      	strb	r3, [r2, #0]
						instruct[3][0]=0;
 8002074:	4a55      	ldr	r2, [pc, #340]	; (80021cc <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8002076:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				max_pulse = max(abs(instruct[instruct_step][4]-cur_pulse1),abs(instruct[instruct_step][5]-cur_pulse2));
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a53      	ldr	r2, [pc, #332]	; (80021cc <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8002080:	2116      	movs	r1, #22
 8002082:	fb01 2303 	mla	r3, r1, r3, r2
 8002086:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 800208a:	eba6 060b 	sub.w	r6, r6, fp
 800208e:	2e00      	cmp	r6, #0
 8002090:	bfb8      	it	lt
 8002092:	4276      	neglt	r6, r6
 8002094:	f9b3 500a 	ldrsh.w	r5, [r3, #10]
 8002098:	4a50      	ldr	r2, [pc, #320]	; (80021dc <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	1aad      	subs	r5, r5, r2
 800209e:	2d00      	cmp	r5, #0
 80020a0:	bfb8      	it	lt
 80020a2:	426d      	neglt	r5, r5
				max_pulse = max(max_pulse,abs(instruct[instruct_step][6]-cur_pulse3));
 80020a4:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	1aa4      	subs	r4, r4, r2
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	bfb8      	it	lt
 80020b2:	4264      	neglt	r4, r4
				max_pulse = max(max_pulse,abs(instruct[instruct_step][7]-cur_pulse4));
 80020b4:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	; (80021ec <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	1a80      	subs	r0, r0, r2
 80020be:	2800      	cmp	r0, #0
 80020c0:	bfb8      	it	lt
 80020c2:	4240      	neglt	r0, r0
				max_pulse = max(max_pulse,abs(instruct[instruct_step][8]-cur_pulse5));
 80020c4:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	1a89      	subs	r1, r1, r2
 80020ce:	2900      	cmp	r1, #0
 80020d0:	bfb8      	it	lt
 80020d2:	4249      	neglt	r1, r1
				max_pulse = max(max_pulse,abs(instruct[instruct_step][9]-cur_pulse6));
 80020d4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	1ad2      	subs	r2, r2, r3
 80020de:	2a00      	cmp	r2, #0
 80020e0:	bfb8      	it	lt
 80020e2:	4252      	neglt	r2, r2
	if(a>b)return a;
 80020e4:	4633      	mov	r3, r6
 80020e6:	42ae      	cmp	r6, r5
 80020e8:	bfb8      	it	lt
 80020ea:	462b      	movlt	r3, r5
 80020ec:	42a3      	cmp	r3, r4
 80020ee:	bfb8      	it	lt
 80020f0:	4623      	movlt	r3, r4
 80020f2:	4283      	cmp	r3, r0
 80020f4:	bfb8      	it	lt
 80020f6:	4603      	movlt	r3, r0
 80020f8:	428b      	cmp	r3, r1
 80020fa:	bfb8      	it	lt
 80020fc:	460b      	movlt	r3, r1
 80020fe:	4293      	cmp	r3, r2
 8002100:	bfb8      	it	lt
 8002102:	4613      	movlt	r3, r2
				max_pulse = max(max_pulse,abs(instruct[instruct_step][9]-cur_pulse6));
 8002104:	4f3c      	ldr	r7, [pc, #240]	; (80021f8 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8002106:	603b      	str	r3, [r7, #0]
				step1_scale=abs(instruct[instruct_step][4]-cur_pulse1)/(float)max_pulse;
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002110:	ee07 6a10 	vmov	s14, r6
 8002114:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002118:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800211c:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800211e:	edc3 6a00 	vstr	s13, [r3]
				step2_scale=abs(instruct[instruct_step][5]-cur_pulse2)/(float)max_pulse;
 8002122:	ee07 5a10 	vmov	s14, r5
 8002126:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800212a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800212e:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8002130:	edc3 6a00 	vstr	s13, [r3]
				step3_scale=abs(instruct[instruct_step][6]-cur_pulse3)/(float)max_pulse;
 8002134:	ee07 4a10 	vmov	s14, r4
 8002138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800213c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8002142:	edc3 6a00 	vstr	s13, [r3]
				step4_scale=abs(instruct[instruct_step][7]-cur_pulse4)/(float)max_pulse;
 8002146:	ee07 0a10 	vmov	s14, r0
 800214a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800214e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8002154:	edc3 6a00 	vstr	s13, [r3]
				step5_scale=abs(instruct[instruct_step][8]-cur_pulse5)/(float)max_pulse;
 8002158:	ee07 1a10 	vmov	s14, r1
 800215c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002160:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8002166:	edc3 6a00 	vstr	s13, [r3]
				step6_scale=abs(instruct[instruct_step][9]-cur_pulse6)/(float)max_pulse;
 800216a:	ee07 2a10 	vmov	s14, r2
 800216e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002172:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8002178:	edc3 6a00 	vstr	s13, [r3]
			instruct_speed = (int)instruct[instruct_step][2]*instruct[3][5]/100.0;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800217e:	f8d3 a000 	ldr.w	sl, [r3]
 8002182:	4d12      	ldr	r5, [pc, #72]	; (80021cc <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8002184:	2416      	movs	r4, #22
 8002186:	fb04 f40a 	mul.w	r4, r4, sl
 800218a:	192b      	adds	r3, r5, r4
 800218c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002190:	f9b5 004c 	ldrsh.w	r0, [r5, #76]	; 0x4c
 8002194:	e03e      	b.n	8002214 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	40020400 	.word	0x40020400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	20002be1 	.word	0x20002be1
 80021a8:	20003288 	.word	0x20003288
 80021ac:	20002ea4 	.word	0x20002ea4
 80021b0:	20002eb0 	.word	0x20002eb0
 80021b4:	20002ebc 	.word	0x20002ebc
 80021b8:	20002ec8 	.word	0x20002ec8
 80021bc:	20002ed8 	.word	0x20002ed8
 80021c0:	20002ee4 	.word	0x20002ee4
 80021c4:	20002be0 	.word	0x20002be0
 80021c8:	20002bf0 	.word	0x20002bf0
 80021cc:	20000000 	.word	0x20000000
 80021d0:	40590000 	.word	0x40590000
 80021d4:	20002bc8 	.word	0x20002bc8
 80021d8:	20002af8 	.word	0x20002af8
 80021dc:	20002bcc 	.word	0x20002bcc
 80021e0:	20002bd0 	.word	0x20002bd0
 80021e4:	20002e7c 	.word	0x20002e7c
 80021e8:	20002be4 	.word	0x20002be4
 80021ec:	20002bd4 	.word	0x20002bd4
 80021f0:	20002bd8 	.word	0x20002bd8
 80021f4:	20002bdc 	.word	0x20002bdc
 80021f8:	20002e80 	.word	0x20002e80
 80021fc:	20002ea8 	.word	0x20002ea8
 8002200:	20002eb4 	.word	0x20002eb4
 8002204:	20002ec0 	.word	0x20002ec0
 8002208:	20002ed0 	.word	0x20002ed0
 800220c:	20002edc 	.word	0x20002edc
 8002210:	20002ee8 	.word	0x20002ee8
 8002214:	fb00 f003 	mul.w	r0, r0, r3
 8002218:	f7fe f92c 	bl	8000474 <__aeabi_i2d>
 800221c:	2200      	movs	r2, #0
 800221e:	4bcc      	ldr	r3, [pc, #816]	; (8002550 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8002220:	f7fe fabc 	bl	800079c <__aeabi_ddiv>
 8002224:	f7fe fc40 	bl	8000aa8 <__aeabi_d2iz>
 8002228:	4606      	mov	r6, r0
 800222a:	4bca      	ldr	r3, [pc, #808]	; (8002554 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>)
 800222c:	6018      	str	r0, [r3, #0]
			if(instruct[instruct_step][0]==0)
 800222e:	5f2b      	ldrsh	r3, [r5, r4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 85a1 	bne.w	8002d78 <HAL_TIM_OC_DelayElapsedCallback+0xf18>
				if((key_flag==0&&is_single_run)||(key_flag==0&&is_start))
 8002236:	4bc8      	ldr	r3, [pc, #800]	; (8002558 <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 808f 	bne.w	800235e <HAL_TIM_OC_DelayElapsedCallback+0x4fe>
 8002240:	4bc6      	ldr	r3, [pc, #792]	; (800255c <HAL_TIM_OC_DelayElapsedCallback+0x6fc>)
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	4bc6      	ldr	r3, [pc, #792]	; (8002560 <HAL_TIM_OC_DelayElapsedCallback+0x700>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	f000 8088 	beq.w	800235e <HAL_TIM_OC_DelayElapsedCallback+0x4fe>
					step_speed = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	4ac4      	ldr	r2, [pc, #784]	; (8002564 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8002252:	6013      	str	r3, [r2, #0]
					step=0;
 8002254:	4ac4      	ldr	r2, [pc, #784]	; (8002568 <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 8002256:	6013      	str	r3, [r2, #0]
					max_pulse = max(abs(instruct[instruct_step][4]-cur_pulse1),abs(instruct[instruct_step][5]-cur_pulse2));
 8002258:	2216      	movs	r2, #22
 800225a:	fb02 530a 	mla	r3, r2, sl, r5
 800225e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8002262:	eba7 070b 	sub.w	r7, r7, fp
 8002266:	2f00      	cmp	r7, #0
 8002268:	bfb8      	it	lt
 800226a:	427f      	neglt	r7, r7
 800226c:	f9b3 500a 	ldrsh.w	r5, [r3, #10]
 8002270:	4abe      	ldr	r2, [pc, #760]	; (800256c <HAL_TIM_OC_DelayElapsedCallback+0x70c>)
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	1aad      	subs	r5, r5, r2
 8002276:	2d00      	cmp	r5, #0
 8002278:	bfb8      	it	lt
 800227a:	426d      	neglt	r5, r5
					max_pulse = max(max_pulse,abs(instruct[instruct_step][6]-cur_pulse3));
 800227c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8002280:	4abb      	ldr	r2, [pc, #748]	; (8002570 <HAL_TIM_OC_DelayElapsedCallback+0x710>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	1aa4      	subs	r4, r4, r2
 8002286:	2c00      	cmp	r4, #0
 8002288:	bfb8      	it	lt
 800228a:	4264      	neglt	r4, r4
					max_pulse = max(max_pulse,abs(instruct[instruct_step][7]-cur_pulse4));
 800228c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8002290:	4ab8      	ldr	r2, [pc, #736]	; (8002574 <HAL_TIM_OC_DelayElapsedCallback+0x714>)
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	1a80      	subs	r0, r0, r2
 8002296:	2800      	cmp	r0, #0
 8002298:	bfb8      	it	lt
 800229a:	4240      	neglt	r0, r0
					max_pulse = max(max_pulse,abs(instruct[instruct_step][8]-cur_pulse5));
 800229c:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80022a0:	4ab5      	ldr	r2, [pc, #724]	; (8002578 <HAL_TIM_OC_DelayElapsedCallback+0x718>)
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	1a89      	subs	r1, r1, r2
 80022a6:	2900      	cmp	r1, #0
 80022a8:	bfb8      	it	lt
 80022aa:	4249      	neglt	r1, r1
					max_pulse = max(max_pulse,abs(instruct[instruct_step][9]-cur_pulse6));
 80022ac:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80022b0:	4bb2      	ldr	r3, [pc, #712]	; (800257c <HAL_TIM_OC_DelayElapsedCallback+0x71c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1ad2      	subs	r2, r2, r3
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	bfb8      	it	lt
 80022ba:	4252      	neglt	r2, r2
	if(a>b)return a;
 80022bc:	463b      	mov	r3, r7
 80022be:	42af      	cmp	r7, r5
 80022c0:	bfb8      	it	lt
 80022c2:	462b      	movlt	r3, r5
 80022c4:	42a3      	cmp	r3, r4
 80022c6:	bfb8      	it	lt
 80022c8:	4623      	movlt	r3, r4
 80022ca:	4283      	cmp	r3, r0
 80022cc:	bfb8      	it	lt
 80022ce:	4603      	movlt	r3, r0
 80022d0:	428b      	cmp	r3, r1
 80022d2:	bfb8      	it	lt
 80022d4:	460b      	movlt	r3, r1
 80022d6:	4293      	cmp	r3, r2
 80022d8:	bfb8      	it	lt
 80022da:	4613      	movlt	r3, r2
					max_pulse = max(max_pulse,abs(instruct[instruct_step][9]-cur_pulse6));
 80022dc:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 80025a0 <HAL_TIM_OC_DelayElapsedCallback+0x740>
 80022e0:	f8cc 3000 	str.w	r3, [ip]
					step1_scale=abs(instruct[instruct_step][4]-cur_pulse1)/(float)max_pulse;
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ec:	ee07 7a10 	vmov	s14, r7
 80022f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022f8:	4ba1      	ldr	r3, [pc, #644]	; (8002580 <HAL_TIM_OC_DelayElapsedCallback+0x720>)
 80022fa:	edc3 6a00 	vstr	s13, [r3]
					step2_scale=abs(instruct[instruct_step][5]-cur_pulse2)/(float)max_pulse;
 80022fe:	ee07 5a10 	vmov	s14, r5
 8002302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002306:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800230a:	4b9e      	ldr	r3, [pc, #632]	; (8002584 <HAL_TIM_OC_DelayElapsedCallback+0x724>)
 800230c:	edc3 6a00 	vstr	s13, [r3]
					step3_scale=abs(instruct[instruct_step][6]-cur_pulse3)/(float)max_pulse;
 8002310:	ee07 4a10 	vmov	s14, r4
 8002314:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002318:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800231c:	4b9a      	ldr	r3, [pc, #616]	; (8002588 <HAL_TIM_OC_DelayElapsedCallback+0x728>)
 800231e:	edc3 6a00 	vstr	s13, [r3]
					step4_scale=abs(instruct[instruct_step][7]-cur_pulse4)/(float)max_pulse;
 8002322:	ee07 0a10 	vmov	s14, r0
 8002326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800232a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800232e:	4b97      	ldr	r3, [pc, #604]	; (800258c <HAL_TIM_OC_DelayElapsedCallback+0x72c>)
 8002330:	edc3 6a00 	vstr	s13, [r3]
					step5_scale=abs(instruct[instruct_step][8]-cur_pulse5)/(float)max_pulse;
 8002334:	ee07 1a10 	vmov	s14, r1
 8002338:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800233c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002340:	4b93      	ldr	r3, [pc, #588]	; (8002590 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 8002342:	edc3 6a00 	vstr	s13, [r3]
					step6_scale=abs(instruct[instruct_step][9]-cur_pulse6)/(float)max_pulse;
 8002346:	ee07 2a10 	vmov	s14, r2
 800234a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800234e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002352:	4b90      	ldr	r3, [pc, #576]	; (8002594 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8002354:	edc3 6a00 	vstr	s13, [r3]
					key_flag=1;
 8002358:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_OC_DelayElapsedCallback+0x6f8>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
				instruct[0][2] = (int)step_speed;
 800235e:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 8002360:	ed93 8a00 	vldr	s16, [r3]
 8002364:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002368:	ee17 8a90 	vmov	r8, s15
 800236c:	4f8a      	ldr	r7, [pc, #552]	; (8002598 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800236e:	f8a7 8004 	strh.w	r8, [r7, #4]
				instruct[0][3] = (int)((step_acc)*((instruct_speed)*1.1-step_speed)/instruct_speed);
 8002372:	4630      	mov	r0, r6
 8002374:	f7fe f87e 	bl	8000474 <__aeabi_i2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	a370      	add	r3, pc, #448	; (adr r3, 8002540 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fe f8e1 	bl	8000548 <__aeabi_dmul>
 8002386:	e9cd 0100 	strd	r0, r1, [sp]
 800238a:	ee18 0a10 	vmov	r0, s16
 800238e:	f7fe f883 	bl	8000498 <__aeabi_f2d>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800239a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800239e:	f7fd ff1b 	bl	80001d8 <__aeabi_dsub>
 80023a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023a6:	4b7d      	ldr	r3, [pc, #500]	; (800259c <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	f7fe f875 	bl	8000498 <__aeabi_f2d>
 80023ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80023b2:	f7fe f8c9 	bl	8000548 <__aeabi_dmul>
 80023b6:	4622      	mov	r2, r4
 80023b8:	462b      	mov	r3, r5
 80023ba:	f7fe f9ef 	bl	800079c <__aeabi_ddiv>
 80023be:	f7fe fb73 	bl	8000aa8 <__aeabi_d2iz>
 80023c2:	80f8      	strh	r0, [r7, #6]
				if((int)step_speed<(instruct_speed)&&((float)step<((float)max_pulse/2.0)))
 80023c4:	4546      	cmp	r6, r8
 80023c6:	dd49      	ble.n	800245c <HAL_TIM_OC_DelayElapsedCallback+0x5fc>
 80023c8:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 80023ca:	681f      	ldr	r7, [r3, #0]
 80023cc:	4638      	mov	r0, r7
 80023ce:	f7fe f863 	bl	8000498 <__aeabi_f2d>
 80023d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80023d6:	4b72      	ldr	r3, [pc, #456]	; (80025a0 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	ee07 0a90 	vmov	s15, r0
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e2:	ee17 0a90 	vmov	r0, s15
 80023e6:	f7fe f857 	bl	8000498 <__aeabi_f2d>
 80023ea:	2200      	movs	r2, #0
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 80023ee:	f7fe f8ab 	bl	8000548 <__aeabi_dmul>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023fa:	f7fe fb17 	bl	8000a2c <__aeabi_dcmplt>
 80023fe:	2800      	cmp	r0, #0
 8002400:	f000 838f 	beq.w	8002b22 <HAL_TIM_OC_DelayElapsedCallback+0xcc2>
					step_acc = instruct[instruct_step][3];
 8002404:	4a64      	ldr	r2, [pc, #400]	; (8002598 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8002406:	2316      	movs	r3, #22
 8002408:	fb03 230a 	mla	r3, r3, sl, r2
 800240c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800241a:	edc3 7a00 	vstr	s15, [r3]
					step_speed=step_speed+(step_acc/1000.0)*((instruct_speed)*1.1-step_speed)/instruct_speed;
 800241e:	ee17 0a90 	vmov	r0, s15
 8002422:	f7fe f839 	bl	8000498 <__aeabi_f2d>
 8002426:	2200      	movs	r2, #0
 8002428:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 800242a:	f7fe f9b7 	bl	800079c <__aeabi_ddiv>
 800242e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002432:	f7fe f889 	bl	8000548 <__aeabi_dmul>
 8002436:	4622      	mov	r2, r4
 8002438:	462b      	mov	r3, r5
 800243a:	f7fe f9af 	bl	800079c <__aeabi_ddiv>
 800243e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002442:	f7fd fecb 	bl	80001dc <__adddf3>
 8002446:	f7fe fb57 	bl	8000af8 <__aeabi_d2f>
 800244a:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800244c:	6018      	str	r0, [r3, #0]
					acc_pulse = (int)step;
 800244e:	ee07 7a90 	vmov	s15, r7
 8002452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002456:	4b55      	ldr	r3, [pc, #340]	; (80025ac <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 8002458:	edc3 7a00 	vstr	s15, [r3]
				if((int)step_speed>(instruct_speed)||(((int)step)>(max_pulse-acc_pulse)&&(int)step_speed>2))
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 800245e:	ed93 8a00 	vldr	s16, [r3]
 8002462:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002466:	ee17 8a90 	vmov	r8, s15
 800246a:	4546      	cmp	r6, r8
 800246c:	f280 8359 	bge.w	8002b22 <HAL_TIM_OC_DelayElapsedCallback+0xcc2>
					step_acc = instruct[instruct_step][3];
 8002470:	4a49      	ldr	r2, [pc, #292]	; (8002598 <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8002472:	2316      	movs	r3, #22
 8002474:	fb03 230a 	mla	r3, r3, sl, r2
 8002478:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800247c:	ee08 3a90 	vmov	s17, r3
 8002480:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8002484:	4b45      	ldr	r3, [pc, #276]	; (800259c <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8002486:	edc3 8a00 	vstr	s17, [r3]
					step_speed=step_speed-(step_acc/1000.0)*((instruct_speed)*1.1-step_speed)/instruct_speed;
 800248a:	ee18 0a10 	vmov	r0, s16
 800248e:	f7fe f803 	bl	8000498 <__aeabi_f2d>
 8002492:	4606      	mov	r6, r0
 8002494:	460f      	mov	r7, r1
 8002496:	ee18 0a90 	vmov	r0, s17
 800249a:	f7fd fffd 	bl	8000498 <__aeabi_f2d>
 800249e:	2200      	movs	r2, #0
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 80024a2:	f7fe f97b 	bl	800079c <__aeabi_ddiv>
 80024a6:	4680      	mov	r8, r0
 80024a8:	4689      	mov	r9, r1
 80024aa:	4632      	mov	r2, r6
 80024ac:	463b      	mov	r3, r7
 80024ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80024b2:	f7fd fe91 	bl	80001d8 <__aeabi_dsub>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4640      	mov	r0, r8
 80024bc:	4649      	mov	r1, r9
 80024be:	f7fe f843 	bl	8000548 <__aeabi_dmul>
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	f7fe f969 	bl	800079c <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4630      	mov	r0, r6
 80024d0:	4639      	mov	r1, r7
 80024d2:	f7fd fe81 	bl	80001d8 <__aeabi_dsub>
 80024d6:	f7fe fb0f 	bl	8000af8 <__aeabi_d2f>
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80024dc:	6018      	str	r0, [r3, #0]
				step=step+step_speed/255.0;
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_TIM_OC_DelayElapsedCallback+0x704>)
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f7fd ffd9 	bl	8000498 <__aeabi_f2d>
 80024e6:	a318      	add	r3, pc, #96	; (adr r3, 8002548 <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe f956 	bl	800079c <__aeabi_ddiv>
 80024f0:	4604      	mov	r4, r0
 80024f2:	460d      	mov	r5, r1
 80024f4:	4e1c      	ldr	r6, [pc, #112]	; (8002568 <HAL_TIM_OC_DelayElapsedCallback+0x708>)
 80024f6:	6830      	ldr	r0, [r6, #0]
 80024f8:	f7fd ffce 	bl	8000498 <__aeabi_f2d>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4620      	mov	r0, r4
 8002502:	4629      	mov	r1, r5
 8002504:	f7fd fe6a 	bl	80001dc <__adddf3>
 8002508:	f7fe faf6 	bl	8000af8 <__aeabi_d2f>
 800250c:	ee07 0a90 	vmov	s15, r0
 8002510:	6030      	str	r0, [r6, #0]
				if((step1_err!=(int)(step*step1_scale))&&(abs(foc_cut[0])<800)){
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_TIM_OC_DelayElapsedCallback+0x720>)
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002520:	ee17 3a90 	vmov	r3, s15
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4293      	cmp	r3, r2
 800252a:	d054      	beq.n	80025d6 <HAL_TIM_OC_DelayElapsedCallback+0x776>
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8002534:	f240 613e 	movw	r1, #1598	; 0x63e
 8002538:	428a      	cmp	r2, r1
 800253a:	d84c      	bhi.n	80025d6 <HAL_TIM_OC_DelayElapsedCallback+0x776>
 800253c:	e03c      	b.n	80025b8 <HAL_TIM_OC_DelayElapsedCallback+0x758>
 800253e:	bf00      	nop
 8002540:	9999999a 	.word	0x9999999a
 8002544:	3ff19999 	.word	0x3ff19999
 8002548:	00000000 	.word	0x00000000
 800254c:	406fe000 	.word	0x406fe000
 8002550:	40590000 	.word	0x40590000
 8002554:	20002e78 	.word	0x20002e78
 8002558:	20002e7c 	.word	0x20002e7c
 800255c:	20002be0 	.word	0x20002be0
 8002560:	20002be1 	.word	0x20002be1
 8002564:	20002bec 	.word	0x20002bec
 8002568:	20002be4 	.word	0x20002be4
 800256c:	20002bcc 	.word	0x20002bcc
 8002570:	20002bd0 	.word	0x20002bd0
 8002574:	20002bd4 	.word	0x20002bd4
 8002578:	20002bd8 	.word	0x20002bd8
 800257c:	20002bdc 	.word	0x20002bdc
 8002580:	20002ea8 	.word	0x20002ea8
 8002584:	20002eb4 	.word	0x20002eb4
 8002588:	20002ec0 	.word	0x20002ec0
 800258c:	20002ed0 	.word	0x20002ed0
 8002590:	20002edc 	.word	0x20002edc
 8002594:	20002ee8 	.word	0x20002ee8
 8002598:	20000000 	.word	0x20000000
 800259c:	20002be8 	.word	0x20002be8
 80025a0:	20002e80 	.word	0x20002e80
 80025a4:	3fe00000 	.word	0x3fe00000
 80025a8:	408f4000 	.word	0x408f4000
 80025ac:	20002e50 	.word	0x20002e50
 80025b0:	20002ea0 	.word	0x20002ea0
 80025b4:	20003288 	.word	0x20003288
					step1_err=(int)(step*step1_scale);
 80025b8:	4ab9      	ldr	r2, [pc, #740]	; (80028a0 <HAL_TIM_OC_DelayElapsedCallback+0xa40>)
 80025ba:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse1<instruct[instruct_step][4]){
 80025be:	4bb9      	ldr	r3, [pc, #740]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0xa44>)
 80025c0:	2216      	movs	r2, #22
 80025c2:	fb02 3a0a 	mla	sl, r2, sl, r3
 80025c6:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 80025ca:	459b      	cmp	fp, r3
 80025cc:	f2c0 82bd 	blt.w	8002b4a <HAL_TIM_OC_DelayElapsedCallback+0xcea>
					else if (cur_pulse1>instruct[instruct_step][4]){
 80025d0:	459b      	cmp	fp, r3
 80025d2:	f300 82cb 	bgt.w	8002b6c <HAL_TIM_OC_DelayElapsedCallback+0xd0c>
				if((step2_err!=(int)(step*step2_scale))&&(abs(foc_cut[1])<800)){
 80025d6:	4bb4      	ldr	r3, [pc, #720]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0xa48>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	4bb3      	ldr	r3, [pc, #716]	; (80028ac <HAL_TIM_OC_DelayElapsedCallback+0xa4c>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	4ab0      	ldr	r2, [pc, #704]	; (80028b0 <HAL_TIM_OC_DelayElapsedCallback+0xa50>)
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01a      	beq.n	800262c <HAL_TIM_OC_DelayElapsedCallback+0x7cc>
 80025f6:	4aaf      	ldr	r2, [pc, #700]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 80025f8:	6852      	ldr	r2, [r2, #4]
 80025fa:	f202 321f 	addw	r2, r2, #799	; 0x31f
 80025fe:	f240 613e 	movw	r1, #1598	; 0x63e
 8002602:	428a      	cmp	r2, r1
 8002604:	d812      	bhi.n	800262c <HAL_TIM_OC_DelayElapsedCallback+0x7cc>
					step2_err=(int)(step*step2_scale);
 8002606:	4aaa      	ldr	r2, [pc, #680]	; (80028b0 <HAL_TIM_OC_DelayElapsedCallback+0xa50>)
 8002608:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse2<instruct[instruct_step][5]){
 800260c:	4baa      	ldr	r3, [pc, #680]	; (80028b8 <HAL_TIM_OC_DelayElapsedCallback+0xa58>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4aa4      	ldr	r2, [pc, #656]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0xa44>)
 8002612:	2116      	movs	r1, #22
 8002614:	fb01 2303 	mla	r3, r1, r3, r2
 8002618:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800261c:	4ba7      	ldr	r3, [pc, #668]	; (80028bc <HAL_TIM_OC_DelayElapsedCallback+0xa5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	f300 82b4 	bgt.w	8002b8e <HAL_TIM_OC_DelayElapsedCallback+0xd2e>
					else if (cur_pulse2>instruct[instruct_step][5]){
 8002626:	429a      	cmp	r2, r3
 8002628:	f2c0 82c3 	blt.w	8002bb2 <HAL_TIM_OC_DelayElapsedCallback+0xd52>
				if((step3_err!=(int)(step*step3_scale))&&(abs(foc_cut[2])<800)){
 800262c:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0xa48>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_TIM_OC_DelayElapsedCallback+0xa60>)
 8002634:	ed93 7a00 	vldr	s14, [r3]
 8002638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002640:	ee17 3a90 	vmov	r3, s15
 8002644:	4a9f      	ldr	r2, [pc, #636]	; (80028c4 <HAL_TIM_OC_DelayElapsedCallback+0xa64>)
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4293      	cmp	r3, r2
 800264a:	d01a      	beq.n	8002682 <HAL_TIM_OC_DelayElapsedCallback+0x822>
 800264c:	4a99      	ldr	r2, [pc, #612]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 800264e:	6892      	ldr	r2, [r2, #8]
 8002650:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8002654:	f240 613e 	movw	r1, #1598	; 0x63e
 8002658:	428a      	cmp	r2, r1
 800265a:	d812      	bhi.n	8002682 <HAL_TIM_OC_DelayElapsedCallback+0x822>
					step3_err=(int)(step*step3_scale);
 800265c:	4a99      	ldr	r2, [pc, #612]	; (80028c4 <HAL_TIM_OC_DelayElapsedCallback+0xa64>)
 800265e:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse3<instruct[instruct_step][6]){
 8002662:	4b95      	ldr	r3, [pc, #596]	; (80028b8 <HAL_TIM_OC_DelayElapsedCallback+0xa58>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a8f      	ldr	r2, [pc, #572]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0xa44>)
 8002668:	2116      	movs	r1, #22
 800266a:	fb01 2303 	mla	r3, r1, r3, r2
 800266e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002672:	4b95      	ldr	r3, [pc, #596]	; (80028c8 <HAL_TIM_OC_DelayElapsedCallback+0xa68>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	f300 82ad 	bgt.w	8002bd6 <HAL_TIM_OC_DelayElapsedCallback+0xd76>
					else if (cur_pulse3>instruct[instruct_step][6]){
 800267c:	429a      	cmp	r2, r3
 800267e:	f2c0 82ed 	blt.w	8002c5c <HAL_TIM_OC_DelayElapsedCallback+0xdfc>
				if((step4_err!=(int)(step*step4_scale))&&(abs(foc_cut[3])<800)){
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0xa48>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	4b90      	ldr	r3, [pc, #576]	; (80028cc <HAL_TIM_OC_DelayElapsedCallback+0xa6c>)
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002692:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002696:	ee17 3a10 	vmov	r3, s14
 800269a:	4a8d      	ldr	r2, [pc, #564]	; (80028d0 <HAL_TIM_OC_DelayElapsedCallback+0xa70>)
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	4293      	cmp	r3, r2
 80026a0:	f000 8330 	beq.w	8002d04 <HAL_TIM_OC_DelayElapsedCallback+0xea4>
 80026a4:	4a83      	ldr	r2, [pc, #524]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 80026a6:	68d2      	ldr	r2, [r2, #12]
 80026a8:	f202 321f 	addw	r2, r2, #799	; 0x31f
 80026ac:	f240 613e 	movw	r1, #1598	; 0x63e
 80026b0:	428a      	cmp	r2, r1
 80026b2:	f200 8327 	bhi.w	8002d04 <HAL_TIM_OC_DelayElapsedCallback+0xea4>
					step4_err=(int)(step*step4_scale);
 80026b6:	4a86      	ldr	r2, [pc, #536]	; (80028d0 <HAL_TIM_OC_DelayElapsedCallback+0xa70>)
 80026b8:	ed82 7a00 	vstr	s14, [r2]
					if(cur_pulse4<instruct[instruct_step][7]){
 80026bc:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <HAL_TIM_OC_DelayElapsedCallback+0xa58>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a78      	ldr	r2, [pc, #480]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0xa44>)
 80026c2:	2116      	movs	r1, #22
 80026c4:	fb01 2303 	mla	r3, r1, r3, r2
 80026c8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_TIM_OC_DelayElapsedCallback+0xa74>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f300 82d5 	bgt.w	8002c80 <HAL_TIM_OC_DelayElapsedCallback+0xe20>
					else if (cur_pulse4>instruct[instruct_step][7]){
 80026d6:	429a      	cmp	r2, r3
 80026d8:	f2c0 82f3 	blt.w	8002cc2 <HAL_TIM_OC_DelayElapsedCallback+0xe62>
				if((step5_err!=(int)(step*step5_scale))&&(step4_is_run==0)&&(abs(foc_cut[4])<800)){
 80026dc:	4b72      	ldr	r3, [pc, #456]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0xa48>)
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	4b7d      	ldr	r3, [pc, #500]	; (80028d8 <HAL_TIM_OC_DelayElapsedCallback+0xa78>)
 80026e4:	ed93 7a00 	vldr	s14, [r3]
 80026e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f0:	ee17 3a90 	vmov	r3, s15
 80026f4:	4a79      	ldr	r2, [pc, #484]	; (80028dc <HAL_TIM_OC_DelayElapsedCallback+0xa7c>)
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	f000 8314 	beq.w	8002d26 <HAL_TIM_OC_DelayElapsedCallback+0xec6>
 80026fe:	4a78      	ldr	r2, [pc, #480]	; (80028e0 <HAL_TIM_OC_DelayElapsedCallback+0xa80>)
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	2a00      	cmp	r2, #0
 8002704:	f040 830f 	bne.w	8002d26 <HAL_TIM_OC_DelayElapsedCallback+0xec6>
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 800270a:	6912      	ldr	r2, [r2, #16]
 800270c:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8002710:	f240 613e 	movw	r1, #1598	; 0x63e
 8002714:	428a      	cmp	r2, r1
 8002716:	f200 8306 	bhi.w	8002d26 <HAL_TIM_OC_DelayElapsedCallback+0xec6>
					step5_err=(int)(step*step5_scale);
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_TIM_OC_DelayElapsedCallback+0xa7c>)
 800271c:	6013      	str	r3, [r2, #0]
					if(cur_pulse5<instruct[instruct_step][8]){
 800271e:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_TIM_OC_DelayElapsedCallback+0xa58>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a60      	ldr	r2, [pc, #384]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0xa44>)
 8002724:	2116      	movs	r1, #22
 8002726:	fb01 2303 	mla	r3, r1, r3, r2
 800272a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800272e:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <HAL_TIM_OC_DelayElapsedCallback+0xa84>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	f300 832e 	bgt.w	8002d94 <HAL_TIM_OC_DelayElapsedCallback+0xf34>
					else if (cur_pulse5>instruct[instruct_step][8]){
 8002738:	429a      	cmp	r2, r3
 800273a:	f280 82f4 	bge.w	8002d26 <HAL_TIM_OC_DelayElapsedCallback+0xec6>
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_SET);
 800273e:	2201      	movs	r2, #1
 8002740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002744:	4868      	ldr	r0, [pc, #416]	; (80028e8 <HAL_TIM_OC_DelayElapsedCallback+0xa88>)
 8002746:	f003 fcc3 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002750:	4866      	ldr	r0, [pc, #408]	; (80028ec <HAL_TIM_OC_DelayElapsedCallback+0xa8c>)
 8002752:	f003 fcbd 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse5--;
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_TIM_OC_DelayElapsedCallback+0xa84>)
 8002758:	6813      	ldr	r3, [r2, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e2e2      	b.n	8002d26 <HAL_TIM_OC_DelayElapsedCallback+0xec6>
					step1_foc=0;
 8002760:	2400      	movs	r4, #0
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_TIM_OC_DelayElapsedCallback+0xa90>)
 8002764:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP1_DIR_GPIO_Port,STEP1_DIR_Pin,GPIO_PIN_RESET);
 8002766:	4d60      	ldr	r5, [pc, #384]	; (80028e8 <HAL_TIM_OC_DelayElapsedCallback+0xa88>)
 8002768:	4622      	mov	r2, r4
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	4628      	mov	r0, r5
 800276e:	f003 fcaf 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_RESET);
 8002772:	4622      	mov	r2, r4
 8002774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002778:	4628      	mov	r0, r5
 800277a:	f003 fca9 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse1++;
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <HAL_TIM_OC_DelayElapsedCallback+0xa94>)
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	6013      	str	r3, [r2, #0]
			if(foc_cut[0]<-100){
 8002786:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	f111 0f64 	cmn.w	r1, #100	; 0x64
 800278e:	f6bf abab 	bge.w	8001ee8 <HAL_TIM_OC_DelayElapsedCallback+0x88>
				step1_foc--;
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_TIM_OC_DelayElapsedCallback+0xa90>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3b01      	subs	r3, #1
				if(step1_foc<(10000/(foc_cut[0]))){
 8002798:	f242 7210 	movw	r2, #10000	; 0x2710
 800279c:	fb92 f2f1 	sdiv	r2, r2, r1
 80027a0:	4293      	cmp	r3, r2
 80027a2:	db03      	blt.n	80027ac <HAL_TIM_OC_DelayElapsedCallback+0x94c>
				step1_foc--;
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_TIM_OC_DelayElapsedCallback+0xa90>)
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	f7ff bb9e 	b.w	8001ee8 <HAL_TIM_OC_DelayElapsedCallback+0x88>
					step1_foc=0;
 80027ac:	2500      	movs	r5, #0
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_TIM_OC_DelayElapsedCallback+0xa90>)
 80027b0:	601d      	str	r5, [r3, #0]
					HAL_GPIO_WritePin(STEP1_DIR_GPIO_Port,STEP1_DIR_Pin,GPIO_PIN_SET);
 80027b2:	4c4d      	ldr	r4, [pc, #308]	; (80028e8 <HAL_TIM_OC_DelayElapsedCallback+0xa88>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	4620      	mov	r0, r4
 80027ba:	f003 fc89 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_RESET);
 80027be:	462a      	mov	r2, r5
 80027c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c4:	4620      	mov	r0, r4
 80027c6:	f003 fc83 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse1--;
 80027ca:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_TIM_OC_DelayElapsedCallback+0xa94>)
 80027cc:	6813      	ldr	r3, [r2, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	f7ff bb89 	b.w	8001ee8 <HAL_TIM_OC_DelayElapsedCallback+0x88>
					step2_foc=0;
 80027d6:	2400      	movs	r4, #0
 80027d8:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_TIM_OC_DelayElapsedCallback+0xa98>)
 80027da:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP2_DIR_GPIO_Port,STEP2_DIR_Pin,GPIO_PIN_RESET);
 80027dc:	4d42      	ldr	r5, [pc, #264]	; (80028e8 <HAL_TIM_OC_DelayElapsedCallback+0xa88>)
 80027de:	4622      	mov	r2, r4
 80027e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e4:	4628      	mov	r0, r5
 80027e6:	f003 fc73 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_RESET);
 80027ea:	4622      	mov	r2, r4
 80027ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f0:	4628      	mov	r0, r5
 80027f2:	f003 fc6d 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse2++;
 80027f6:	4a31      	ldr	r2, [pc, #196]	; (80028bc <HAL_TIM_OC_DelayElapsedCallback+0xa5c>)
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	6013      	str	r3, [r2, #0]
			if(foc_cut[1]<-100){
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	f111 0f64 	cmn.w	r1, #100	; 0x64
 8002806:	f6bf ab80 	bge.w	8001f0a <HAL_TIM_OC_DelayElapsedCallback+0xaa>
				step2_foc--;
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_TIM_OC_DelayElapsedCallback+0xa98>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3b01      	subs	r3, #1
				if(step2_foc<(20000/(foc_cut[1]))){
 8002810:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002814:	fb92 f2f1 	sdiv	r2, r2, r1
 8002818:	4293      	cmp	r3, r2
 800281a:	db03      	blt.n	8002824 <HAL_TIM_OC_DelayElapsedCallback+0x9c4>
				step2_foc--;
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <HAL_TIM_OC_DelayElapsedCallback+0xa98>)
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	f7ff bb73 	b.w	8001f0a <HAL_TIM_OC_DelayElapsedCallback+0xaa>
					step2_foc=0;
 8002824:	2500      	movs	r5, #0
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_TIM_OC_DelayElapsedCallback+0xa98>)
 8002828:	601d      	str	r5, [r3, #0]
					HAL_GPIO_WritePin(STEP2_DIR_GPIO_Port,STEP2_DIR_Pin,GPIO_PIN_SET);
 800282a:	4c2f      	ldr	r4, [pc, #188]	; (80028e8 <HAL_TIM_OC_DelayElapsedCallback+0xa88>)
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002832:	4620      	mov	r0, r4
 8002834:	f003 fc4c 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_RESET);
 8002838:	462a      	mov	r2, r5
 800283a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800283e:	4620      	mov	r0, r4
 8002840:	f003 fc46 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse2--;
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_TIM_OC_DelayElapsedCallback+0xa5c>)
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	3b01      	subs	r3, #1
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	f7ff bb5d 	b.w	8001f0a <HAL_TIM_OC_DelayElapsedCallback+0xaa>
					step3_foc=0;
 8002850:	2500      	movs	r5, #0
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_TIM_OC_DelayElapsedCallback+0xa9c>)
 8002854:	601d      	str	r5, [r3, #0]
					HAL_GPIO_WritePin(STEP3_DIR_GPIO_Port,STEP3_DIR_Pin,GPIO_PIN_SET);
 8002856:	4c24      	ldr	r4, [pc, #144]	; (80028e8 <HAL_TIM_OC_DelayElapsedCallback+0xa88>)
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800285e:	4620      	mov	r0, r4
 8002860:	f003 fc36 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_RESET);
 8002864:	462a      	mov	r2, r5
 8002866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800286a:	4620      	mov	r0, r4
 800286c:	f003 fc30 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse3++;
 8002870:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_TIM_OC_DelayElapsedCallback+0xa68>)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	6013      	str	r3, [r2, #0]
			if(foc_cut[2]<-100){
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_TIM_OC_DelayElapsedCallback+0xa54>)
 800287a:	6899      	ldr	r1, [r3, #8]
 800287c:	f111 0f64 	cmn.w	r1, #100	; 0x64
 8002880:	f6bf ab54 	bge.w	8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xcc>
				step3_foc--;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_TIM_OC_DelayElapsedCallback+0xa9c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3b01      	subs	r3, #1
				if(step3_foc<(10000/(foc_cut[2]))){
 800288a:	f242 7210 	movw	r2, #10000	; 0x2710
 800288e:	fb92 f2f1 	sdiv	r2, r2, r1
 8002892:	4293      	cmp	r3, r2
 8002894:	db34      	blt.n	8002900 <HAL_TIM_OC_DelayElapsedCallback+0xaa0>
				step3_foc--;
 8002896:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_TIM_OC_DelayElapsedCallback+0xa9c>)
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	f7ff bb47 	b.w	8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xcc>
 800289e:	bf00      	nop
 80028a0:	20002ea0 	.word	0x20002ea0
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20002be4 	.word	0x20002be4
 80028ac:	20002eb4 	.word	0x20002eb4
 80028b0:	20002eac 	.word	0x20002eac
 80028b4:	20003288 	.word	0x20003288
 80028b8:	20002af8 	.word	0x20002af8
 80028bc:	20002bcc 	.word	0x20002bcc
 80028c0:	20002ec0 	.word	0x20002ec0
 80028c4:	20002eb8 	.word	0x20002eb8
 80028c8:	20002bd0 	.word	0x20002bd0
 80028cc:	20002ed0 	.word	0x20002ed0
 80028d0:	20002ec4 	.word	0x20002ec4
 80028d4:	20002bd4 	.word	0x20002bd4
 80028d8:	20002edc 	.word	0x20002edc
 80028dc:	20002ed4 	.word	0x20002ed4
 80028e0:	20002ecc 	.word	0x20002ecc
 80028e4:	20002bd8 	.word	0x20002bd8
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	20002ea4 	.word	0x20002ea4
 80028f4:	20002bc8 	.word	0x20002bc8
 80028f8:	20002eb0 	.word	0x20002eb0
 80028fc:	20002ebc 	.word	0x20002ebc
					step3_foc=0;
 8002900:	2400      	movs	r4, #0
 8002902:	4bbe      	ldr	r3, [pc, #760]	; (8002bfc <HAL_TIM_OC_DelayElapsedCallback+0xd9c>)
 8002904:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP3_DIR_GPIO_Port,STEP3_DIR_Pin,GPIO_PIN_RESET);
 8002906:	4dbe      	ldr	r5, [pc, #760]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002908:	4622      	mov	r2, r4
 800290a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800290e:	4628      	mov	r0, r5
 8002910:	f003 fbde 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_RESET);
 8002914:	4622      	mov	r2, r4
 8002916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800291a:	4628      	mov	r0, r5
 800291c:	f003 fbd8 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse3--;
 8002920:	4ab8      	ldr	r2, [pc, #736]	; (8002c04 <HAL_TIM_OC_DelayElapsedCallback+0xda4>)
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	f7ff bb00 	b.w	8001f2c <HAL_TIM_OC_DelayElapsedCallback+0xcc>
					step4_foc=0;
 800292c:	2400      	movs	r4, #0
 800292e:	4bb6      	ldr	r3, [pc, #728]	; (8002c08 <HAL_TIM_OC_DelayElapsedCallback+0xda8>)
 8002930:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP4_DIR_GPIO_Port,STEP4_DIR_Pin,GPIO_PIN_RESET);
 8002932:	4db3      	ldr	r5, [pc, #716]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002934:	4622      	mov	r2, r4
 8002936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293a:	4628      	mov	r0, r5
 800293c:	f003 fbc8 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_SET);
 8002940:	2201      	movs	r2, #1
 8002942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002946:	4628      	mov	r0, r5
 8002948:	f003 fbc2 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse4++;
 800294c:	4aaf      	ldr	r2, [pc, #700]	; (8002c0c <HAL_TIM_OC_DelayElapsedCallback+0xdac>)
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_SET);
 8002954:	2201      	movs	r2, #1
 8002956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800295a:	4628      	mov	r0, r5
 800295c:	f003 fbb8 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8002960:	4622      	mov	r2, r4
 8002962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002966:	48aa      	ldr	r0, [pc, #680]	; (8002c10 <HAL_TIM_OC_DelayElapsedCallback+0xdb0>)
 8002968:	f003 fbb2 	bl	80060d0 <HAL_GPIO_WritePin>
			if(foc_cut[3]<-100){
 800296c:	4ba9      	ldr	r3, [pc, #676]	; (8002c14 <HAL_TIM_OC_DelayElapsedCallback+0xdb4>)
 800296e:	68d9      	ldr	r1, [r3, #12]
 8002970:	f111 0f64 	cmn.w	r1, #100	; 0x64
 8002974:	f6bf aaeb 	bge.w	8001f4e <HAL_TIM_OC_DelayElapsedCallback+0xee>
				step4_foc--;
 8002978:	4ba3      	ldr	r3, [pc, #652]	; (8002c08 <HAL_TIM_OC_DelayElapsedCallback+0xda8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3b01      	subs	r3, #1
				if(step4_foc<(10000/(foc_cut[3]))){
 800297e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002982:	fb92 f2f1 	sdiv	r2, r2, r1
 8002986:	4293      	cmp	r3, r2
 8002988:	db03      	blt.n	8002992 <HAL_TIM_OC_DelayElapsedCallback+0xb32>
				step4_foc--;
 800298a:	4a9f      	ldr	r2, [pc, #636]	; (8002c08 <HAL_TIM_OC_DelayElapsedCallback+0xda8>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	f7ff bade 	b.w	8001f4e <HAL_TIM_OC_DelayElapsedCallback+0xee>
					step4_foc=0;
 8002992:	2400      	movs	r4, #0
 8002994:	4b9c      	ldr	r3, [pc, #624]	; (8002c08 <HAL_TIM_OC_DelayElapsedCallback+0xda8>)
 8002996:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP4_DIR_GPIO_Port,STEP4_DIR_Pin,GPIO_PIN_SET);
 8002998:	4d99      	ldr	r5, [pc, #612]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a0:	4628      	mov	r0, r5
 80029a2:	f003 fb95 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_SET);
 80029a6:	2201      	movs	r2, #1
 80029a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ac:	4628      	mov	r0, r5
 80029ae:	f003 fb8f 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse4--;
 80029b2:	4a96      	ldr	r2, [pc, #600]	; (8002c0c <HAL_TIM_OC_DelayElapsedCallback+0xdac>)
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_RESET);
 80029ba:	4622      	mov	r2, r4
 80029bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c0:	4628      	mov	r0, r5
 80029c2:	f003 fb85 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 80029c6:	4622      	mov	r2, r4
 80029c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029cc:	4890      	ldr	r0, [pc, #576]	; (8002c10 <HAL_TIM_OC_DelayElapsedCallback+0xdb0>)
 80029ce:	f003 fb7f 	bl	80060d0 <HAL_GPIO_WritePin>
 80029d2:	f7ff babc 	b.w	8001f4e <HAL_TIM_OC_DelayElapsedCallback+0xee>
					step5_foc=0;
 80029d6:	2400      	movs	r4, #0
 80029d8:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <HAL_TIM_OC_DelayElapsedCallback+0xdb8>)
 80029da:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_RESET);
 80029dc:	4622      	mov	r2, r4
 80029de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e2:	4887      	ldr	r0, [pc, #540]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 80029e4:	f003 fb74 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 80029e8:	4622      	mov	r2, r4
 80029ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ee:	4888      	ldr	r0, [pc, #544]	; (8002c10 <HAL_TIM_OC_DelayElapsedCallback+0xdb0>)
 80029f0:	f003 fb6e 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse5++;
 80029f4:	4a89      	ldr	r2, [pc, #548]	; (8002c1c <HAL_TIM_OC_DelayElapsedCallback+0xdbc>)
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	6013      	str	r3, [r2, #0]
			if(foc_cut[4]<-100){
 80029fc:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <HAL_TIM_OC_DelayElapsedCallback+0xdb4>)
 80029fe:	6919      	ldr	r1, [r3, #16]
 8002a00:	f111 0f64 	cmn.w	r1, #100	; 0x64
 8002a04:	f6bf aab4 	bge.w	8001f70 <HAL_TIM_OC_DelayElapsedCallback+0x110>
				step5_foc--;
 8002a08:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <HAL_TIM_OC_DelayElapsedCallback+0xdb8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
				if(step5_foc<(10000/(foc_cut[4]))){
 8002a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a12:	fb92 f2f1 	sdiv	r2, r2, r1
 8002a16:	4293      	cmp	r3, r2
 8002a18:	db03      	blt.n	8002a22 <HAL_TIM_OC_DelayElapsedCallback+0xbc2>
				step5_foc--;
 8002a1a:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <HAL_TIM_OC_DelayElapsedCallback+0xdb8>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	f7ff baa7 	b.w	8001f70 <HAL_TIM_OC_DelayElapsedCallback+0x110>
					step5_foc=0;
 8002a22:	2400      	movs	r4, #0
 8002a24:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <HAL_TIM_OC_DelayElapsedCallback+0xdb8>)
 8002a26:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_SET);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2e:	4874      	ldr	r0, [pc, #464]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002a30:	f003 fb4e 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8002a34:	4622      	mov	r2, r4
 8002a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3a:	4875      	ldr	r0, [pc, #468]	; (8002c10 <HAL_TIM_OC_DelayElapsedCallback+0xdb0>)
 8002a3c:	f003 fb48 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse5--;
 8002a40:	4a76      	ldr	r2, [pc, #472]	; (8002c1c <HAL_TIM_OC_DelayElapsedCallback+0xdbc>)
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	f7ff ba92 	b.w	8001f70 <HAL_TIM_OC_DelayElapsedCallback+0x110>
					step6_foc=0;
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	4b74      	ldr	r3, [pc, #464]	; (8002c20 <HAL_TIM_OC_DelayElapsedCallback+0xdc0>)
 8002a50:	601d      	str	r5, [r3, #0]
					HAL_GPIO_WritePin(STEP6_DIR_GPIO_Port,STEP6_DIR_Pin,GPIO_PIN_SET);
 8002a52:	4c74      	ldr	r4, [pc, #464]	; (8002c24 <HAL_TIM_OC_DelayElapsedCallback+0xdc4>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	4611      	mov	r1, r2
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f003 fb39 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_RESET);
 8002a5e:	462a      	mov	r2, r5
 8002a60:	2102      	movs	r1, #2
 8002a62:	4620      	mov	r0, r4
 8002a64:	f003 fb34 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse6=cur_pulse6+6;
 8002a68:	4a6f      	ldr	r2, [pc, #444]	; (8002c28 <HAL_TIM_OC_DelayElapsedCallback+0xdc8>)
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	3306      	adds	r3, #6
 8002a6e:	6013      	str	r3, [r2, #0]
			if(foc_cut[5]<-100){
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_TIM_OC_DelayElapsedCallback+0xdb4>)
 8002a72:	6959      	ldr	r1, [r3, #20]
 8002a74:	f111 0f64 	cmn.w	r1, #100	; 0x64
 8002a78:	f6bf aa8b 	bge.w	8001f92 <HAL_TIM_OC_DelayElapsedCallback+0x132>
				step6_foc--;
 8002a7c:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <HAL_TIM_OC_DelayElapsedCallback+0xdc0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3b01      	subs	r3, #1
				if(step6_foc<(5000/(foc_cut[5]))){
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	fb92 f2f1 	sdiv	r2, r2, r1
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	db03      	blt.n	8002a96 <HAL_TIM_OC_DelayElapsedCallback+0xc36>
				step6_foc--;
 8002a8e:	4a64      	ldr	r2, [pc, #400]	; (8002c20 <HAL_TIM_OC_DelayElapsedCallback+0xdc0>)
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	f7ff ba7e 	b.w	8001f92 <HAL_TIM_OC_DelayElapsedCallback+0x132>
					step6_foc=0;
 8002a96:	2400      	movs	r4, #0
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_TIM_OC_DelayElapsedCallback+0xdc0>)
 8002a9a:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(STEP6_DIR_GPIO_Port,STEP6_DIR_Pin,GPIO_PIN_RESET);
 8002a9c:	4d61      	ldr	r5, [pc, #388]	; (8002c24 <HAL_TIM_OC_DelayElapsedCallback+0xdc4>)
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f003 fb14 	bl	80060d0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_RESET);
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4628      	mov	r0, r5
 8002aae:	f003 fb0f 	bl	80060d0 <HAL_GPIO_WritePin>
					cur_pulse6=cur_pulse6-6;
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_TIM_OC_DelayElapsedCallback+0xdc8>)
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	3b06      	subs	r3, #6
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	f7ff ba6a 	b.w	8001f92 <HAL_TIM_OC_DelayElapsedCallback+0x132>
				if(!is_single_run&&(int)(step_time/100.0)>instruct[instruct_step][10])
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <HAL_TIM_OC_DelayElapsedCallback+0xdcc>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f aab3 	bne.w	800202e <HAL_TIM_OC_DelayElapsedCallback+0x1ce>
 8002ac8:	ee18 0a10 	vmov	r0, s16
 8002acc:	f7fd fce4 	bl	8000498 <__aeabi_f2d>
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_TIM_OC_DelayElapsedCallback+0xdd0>)
 8002ad4:	f7fd fe62 	bl	800079c <__aeabi_ddiv>
 8002ad8:	f7fd ffe6 	bl	8000aa8 <__aeabi_d2iz>
 8002adc:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_TIM_OC_DelayElapsedCallback+0xdd4>)
 8002ade:	2316      	movs	r3, #22
 8002ae0:	fb03 2304 	mla	r3, r3, r4, r2
 8002ae4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002ae8:	4298      	cmp	r0, r3
 8002aea:	f77f aaa0 	ble.w	800202e <HAL_TIM_OC_DelayElapsedCallback+0x1ce>
					step_time = 0;
 8002aee:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <HAL_TIM_OC_DelayElapsedCallback+0xdd8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
					instruct_step++;instruct[2][2]++;
 8002af4:	3401      	adds	r4, #1
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <HAL_TIM_OC_DelayElapsedCallback+0xddc>)
 8002af8:	601c      	str	r4, [r3, #0]
 8002afa:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <HAL_TIM_OC_DelayElapsedCallback+0xdd4>)
 8002afc:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8002afe:	3301      	adds	r3, #1
 8002b00:	8613      	strh	r3, [r2, #48]	; 0x30
					key_flag = 0;
 8002b02:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <HAL_TIM_OC_DelayElapsedCallback+0xde0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	f7ff ba91 	b.w	800202e <HAL_TIM_OC_DelayElapsedCallback+0x1ce>
						cur_num++;
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a4d      	ldr	r2, [pc, #308]	; (8002c44 <HAL_TIM_OC_DelayElapsedCallback+0xde4>)
 8002b10:	6013      	str	r3, [r2, #0]
						instruct[3][4] = cur_num>>16;
 8002b12:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <HAL_TIM_OC_DelayElapsedCallback+0xdd4>)
 8002b14:	1419      	asrs	r1, r3, #16
 8002b16:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
						instruct[3][3] = cur_num&0xffff;
 8002b1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
 8002b1e:	f7ff baac 	b.w	800207a <HAL_TIM_OC_DelayElapsedCallback+0x21a>
				if((int)step_speed>(instruct_speed)||(((int)step)>(max_pulse-acc_pulse)&&(int)step_speed>2))
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_TIM_OC_DelayElapsedCallback+0xde8>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_TIM_OC_DelayElapsedCallback+0xdec>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_TIM_OC_DelayElapsedCallback+0xdf0>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	ee17 2a90 	vmov	r2, s15
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	f77f accf 	ble.w	80024de <HAL_TIM_OC_DelayElapsedCallback+0x67e>
 8002b40:	f1b8 0f02 	cmp.w	r8, #2
 8002b44:	f77f accb 	ble.w	80024de <HAL_TIM_OC_DelayElapsedCallback+0x67e>
 8002b48:	e492      	b.n	8002470 <HAL_TIM_OC_DelayElapsedCallback+0x610>
						HAL_GPIO_WritePin(STEP1_DIR_GPIO_Port,STEP1_DIR_Pin,GPIO_PIN_RESET);
 8002b4a:	4c2d      	ldr	r4, [pc, #180]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	4620      	mov	r0, r4
 8002b52:	f003 fabd 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f003 fab7 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse1++;
 8002b62:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <HAL_TIM_OC_DelayElapsedCallback+0xdf4>)
 8002b64:	6813      	ldr	r3, [r2, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e534      	b.n	80025d6 <HAL_TIM_OC_DelayElapsedCallback+0x776>
						HAL_GPIO_WritePin(STEP1_DIR_GPIO_Port,STEP1_DIR_Pin,GPIO_PIN_SET);
 8002b6c:	4c24      	ldr	r4, [pc, #144]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	4620      	mov	r0, r4
 8002b74:	f003 faac 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f003 faa6 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse1--;
 8002b84:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <HAL_TIM_OC_DelayElapsedCallback+0xdf4>)
 8002b86:	6813      	ldr	r3, [r2, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e523      	b.n	80025d6 <HAL_TIM_OC_DelayElapsedCallback+0x776>
						HAL_GPIO_WritePin(STEP2_DIR_GPIO_Port,STEP2_DIR_Pin,GPIO_PIN_RESET);
 8002b8e:	4c1c      	ldr	r4, [pc, #112]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b96:	4620      	mov	r0, r4
 8002b98:	f003 fa9a 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f003 fa94 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse2++;
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_TIM_OC_DelayElapsedCallback+0xdf8>)
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e53c      	b.n	800262c <HAL_TIM_OC_DelayElapsedCallback+0x7cc>
						HAL_GPIO_WritePin(STEP2_DIR_GPIO_Port,STEP2_DIR_Pin,GPIO_PIN_SET);
 8002bb2:	4c13      	ldr	r4, [pc, #76]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f003 fa88 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_RESET);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f003 fa82 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse2--;
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_TIM_OC_DelayElapsedCallback+0xdf8>)
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e52a      	b.n	800262c <HAL_TIM_OC_DelayElapsedCallback+0x7cc>
						HAL_GPIO_WritePin(STEP3_DIR_GPIO_Port,STEP3_DIR_Pin,GPIO_PIN_SET);
 8002bd6:	4c0a      	ldr	r4, [pc, #40]	; (8002c00 <HAL_TIM_OC_DelayElapsedCallback+0xda0>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bde:	4620      	mov	r0, r4
 8002be0:	f003 fa76 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_RESET);
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bea:	4620      	mov	r0, r4
 8002bec:	f003 fa70 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse3++;
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_TIM_OC_DelayElapsedCallback+0xda4>)
 8002bf2:	6813      	ldr	r3, [r2, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e543      	b.n	8002682 <HAL_TIM_OC_DelayElapsedCallback+0x822>
 8002bfa:	bf00      	nop
 8002bfc:	20002ebc 	.word	0x20002ebc
 8002c00:	40021000 	.word	0x40021000
 8002c04:	20002bd0 	.word	0x20002bd0
 8002c08:	20002ec8 	.word	0x20002ec8
 8002c0c:	20002bd4 	.word	0x20002bd4
 8002c10:	40020400 	.word	0x40020400
 8002c14:	20003288 	.word	0x20003288
 8002c18:	20002ed8 	.word	0x20002ed8
 8002c1c:	20002bd8 	.word	0x20002bd8
 8002c20:	20002ee4 	.word	0x20002ee4
 8002c24:	40021800 	.word	0x40021800
 8002c28:	20002bdc 	.word	0x20002bdc
 8002c2c:	20002be0 	.word	0x20002be0
 8002c30:	40590000 	.word	0x40590000
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20002bf0 	.word	0x20002bf0
 8002c3c:	20002af8 	.word	0x20002af8
 8002c40:	20002e7c 	.word	0x20002e7c
 8002c44:	20002e54 	.word	0x20002e54
 8002c48:	20002be4 	.word	0x20002be4
 8002c4c:	20002e80 	.word	0x20002e80
 8002c50:	20002e50 	.word	0x20002e50
 8002c54:	20002bc8 	.word	0x20002bc8
 8002c58:	20002bcc 	.word	0x20002bcc
						HAL_GPIO_WritePin(STEP3_DIR_GPIO_Port,STEP3_DIR_Pin,GPIO_PIN_RESET);
 8002c5c:	4c66      	ldr	r4, [pc, #408]	; (8002df8 <HAL_TIM_OC_DelayElapsedCallback+0xf98>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c64:	4620      	mov	r0, r4
 8002c66:	f003 fa33 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c70:	4620      	mov	r0, r4
 8002c72:	f003 fa2d 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse3--;
 8002c76:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <HAL_TIM_OC_DelayElapsedCallback+0xf9c>)
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e500      	b.n	8002682 <HAL_TIM_OC_DelayElapsedCallback+0x822>
						step4_is_run = 1;
 8002c80:	2501      	movs	r5, #1
 8002c82:	4b5f      	ldr	r3, [pc, #380]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0xfa0>)
 8002c84:	701d      	strb	r5, [r3, #0]
						HAL_GPIO_WritePin(STEP4_DIR_GPIO_Port,STEP4_DIR_Pin,GPIO_PIN_RESET);
 8002c86:	4c5c      	ldr	r4, [pc, #368]	; (8002df8 <HAL_TIM_OC_DelayElapsedCallback+0xf98>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f003 fa1e 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_SET);
 8002c94:	462a      	mov	r2, r5
 8002c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f003 fa18 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse4++;
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_TIM_OC_DelayElapsedCallback+0xfa4>)
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	442b      	add	r3, r5
 8002ca6:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_SET);
 8002ca8:	462a      	mov	r2, r5
 8002caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f003 fa0e 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cba:	4853      	ldr	r0, [pc, #332]	; (8002e08 <HAL_TIM_OC_DelayElapsedCallback+0xfa8>)
 8002cbc:	f003 fa08 	bl	80060d0 <HAL_GPIO_WritePin>
 8002cc0:	e50c      	b.n	80026dc <HAL_TIM_OC_DelayElapsedCallback+0x87c>
						step4_is_run = 1;
 8002cc2:	2501      	movs	r5, #1
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0xfa0>)
 8002cc6:	701d      	strb	r5, [r3, #0]
						HAL_GPIO_WritePin(STEP4_DIR_GPIO_Port,STEP4_DIR_Pin,GPIO_PIN_SET);
 8002cc8:	4c4b      	ldr	r4, [pc, #300]	; (8002df8 <HAL_TIM_OC_DelayElapsedCallback+0xf98>)
 8002cca:	462a      	mov	r2, r5
 8002ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f003 f9fd 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_SET);
 8002cd6:	462a      	mov	r2, r5
 8002cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f003 f9f7 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse4--;
 8002ce2:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_TIM_OC_DelayElapsedCallback+0xfa4>)
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f003 f9ed 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cfc:	4842      	ldr	r0, [pc, #264]	; (8002e08 <HAL_TIM_OC_DelayElapsedCallback+0xfa8>)
 8002cfe:	f003 f9e7 	bl	80060d0 <HAL_GPIO_WritePin>
 8002d02:	e4eb      	b.n	80026dc <HAL_TIM_OC_DelayElapsedCallback+0x87c>
				}else step4_is_run=0;
 8002d04:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0xfa0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
				if((step5_err!=(int)(step*step5_scale))&&(step4_is_run==0)&&(abs(foc_cut[4])<800)){
 8002d0a:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_TIM_OC_DelayElapsedCallback+0xfac>)
 8002d0c:	ed93 7a00 	vldr	s14, [r3]
 8002d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d18:	ee17 3a90 	vmov	r3, s15
 8002d1c:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <HAL_TIM_OC_DelayElapsedCallback+0xfb0>)
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f47f acf1 	bne.w	8002708 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>
				if((step6_err!=(int)(step*step6_scale))&&(abs(foc_cut[5])<800)){
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_TIM_OC_DelayElapsedCallback+0xfb4>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_TIM_OC_DelayElapsedCallback+0xfb8>)
 8002d2e:	ed93 7a00 	vldr	s14, [r3]
 8002d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d3a:	ee17 3a90 	vmov	r3, s15
 8002d3e:	4a37      	ldr	r2, [pc, #220]	; (8002e1c <HAL_TIM_OC_DelayElapsedCallback+0xfbc>)
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d018      	beq.n	8002d78 <HAL_TIM_OC_DelayElapsedCallback+0xf18>
 8002d46:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <HAL_TIM_OC_DelayElapsedCallback+0xfc0>)
 8002d48:	6952      	ldr	r2, [r2, #20]
 8002d4a:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8002d4e:	f240 613e 	movw	r1, #1598	; 0x63e
 8002d52:	428a      	cmp	r2, r1
 8002d54:	d810      	bhi.n	8002d78 <HAL_TIM_OC_DelayElapsedCallback+0xf18>
					step6_err=(int)(step*step6_scale);
 8002d56:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <HAL_TIM_OC_DelayElapsedCallback+0xfbc>)
 8002d58:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse6<instruct[instruct_step][9]){
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_TIM_OC_DelayElapsedCallback+0xfc4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_TIM_OC_DelayElapsedCallback+0xfc8>)
 8002d62:	2116      	movs	r1, #22
 8002d64:	fb01 2303 	mla	r3, r1, r3, r2
 8002d68:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_TIM_OC_DelayElapsedCallback+0xfcc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dc20      	bgt.n	8002db6 <HAL_TIM_OC_DelayElapsedCallback+0xf56>
					else if (cur_pulse6>instruct[instruct_step][9]){
 8002d74:	429a      	cmp	r2, r3
 8002d76:	db2e      	blt.n	8002dd6 <HAL_TIM_OC_DelayElapsedCallback+0xf76>
			if(instruct[instruct_step][0]==1)
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_TIM_OC_DelayElapsedCallback+0xfc4>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2316      	movs	r3, #22
 8002d7e:	fb03 f302 	mul.w	r3, r3, r2
 8002d82:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <HAL_TIM_OC_DelayElapsedCallback+0xfc8>)
 8002d84:	5ed3      	ldrsh	r3, [r2, r3]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d056      	beq.n	8002e38 <HAL_TIM_OC_DelayElapsedCallback+0xfd8>
}
 8002d8a:	b009      	add	sp, #36	; 0x24
 8002d8c:	ecbd 8b08 	vpop	{d8-d11}
 8002d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9a:	4817      	ldr	r0, [pc, #92]	; (8002df8 <HAL_TIM_OC_DelayElapsedCallback+0xf98>)
 8002d9c:	f003 f998 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8002da0:	2200      	movs	r2, #0
 8002da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da6:	4818      	ldr	r0, [pc, #96]	; (8002e08 <HAL_TIM_OC_DelayElapsedCallback+0xfa8>)
 8002da8:	f003 f992 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse5++;
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_TIM_OC_DelayElapsedCallback+0xfd0>)
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e7b7      	b.n	8002d26 <HAL_TIM_OC_DelayElapsedCallback+0xec6>
						HAL_GPIO_WritePin(STEP6_DIR_GPIO_Port,STEP6_DIR_Pin,GPIO_PIN_SET);
 8002db6:	4c1f      	ldr	r4, [pc, #124]	; (8002e34 <HAL_TIM_OC_DelayElapsedCallback+0xfd4>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f003 f987 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f003 f982 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse6=cur_pulse6+6;
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_TIM_OC_DelayElapsedCallback+0xfcc>)
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	3306      	adds	r3, #6
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e7d0      	b.n	8002d78 <HAL_TIM_OC_DelayElapsedCallback+0xf18>
						HAL_GPIO_WritePin(STEP6_DIR_GPIO_Port,STEP6_DIR_Pin,GPIO_PIN_RESET);
 8002dd6:	4c17      	ldr	r4, [pc, #92]	; (8002e34 <HAL_TIM_OC_DelayElapsedCallback+0xfd4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f003 f977 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_RESET);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2102      	movs	r1, #2
 8002de6:	4620      	mov	r0, r4
 8002de8:	f003 f972 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse6=cur_pulse6-6;
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_TIM_OC_DelayElapsedCallback+0xfcc>)
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	3b06      	subs	r3, #6
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	e7c0      	b.n	8002d78 <HAL_TIM_OC_DelayElapsedCallback+0xf18>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	20002bd0 	.word	0x20002bd0
 8002e00:	20002ecc 	.word	0x20002ecc
 8002e04:	20002bd4 	.word	0x20002bd4
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	20002edc 	.word	0x20002edc
 8002e10:	20002ed4 	.word	0x20002ed4
 8002e14:	20002be4 	.word	0x20002be4
 8002e18:	20002ee8 	.word	0x20002ee8
 8002e1c:	20002ee0 	.word	0x20002ee0
 8002e20:	20003288 	.word	0x20003288
 8002e24:	20002af8 	.word	0x20002af8
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20002bdc 	.word	0x20002bdc
 8002e30:	20002bd8 	.word	0x20002bd8
 8002e34:	40021800 	.word	0x40021800
				if((key_flag==0&&is_single_run)||(key_flag==0&&is_start))
 8002e38:	4bcf      	ldr	r3, [pc, #828]	; (8003178 <HAL_TIM_OC_DelayElapsedCallback+0x1318>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 82b9 	bne.w	80033b4 <HAL_TIM_OC_DelayElapsedCallback+0x1554>
 8002e42:	4bce      	ldr	r3, [pc, #824]	; (800317c <HAL_TIM_OC_DelayElapsedCallback+0x131c>)
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4bce      	ldr	r3, [pc, #824]	; (8003180 <HAL_TIM_OC_DelayElapsedCallback+0x1320>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f000 82b2 	beq.w	80033b4 <HAL_TIM_OC_DelayElapsedCallback+0x1554>
					key_flag = 1;
 8002e50:	4bc9      	ldr	r3, [pc, #804]	; (8003178 <HAL_TIM_OC_DelayElapsedCallback+0x1318>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
					start_pul1 = cur_pulse1;
 8002e56:	f8df b378 	ldr.w	fp, [pc, #888]	; 80031d0 <HAL_TIM_OC_DelayElapsedCallback+0x1370>
 8002e5a:	f8db 2000 	ldr.w	r2, [fp]
 8002e5e:	4bc9      	ldr	r3, [pc, #804]	; (8003184 <HAL_TIM_OC_DelayElapsedCallback+0x1324>)
 8002e60:	601a      	str	r2, [r3, #0]
					start_pul2 = cur_pulse2;
 8002e62:	f8df a370 	ldr.w	sl, [pc, #880]	; 80031d4 <HAL_TIM_OC_DelayElapsedCallback+0x1374>
 8002e66:	f8da 2000 	ldr.w	r2, [sl]
 8002e6a:	4bc7      	ldr	r3, [pc, #796]	; (8003188 <HAL_TIM_OC_DelayElapsedCallback+0x1328>)
 8002e6c:	601a      	str	r2, [r3, #0]
					start_pul3 = cur_pulse3;
 8002e6e:	4bc7      	ldr	r3, [pc, #796]	; (800318c <HAL_TIM_OC_DelayElapsedCallback+0x132c>)
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	4bc7      	ldr	r3, [pc, #796]	; (8003190 <HAL_TIM_OC_DelayElapsedCallback+0x1330>)
 8002e74:	6018      	str	r0, [r3, #0]
					start_pul4 = cur_pulse4;
 8002e76:	4bc7      	ldr	r3, [pc, #796]	; (8003194 <HAL_TIM_OC_DelayElapsedCallback+0x1334>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4bc7      	ldr	r3, [pc, #796]	; (8003198 <HAL_TIM_OC_DelayElapsedCallback+0x1338>)
 8002e7c:	601a      	str	r2, [r3, #0]
					start_pul5 = cur_pulse5;
 8002e7e:	4bc7      	ldr	r3, [pc, #796]	; (800319c <HAL_TIM_OC_DelayElapsedCallback+0x133c>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4bc7      	ldr	r3, [pc, #796]	; (80031a0 <HAL_TIM_OC_DelayElapsedCallback+0x1340>)
 8002e84:	601a      	str	r2, [r3, #0]
					start_pul6 = cur_pulse6;
 8002e86:	4bc7      	ldr	r3, [pc, #796]	; (80031a4 <HAL_TIM_OC_DelayElapsedCallback+0x1344>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4bc7      	ldr	r3, [pc, #796]	; (80031a8 <HAL_TIM_OC_DelayElapsedCallback+0x1348>)
 8002e8c:	601a      	str	r2, [r3, #0]
					L3 = sqrt(-2.0*L1*L2*cos((cur_pulse3*0.0113924+180)/57.2958)+L1*L1+L2*L2);
 8002e8e:	4bc7      	ldr	r3, [pc, #796]	; (80031ac <HAL_TIM_OC_DelayElapsedCallback+0x134c>)
 8002e90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e94:	4ac6      	ldr	r2, [pc, #792]	; (80031b0 <HAL_TIM_OC_DelayElapsedCallback+0x1350>)
 8002e96:	e9d2 4500 	ldrd	r4, r5, [r2]
 8002e9a:	f7fd faeb 	bl	8000474 <__aeabi_i2d>
 8002e9e:	a3ae      	add	r3, pc, #696	; (adr r3, 8003158 <HAL_TIM_OC_DelayElapsedCallback+0x12f8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fb50 	bl	8000548 <__aeabi_dmul>
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4bc2      	ldr	r3, [pc, #776]	; (80031b4 <HAL_TIM_OC_DelayElapsedCallback+0x1354>)
 8002eac:	f7fd f996 	bl	80001dc <__adddf3>
 8002eb0:	a3ab      	add	r3, pc, #684	; (adr r3, 8003160 <HAL_TIM_OC_DelayElapsedCallback+0x1300>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fc71 	bl	800079c <__aeabi_ddiv>
 8002eba:	ec41 0b10 	vmov	d0, r0, r1
 8002ebe:	f005 fac7 	bl	8008450 <cos>
 8002ec2:	ec57 6b10 	vmov	r6, r7, d0
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002ecc:	4640      	mov	r0, r8
 8002ece:	4649      	mov	r1, r9
 8002ed0:	f7fd fb3a 	bl	8000548 <__aeabi_dmul>
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	f7fd fb36 	bl	8000548 <__aeabi_dmul>
 8002edc:	4632      	mov	r2, r6
 8002ede:	463b      	mov	r3, r7
 8002ee0:	f7fd fb32 	bl	8000548 <__aeabi_dmul>
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	460f      	mov	r7, r1
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	4640      	mov	r0, r8
 8002eee:	4649      	mov	r1, r9
 8002ef0:	f7fd fb2a 	bl	8000548 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4630      	mov	r0, r6
 8002efa:	4639      	mov	r1, r7
 8002efc:	f7fd f96e 	bl	80001dc <__adddf3>
 8002f00:	4606      	mov	r6, r0
 8002f02:	460f      	mov	r7, r1
 8002f04:	4622      	mov	r2, r4
 8002f06:	462b      	mov	r3, r5
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd fb1c 	bl	8000548 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4630      	mov	r0, r6
 8002f16:	4639      	mov	r1, r7
 8002f18:	f7fd f960 	bl	80001dc <__adddf3>
 8002f1c:	ec41 0b10 	vmov	d0, r0, r1
 8002f20:	f005 fb76 	bl	8008610 <sqrt>
 8002f24:	ec57 6b10 	vmov	r6, r7, d0
 8002f28:	49a3      	ldr	r1, [pc, #652]	; (80031b8 <HAL_TIM_OC_DelayElapsedCallback+0x1358>)
 8002f2a:	ed81 0b00 	vstr	d0, [r1]
					float cc = cur_pulse2*0.0067164/57.2958 - acos((L1*L1+L3*L3-L2*L2)/(2.0*L1*L3));
 8002f2e:	f8da 0000 	ldr.w	r0, [sl]
 8002f32:	f7fd fa9f 	bl	8000474 <__aeabi_i2d>
 8002f36:	a38c      	add	r3, pc, #560	; (adr r3, 8003168 <HAL_TIM_OC_DelayElapsedCallback+0x1308>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd fb04 	bl	8000548 <__aeabi_dmul>
 8002f40:	a387      	add	r3, pc, #540	; (adr r3, 8003160 <HAL_TIM_OC_DelayElapsedCallback+0x1300>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd fc29 	bl	800079c <__aeabi_ddiv>
 8002f4a:	e9cd 0100 	strd	r0, r1, [sp]
 8002f4e:	4b97      	ldr	r3, [pc, #604]	; (80031ac <HAL_TIM_OC_DelayElapsedCallback+0x134c>)
 8002f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f54:	4a96      	ldr	r2, [pc, #600]	; (80031b0 <HAL_TIM_OC_DelayElapsedCallback+0x1350>)
 8002f56:	e9d2 4500 	ldrd	r4, r5, [r2]
 8002f5a:	4642      	mov	r2, r8
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	4640      	mov	r0, r8
 8002f60:	4649      	mov	r1, r9
 8002f62:	f7fd faf1 	bl	8000548 <__aeabi_dmul>
 8002f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f6a:	4632      	mov	r2, r6
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	4630      	mov	r0, r6
 8002f70:	4639      	mov	r1, r7
 8002f72:	f7fd fae9 	bl	8000548 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f7e:	f7fd f92d 	bl	80001dc <__adddf3>
 8002f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd fadb 	bl	8000548 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f9a:	f7fd f91d 	bl	80001d8 <__aeabi_dsub>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	4642      	mov	r2, r8
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	4649      	mov	r1, r9
 8002faa:	f7fd f917 	bl	80001dc <__adddf3>
 8002fae:	4632      	mov	r2, r6
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	f7fd fac9 	bl	8000548 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4620      	mov	r0, r4
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	f7fd fbed 	bl	800079c <__aeabi_ddiv>
 8002fc2:	ec41 0b10 	vmov	d0, r0, r1
 8002fc6:	f005 fae7 	bl	8008598 <acos>
 8002fca:	ec53 2b10 	vmov	r2, r3, d0
 8002fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002fd2:	f7fd f901 	bl	80001d8 <__aeabi_dsub>
 8002fd6:	f7fd fd8f 	bl	8000af8 <__aeabi_d2f>
					z = L3*sin(cc);
 8002fda:	f7fd fa5d 	bl	8000498 <__aeabi_f2d>
 8002fde:	ec41 0b1a 	vmov	d10, r0, r1
 8002fe2:	ec41 0b10 	vmov	d0, r0, r1
 8002fe6:	f005 fa83 	bl	80084f0 <sin>
 8002fea:	ec51 0b10 	vmov	r0, r1, d0
 8002fee:	4c72      	ldr	r4, [pc, #456]	; (80031b8 <HAL_TIM_OC_DelayElapsedCallback+0x1358>)
 8002ff0:	e9d4 6700 	ldrd	r6, r7, [r4]
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	f7fd faa6 	bl	8000548 <__aeabi_dmul>
 8002ffc:	ec41 0b18 	vmov	d8, r0, r1
 8003000:	496e      	ldr	r1, [pc, #440]	; (80031bc <HAL_TIM_OC_DelayElapsedCallback+0x135c>)
 8003002:	ed81 8b00 	vstr	d8, [r1]
					x = cos(cur_pulse1*0.006338/57.2958)*L3*cos(cc);
 8003006:	f8db 0000 	ldr.w	r0, [fp]
 800300a:	f7fd fa33 	bl	8000474 <__aeabi_i2d>
 800300e:	a358      	add	r3, pc, #352	; (adr r3, 8003170 <HAL_TIM_OC_DelayElapsedCallback+0x1310>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd fa98 	bl	8000548 <__aeabi_dmul>
 8003018:	a351      	add	r3, pc, #324	; (adr r3, 8003160 <HAL_TIM_OC_DelayElapsedCallback+0x1300>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f7fd fbbd 	bl	800079c <__aeabi_ddiv>
 8003022:	ec41 0b19 	vmov	d9, r0, r1
 8003026:	ec41 0b10 	vmov	d0, r0, r1
 800302a:	f005 fa11 	bl	8008450 <cos>
 800302e:	ec59 8b10 	vmov	r8, r9, d0
 8003032:	eeb0 0a4a 	vmov.f32	s0, s20
 8003036:	eef0 0a6a 	vmov.f32	s1, s21
 800303a:	f005 fa09 	bl	8008450 <cos>
 800303e:	ec55 4b10 	vmov	r4, r5, d0
 8003042:	4642      	mov	r2, r8
 8003044:	464b      	mov	r3, r9
 8003046:	4630      	mov	r0, r6
 8003048:	4639      	mov	r1, r7
 800304a:	f7fd fa7d 	bl	8000548 <__aeabi_dmul>
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	f7fd fa79 	bl	8000548 <__aeabi_dmul>
 8003056:	4680      	mov	r8, r0
 8003058:	4689      	mov	r9, r1
 800305a:	4859      	ldr	r0, [pc, #356]	; (80031c0 <HAL_TIM_OC_DelayElapsedCallback+0x1360>)
 800305c:	e9c0 8900 	strd	r8, r9, [r0]
					y = sin(cur_pulse1*0.006338/57.2958)*L3*cos(cc);
 8003060:	eeb0 0a49 	vmov.f32	s0, s18
 8003064:	eef0 0a69 	vmov.f32	s1, s19
 8003068:	f005 fa42 	bl	80084f0 <sin>
 800306c:	ec53 2b10 	vmov	r2, r3, d0
 8003070:	4630      	mov	r0, r6
 8003072:	4639      	mov	r1, r7
 8003074:	f7fd fa68 	bl	8000548 <__aeabi_dmul>
 8003078:	4622      	mov	r2, r4
 800307a:	462b      	mov	r3, r5
 800307c:	f7fd fa64 	bl	8000548 <__aeabi_dmul>
 8003080:	f8df b154 	ldr.w	fp, [pc, #340]	; 80031d8 <HAL_TIM_OC_DelayElapsedCallback+0x1378>
 8003084:	e9cb 0100 	strd	r0, r1, [fp]
					new_x = x;
 8003088:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <HAL_TIM_OC_DelayElapsedCallback+0x1364>)
 800308a:	e9c3 8900 	strd	r8, r9, [r3]
					new_y = y;
 800308e:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <HAL_TIM_OC_DelayElapsedCallback+0x1368>)
 8003090:	e9c3 0100 	strd	r0, r1, [r3]
					new_z = z;
 8003094:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <HAL_TIM_OC_DelayElapsedCallback+0x136c>)
 8003096:	ed83 8b00 	vstr	d8, [r3]
					double ik_L3 = sqrt(-2.0*L1*L2*cos((instruct[instruct_step][6]*0.0113924+180)/57.2958)+L1*L1+L2*L2);
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <HAL_TIM_OC_DelayElapsedCallback+0x134c>)
 800309c:	e9d3 6700 	ldrd	r6, r7, [r3]
 80030a0:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <HAL_TIM_OC_DelayElapsedCallback+0x1350>)
 80030a2:	e9d2 4500 	ldrd	r4, r5, [r2]
 80030a6:	f8df a134 	ldr.w	sl, [pc, #308]	; 80031dc <HAL_TIM_OC_DelayElapsedCallback+0x137c>
 80030aa:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80031e0 <HAL_TIM_OC_DelayElapsedCallback+0x1380>
 80030ae:	f8d8 3000 	ldr.w	r3, [r8]
 80030b2:	f04f 0916 	mov.w	r9, #22
 80030b6:	fb09 a303 	mla	r3, r9, r3, sl
 80030ba:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80030be:	f7fd f9d9 	bl	8000474 <__aeabi_i2d>
 80030c2:	a325      	add	r3, pc, #148	; (adr r3, 8003158 <HAL_TIM_OC_DelayElapsedCallback+0x12f8>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f7fd fa3e 	bl	8000548 <__aeabi_dmul>
 80030cc:	2200      	movs	r2, #0
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <HAL_TIM_OC_DelayElapsedCallback+0x1354>)
 80030d0:	f7fd f884 	bl	80001dc <__adddf3>
 80030d4:	a322      	add	r3, pc, #136	; (adr r3, 8003160 <HAL_TIM_OC_DelayElapsedCallback+0x1300>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd fb5f 	bl	800079c <__aeabi_ddiv>
 80030de:	ec41 0b10 	vmov	d0, r0, r1
 80030e2:	f005 f9b5 	bl	8008450 <cos>
 80030e6:	ed8d 0b00 	vstr	d0, [sp]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80030f0:	4630      	mov	r0, r6
 80030f2:	4639      	mov	r1, r7
 80030f4:	f7fd fa28 	bl	8000548 <__aeabi_dmul>
 80030f8:	4622      	mov	r2, r4
 80030fa:	462b      	mov	r3, r5
 80030fc:	f7fd fa24 	bl	8000548 <__aeabi_dmul>
 8003100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003104:	f7fd fa20 	bl	8000548 <__aeabi_dmul>
 8003108:	e9cd 0100 	strd	r0, r1, [sp]
 800310c:	4632      	mov	r2, r6
 800310e:	463b      	mov	r3, r7
 8003110:	4630      	mov	r0, r6
 8003112:	4639      	mov	r1, r7
 8003114:	f7fd fa18 	bl	8000548 <__aeabi_dmul>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003120:	f7fd f85c 	bl	80001dc <__adddf3>
 8003124:	4606      	mov	r6, r0
 8003126:	460f      	mov	r7, r1
 8003128:	4622      	mov	r2, r4
 800312a:	462b      	mov	r3, r5
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd fa0a 	bl	8000548 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4630      	mov	r0, r6
 800313a:	4639      	mov	r1, r7
 800313c:	f7fd f84e 	bl	80001dc <__adddf3>
 8003140:	ec41 0b10 	vmov	d0, r0, r1
 8003144:	f005 fa64 	bl	8008610 <sqrt>
 8003148:	ec57 6b10 	vmov	r6, r7, d0
					double ccc = instruct[instruct_step][5]*0.0067164/57.2958 - acos((L1*L1+ik_L3*ik_L3-L2*L2)/(2.0*L1*ik_L3));
 800314c:	f8d8 3000 	ldr.w	r3, [r8]
 8003150:	fb09 a303 	mla	r3, r9, r3, sl
 8003154:	e046      	b.n	80031e4 <HAL_TIM_OC_DelayElapsedCallback+0x1384>
 8003156:	bf00      	nop
 8003158:	0b6233d2 	.word	0x0b6233d2
 800315c:	3f8754e6 	.word	0x3f8754e6
 8003160:	c63f1412 	.word	0xc63f1412
 8003164:	404ca5dc 	.word	0x404ca5dc
 8003168:	e58cb733 	.word	0xe58cb733
 800316c:	3f7b82a7 	.word	0x3f7b82a7
 8003170:	eb8d8234 	.word	0xeb8d8234
 8003174:	3f79f5df 	.word	0x3f79f5df
 8003178:	20002e7c 	.word	0x20002e7c
 800317c:	20002be0 	.word	0x20002be0
 8003180:	20002be1 	.word	0x20002be1
 8003184:	200032b4 	.word	0x200032b4
 8003188:	200032cc 	.word	0x200032cc
 800318c:	20002bd0 	.word	0x20002bd0
 8003190:	200032b8 	.word	0x200032b8
 8003194:	20002bd4 	.word	0x20002bd4
 8003198:	200032b0 	.word	0x200032b0
 800319c:	20002bd8 	.word	0x20002bd8
 80031a0:	200032d0 	.word	0x200032d0
 80031a4:	20002bdc 	.word	0x20002bdc
 80031a8:	200032c8 	.word	0x200032c8
 80031ac:	20002b00 	.word	0x20002b00
 80031b0:	20002b08 	.word	0x20002b08
 80031b4:	40668000 	.word	0x40668000
 80031b8:	20002e48 	.word	0x20002e48
 80031bc:	20002f00 	.word	0x20002f00
 80031c0:	20002ef0 	.word	0x20002ef0
 80031c4:	20002e88 	.word	0x20002e88
 80031c8:	20002e90 	.word	0x20002e90
 80031cc:	20002e98 	.word	0x20002e98
 80031d0:	20002bc8 	.word	0x20002bc8
 80031d4:	20002bcc 	.word	0x20002bcc
 80031d8:	20002ef8 	.word	0x20002ef8
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20002af8 	.word	0x20002af8
 80031e4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80031e8:	f7fd f944 	bl	8000474 <__aeabi_i2d>
 80031ec:	a3e3      	add	r3, pc, #908	; (adr r3, 800357c <HAL_TIM_OC_DelayElapsedCallback+0x171c>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd f9a9 	bl	8000548 <__aeabi_dmul>
 80031f6:	a3ca      	add	r3, pc, #808	; (adr r3, 8003520 <HAL_TIM_OC_DelayElapsedCallback+0x16c0>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f7fd face 	bl	800079c <__aeabi_ddiv>
 8003200:	e9cd 0100 	strd	r0, r1, [sp]
 8003204:	4bca      	ldr	r3, [pc, #808]	; (8003530 <HAL_TIM_OC_DelayElapsedCallback+0x16d0>)
 8003206:	e9d3 4500 	ldrd	r4, r5, [r3]
 800320a:	4aca      	ldr	r2, [pc, #808]	; (8003534 <HAL_TIM_OC_DelayElapsedCallback+0x16d4>)
 800320c:	ed92 8b00 	vldr	d8, [r2]
 8003210:	4622      	mov	r2, r4
 8003212:	462b      	mov	r3, r5
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fd f996 	bl	8000548 <__aeabi_dmul>
 800321c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003220:	4632      	mov	r2, r6
 8003222:	463b      	mov	r3, r7
 8003224:	4630      	mov	r0, r6
 8003226:	4639      	mov	r1, r7
 8003228:	f7fd f98e 	bl	8000548 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003234:	f7fc ffd2 	bl	80001dc <__adddf3>
 8003238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800323c:	ec53 2b18 	vmov	r2, r3, d8
 8003240:	ec51 0b18 	vmov	r0, r1, d8
 8003244:	f7fd f980 	bl	8000548 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003250:	f7fc ffc2 	bl	80001d8 <__aeabi_dsub>
 8003254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003258:	4622      	mov	r2, r4
 800325a:	462b      	mov	r3, r5
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fc ffbc 	bl	80001dc <__adddf3>
 8003264:	4632      	mov	r2, r6
 8003266:	463b      	mov	r3, r7
 8003268:	f7fd f96e 	bl	8000548 <__aeabi_dmul>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003274:	f7fd fa92 	bl	800079c <__aeabi_ddiv>
 8003278:	ec41 0b10 	vmov	d0, r0, r1
 800327c:	f005 f98c 	bl	8008598 <acos>
 8003280:	ec53 2b10 	vmov	r2, r3, d0
 8003284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003288:	f7fc ffa6 	bl	80001d8 <__aeabi_dsub>
 800328c:	ec41 0b19 	vmov	d9, r0, r1
					ik_z = ik_L3*sin(ccc);
 8003290:	ec41 0b10 	vmov	d0, r0, r1
 8003294:	f005 f92c 	bl	80084f0 <sin>
 8003298:	ec51 0b10 	vmov	r0, r1, d0
 800329c:	4632      	mov	r2, r6
 800329e:	463b      	mov	r3, r7
 80032a0:	f7fd f952 	bl	8000548 <__aeabi_dmul>
 80032a4:	ec41 0b1a 	vmov	d10, r0, r1
 80032a8:	4ba3      	ldr	r3, [pc, #652]	; (8003538 <HAL_TIM_OC_DelayElapsedCallback+0x16d8>)
 80032aa:	e9c3 0100 	strd	r0, r1, [r3]
					ik_x = cos(instruct[instruct_step][4]*0.006338/57.2958)*ik_L3*cos(ccc);
 80032ae:	f8d8 3000 	ldr.w	r3, [r8]
 80032b2:	fb09 a903 	mla	r9, r9, r3, sl
 80032b6:	f9b9 0008 	ldrsh.w	r0, [r9, #8]
 80032ba:	f7fd f8db 	bl	8000474 <__aeabi_i2d>
 80032be:	a396      	add	r3, pc, #600	; (adr r3, 8003518 <HAL_TIM_OC_DelayElapsedCallback+0x16b8>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f940 	bl	8000548 <__aeabi_dmul>
 80032c8:	a395      	add	r3, pc, #596	; (adr r3, 8003520 <HAL_TIM_OC_DelayElapsedCallback+0x16c0>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd fa65 	bl	800079c <__aeabi_ddiv>
 80032d2:	ec41 0b18 	vmov	d8, r0, r1
 80032d6:	ec41 0b10 	vmov	d0, r0, r1
 80032da:	f005 f8b9 	bl	8008450 <cos>
 80032de:	ec59 8b10 	vmov	r8, r9, d0
 80032e2:	eeb0 0a49 	vmov.f32	s0, s18
 80032e6:	eef0 0a69 	vmov.f32	s1, s19
 80032ea:	f005 f8b1 	bl	8008450 <cos>
 80032ee:	ec55 4b10 	vmov	r4, r5, d0
 80032f2:	4632      	mov	r2, r6
 80032f4:	463b      	mov	r3, r7
 80032f6:	4640      	mov	r0, r8
 80032f8:	4649      	mov	r1, r9
 80032fa:	f7fd f925 	bl	8000548 <__aeabi_dmul>
 80032fe:	4622      	mov	r2, r4
 8003300:	462b      	mov	r3, r5
 8003302:	f7fd f921 	bl	8000548 <__aeabi_dmul>
 8003306:	ec41 0b19 	vmov	d9, r0, r1
 800330a:	4b8c      	ldr	r3, [pc, #560]	; (800353c <HAL_TIM_OC_DelayElapsedCallback+0x16dc>)
 800330c:	e9c3 0100 	strd	r0, r1, [r3]
					ik_y = sin(instruct[instruct_step][4]*0.006338/57.2958)*ik_L3*cos(ccc);
 8003310:	eeb0 0a48 	vmov.f32	s0, s16
 8003314:	eef0 0a68 	vmov.f32	s1, s17
 8003318:	f005 f8ea 	bl	80084f0 <sin>
 800331c:	ec51 0b10 	vmov	r0, r1, d0
 8003320:	4632      	mov	r2, r6
 8003322:	463b      	mov	r3, r7
 8003324:	f7fd f910 	bl	8000548 <__aeabi_dmul>
 8003328:	4622      	mov	r2, r4
 800332a:	462b      	mov	r3, r5
 800332c:	f7fd f90c 	bl	8000548 <__aeabi_dmul>
 8003330:	ec41 0b18 	vmov	d8, r0, r1
 8003334:	4b82      	ldr	r3, [pc, #520]	; (8003540 <HAL_TIM_OC_DelayElapsedCallback+0x16e0>)
 8003336:	e9c3 0100 	strd	r0, r1, [r3]
					max_xyz = max(abs((int)ik_z-(int)z),abs((int)ik_y-(int)y));
 800333a:	ec51 0b1a 	vmov	r0, r1, d10
 800333e:	f7fd fbb3 	bl	8000aa8 <__aeabi_d2iz>
 8003342:	4680      	mov	r8, r0
 8003344:	497f      	ldr	r1, [pc, #508]	; (8003544 <HAL_TIM_OC_DelayElapsedCallback+0x16e4>)
 8003346:	ed91 bb00 	vldr	d11, [r1]
 800334a:	ec51 0b18 	vmov	r0, r1, d8
 800334e:	f7fd fbab 	bl	8000aa8 <__aeabi_d2iz>
 8003352:	4604      	mov	r4, r0
 8003354:	9000      	str	r0, [sp, #0]
 8003356:	e9db 9a00 	ldrd	r9, sl, [fp]
					max_xyz = max(max_xyz,abs((int)ik_x-(int)x));
 800335a:	ec51 0b19 	vmov	r0, r1, d9
 800335e:	f7fd fba3 	bl	8000aa8 <__aeabi_d2iz>
 8003362:	4605      	mov	r5, r0
 8003364:	9002      	str	r0, [sp, #8]
 8003366:	4b78      	ldr	r3, [pc, #480]	; (8003548 <HAL_TIM_OC_DelayElapsedCallback+0x16e8>)
 8003368:	e9d3 6700 	ldrd	r6, r7, [r3]
					max_xyz = max(abs((int)ik_z-(int)z),abs((int)ik_y-(int)y));
 800336c:	4648      	mov	r0, r9
 800336e:	4651      	mov	r1, sl
 8003370:	f7fd fb9a 	bl	8000aa8 <__aeabi_d2iz>
 8003374:	1a24      	subs	r4, r4, r0
 8003376:	2c00      	cmp	r4, #0
 8003378:	bfb8      	it	lt
 800337a:	4264      	neglt	r4, r4
					max_xyz = max(max_xyz,abs((int)ik_x-(int)x));
 800337c:	4630      	mov	r0, r6
 800337e:	4639      	mov	r1, r7
 8003380:	f7fd fb92 	bl	8000aa8 <__aeabi_d2iz>
 8003384:	1a28      	subs	r0, r5, r0
 8003386:	2800      	cmp	r0, #0
 8003388:	bfb8      	it	lt
 800338a:	4240      	neglt	r0, r0
 800338c:	4284      	cmp	r4, r0
 800338e:	bfb8      	it	lt
 8003390:	4604      	movlt	r4, r0
					max_xyz = max(abs((int)ik_z-(int)z),abs((int)ik_y-(int)y));
 8003392:	ec51 0b1b 	vmov	r0, r1, d11
 8003396:	f7fd fb87 	bl	8000aa8 <__aeabi_d2iz>
 800339a:	eba8 0000 	sub.w	r0, r8, r0
 800339e:	2800      	cmp	r0, #0
 80033a0:	bfb8      	it	lt
 80033a2:	4240      	neglt	r0, r0
 80033a4:	42a0      	cmp	r0, r4
 80033a6:	bfb8      	it	lt
 80033a8:	4620      	movlt	r0, r4
					max_xyz = max(max_xyz,abs((int)ik_x-(int)x));
 80033aa:	4b68      	ldr	r3, [pc, #416]	; (800354c <HAL_TIM_OC_DelayElapsedCallback+0x16ec>)
 80033ac:	6018      	str	r0, [r3, #0]
					if(max_xyz>3)
 80033ae:	2803      	cmp	r0, #3
 80033b0:	f300 85cc 	bgt.w	8003f4c <HAL_TIM_OC_DelayElapsedCallback+0x20ec>
				if((abs(((int)ik_a1)-cur_pulse1)<3)&&
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_TIM_OC_DelayElapsedCallback+0x16f0>)
 80033b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ba:	f7fd fb75 	bl	8000aa8 <__aeabi_d2iz>
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_TIM_OC_DelayElapsedCallback+0x16f4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1ac3      	subs	r3, r0, r3
 80033c4:	3302      	adds	r3, #2
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	f200 8432 	bhi.w	8003c30 <HAL_TIM_OC_DelayElapsedCallback+0x1dd0>
					(abs(((int)ik_a2)-cur_pulse2)<3)&&
 80033cc:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_TIM_OC_DelayElapsedCallback+0x16f8>)
 80033ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d2:	f7fd fb69 	bl	8000aa8 <__aeabi_d2iz>
 80033d6:	4b61      	ldr	r3, [pc, #388]	; (800355c <HAL_TIM_OC_DelayElapsedCallback+0x16fc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	1ac3      	subs	r3, r0, r3
 80033dc:	3302      	adds	r3, #2
				if((abs(((int)ik_a1)-cur_pulse1)<3)&&
 80033de:	2b04      	cmp	r3, #4
 80033e0:	f200 8426 	bhi.w	8003c30 <HAL_TIM_OC_DelayElapsedCallback+0x1dd0>
					(abs(((int)(ik_a3-180/0.0113924))-cur_pulse3)<3)&&
 80033e4:	a350      	add	r3, pc, #320	; (adr r3, 8003528 <HAL_TIM_OC_DelayElapsedCallback+0x16c8>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	495d      	ldr	r1, [pc, #372]	; (8003560 <HAL_TIM_OC_DelayElapsedCallback+0x1700>)
 80033ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033f0:	f7fc fef2 	bl	80001d8 <__aeabi_dsub>
 80033f4:	f7fd fb58 	bl	8000aa8 <__aeabi_d2iz>
 80033f8:	4b5a      	ldr	r3, [pc, #360]	; (8003564 <HAL_TIM_OC_DelayElapsedCallback+0x1704>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1ac3      	subs	r3, r0, r3
 80033fe:	3302      	adds	r3, #2
					(abs(((int)ik_a2)-cur_pulse2)<3)&&
 8003400:	2b04      	cmp	r3, #4
 8003402:	f200 8415 	bhi.w	8003c30 <HAL_TIM_OC_DelayElapsedCallback+0x1dd0>
					((abs((int)ik_z-(int)new_z)>1)||
 8003406:	4b4c      	ldr	r3, [pc, #304]	; (8003538 <HAL_TIM_OC_DelayElapsedCallback+0x16d8>)
 8003408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800340c:	4640      	mov	r0, r8
 800340e:	4649      	mov	r1, r9
 8003410:	f7fd fb4a 	bl	8000aa8 <__aeabi_d2iz>
 8003414:	4682      	mov	sl, r0
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <HAL_TIM_OC_DelayElapsedCallback+0x1708>)
 8003418:	e9d3 6700 	ldrd	r6, r7, [r3]
 800341c:	4630      	mov	r0, r6
 800341e:	4639      	mov	r1, r7
 8003420:	f7fd fb42 	bl	8000aa8 <__aeabi_d2iz>
 8003424:	ebaa 0300 	sub.w	r3, sl, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	bfb8      	it	lt
 800342c:	425b      	neglt	r3, r3
					(abs(((int)(ik_a3-180/0.0113924))-cur_pulse3)<3)&&
 800342e:	2b01      	cmp	r3, #1
 8003430:	dc11      	bgt.n	8003456 <HAL_TIM_OC_DelayElapsedCallback+0x15f6>
					(abs((int)ik_x-(int)new_x)>1)||
 8003432:	4b42      	ldr	r3, [pc, #264]	; (800353c <HAL_TIM_OC_DelayElapsedCallback+0x16dc>)
 8003434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003438:	f7fd fb36 	bl	8000aa8 <__aeabi_d2iz>
 800343c:	4604      	mov	r4, r0
 800343e:	4b4b      	ldr	r3, [pc, #300]	; (800356c <HAL_TIM_OC_DelayElapsedCallback+0x170c>)
 8003440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003444:	f7fd fb30 	bl	8000aa8 <__aeabi_d2iz>
 8003448:	1a23      	subs	r3, r4, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	bfb8      	it	lt
 800344e:	425b      	neglt	r3, r3
					((abs((int)ik_z-(int)new_z)>1)||
 8003450:	2b01      	cmp	r3, #1
 8003452:	f341 8163 	ble.w	800471c <HAL_TIM_OC_DelayElapsedCallback+0x28bc>
					new_z = new_z+(ik_z-z)*2.0/(float)max_xyz;
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_TIM_OC_DelayElapsedCallback+0x16ec>)
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	ee07 0a90 	vmov	s15, r0
 800345e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003462:	ee17 0a90 	vmov	r0, s15
 8003466:	f7fd f817 	bl	8000498 <__aeabi_f2d>
 800346a:	4604      	mov	r4, r0
 800346c:	460d      	mov	r5, r1
 800346e:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_TIM_OC_DelayElapsedCallback+0x16e4>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	4640      	mov	r0, r8
 8003476:	4649      	mov	r1, r9
 8003478:	f7fc feae 	bl	80001d8 <__aeabi_dsub>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	f7fc feac 	bl	80001dc <__adddf3>
 8003484:	4622      	mov	r2, r4
 8003486:	462b      	mov	r3, r5
 8003488:	f7fd f988 	bl	800079c <__aeabi_ddiv>
 800348c:	4632      	mov	r2, r6
 800348e:	463b      	mov	r3, r7
 8003490:	f7fc fea4 	bl	80001dc <__adddf3>
 8003494:	4680      	mov	r8, r0
 8003496:	4689      	mov	r9, r1
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_TIM_OC_DelayElapsedCallback+0x1708>)
 800349a:	e9c3 8900 	strd	r8, r9, [r3]
					new_x = new_x+(ik_x-x)*2.0/(float)max_xyz;
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_TIM_OC_DelayElapsedCallback+0x16dc>)
 80034a0:	ed93 9b00 	vldr	d9, [r3]
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_TIM_OC_DelayElapsedCallback+0x16e8>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	ec51 0b19 	vmov	r0, r1, d9
 80034ae:	f7fc fe93 	bl	80001d8 <__aeabi_dsub>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	f7fc fe91 	bl	80001dc <__adddf3>
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	f7fd f96d 	bl	800079c <__aeabi_ddiv>
 80034c2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800356c <HAL_TIM_OC_DelayElapsedCallback+0x170c>
 80034c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80034ca:	f7fc fe87 	bl	80001dc <__adddf3>
 80034ce:	e9cd 0100 	strd	r0, r1, [sp]
 80034d2:	e9cb 0100 	strd	r0, r1, [fp]
					new_y = new_y+(ik_y-y)*2.0/(float)max_xyz;
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_TIM_OC_DelayElapsedCallback+0x16e0>)
 80034d8:	ed93 8b00 	vldr	d8, [r3]
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_TIM_OC_DelayElapsedCallback+0x1710>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	ec51 0b18 	vmov	r0, r1, d8
 80034e6:	f7fc fe77 	bl	80001d8 <__aeabi_dsub>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	f7fc fe75 	bl	80001dc <__adddf3>
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	f7fd f951 	bl	800079c <__aeabi_ddiv>
 80034fa:	4d1e      	ldr	r5, [pc, #120]	; (8003574 <HAL_TIM_OC_DelayElapsedCallback+0x1714>)
 80034fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003500:	f7fc fe6c 	bl	80001dc <__adddf3>
 8003504:	4606      	mov	r6, r0
 8003506:	460f      	mov	r7, r1
 8003508:	e9c5 6700 	strd	r6, r7, [r5]
					instruct[4][0] = (int)ik_z;
 800350c:	4c1a      	ldr	r4, [pc, #104]	; (8003578 <HAL_TIM_OC_DelayElapsedCallback+0x1718>)
 800350e:	f8a4 a058 	strh.w	sl, [r4, #88]	; 0x58
					instruct[4][1] = (int)ik_x;
 8003512:	ec51 0b19 	vmov	r0, r1, d9
 8003516:	e035      	b.n	8003584 <HAL_TIM_OC_DelayElapsedCallback+0x1724>
 8003518:	eb8d8234 	.word	0xeb8d8234
 800351c:	3f79f5df 	.word	0x3f79f5df
 8003520:	c63f1412 	.word	0xc63f1412
 8003524:	404ca5dc 	.word	0x404ca5dc
 8003528:	e61ab219 	.word	0xe61ab219
 800352c:	40cedc00 	.word	0x40cedc00
 8003530:	20002b00 	.word	0x20002b00
 8003534:	20002b08 	.word	0x20002b08
 8003538:	200032e0 	.word	0x200032e0
 800353c:	200032c0 	.word	0x200032c0
 8003540:	200032d8 	.word	0x200032d8
 8003544:	20002f00 	.word	0x20002f00
 8003548:	20002ef0 	.word	0x20002ef0
 800354c:	20002e84 	.word	0x20002e84
 8003550:	20002e58 	.word	0x20002e58
 8003554:	20002bc8 	.word	0x20002bc8
 8003558:	20002e60 	.word	0x20002e60
 800355c:	20002bcc 	.word	0x20002bcc
 8003560:	20002e68 	.word	0x20002e68
 8003564:	20002bd0 	.word	0x20002bd0
 8003568:	20002e98 	.word	0x20002e98
 800356c:	20002e88 	.word	0x20002e88
 8003570:	20002ef8 	.word	0x20002ef8
 8003574:	20002e90 	.word	0x20002e90
 8003578:	20000000 	.word	0x20000000
 800357c:	e58cb733 	.word	0xe58cb733
 8003580:	3f7b82a7 	.word	0x3f7b82a7
 8003584:	f7fd fa90 	bl	8000aa8 <__aeabi_d2iz>
 8003588:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
					instruct[4][2] = (int)ik_y;
 800358c:	ec51 0b18 	vmov	r0, r1, d8
 8003590:	f7fd fa8a 	bl	8000aa8 <__aeabi_d2iz>
 8003594:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
					instruct[4][8] = (int)new_z;
 8003598:	4640      	mov	r0, r8
 800359a:	4649      	mov	r1, r9
 800359c:	f7fd fa84 	bl	8000aa8 <__aeabi_d2iz>
 80035a0:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
					instruct[4][9] = (int)new_x;
 80035a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035a8:	f7fd fa7e 	bl	8000aa8 <__aeabi_d2iz>
 80035ac:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
					instruct[4][10] = (int)new_y;
 80035b0:	4630      	mov	r0, r6
 80035b2:	4639      	mov	r1, r7
 80035b4:	f7fd fa78 	bl	8000aa8 <__aeabi_d2iz>
 80035b8:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
					double new_L3 = sqrt(new_z*new_z+new_x*new_x+new_y*new_y);
 80035bc:	4642      	mov	r2, r8
 80035be:	464b      	mov	r3, r9
 80035c0:	4640      	mov	r0, r8
 80035c2:	4649      	mov	r1, r9
 80035c4:	f7fc ffc0 	bl	8000548 <__aeabi_dmul>
 80035c8:	4680      	mov	r8, r0
 80035ca:	4689      	mov	r9, r1
 80035cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	f7fc ffb8 	bl	8000548 <__aeabi_dmul>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4640      	mov	r0, r8
 80035de:	4649      	mov	r1, r9
 80035e0:	f7fc fdfc 	bl	80001dc <__adddf3>
 80035e4:	4680      	mov	r8, r0
 80035e6:	4689      	mov	r9, r1
 80035e8:	4632      	mov	r2, r6
 80035ea:	463b      	mov	r3, r7
 80035ec:	4630      	mov	r0, r6
 80035ee:	4639      	mov	r1, r7
 80035f0:	f7fc ffaa 	bl	8000548 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4640      	mov	r0, r8
 80035fa:	4649      	mov	r1, r9
 80035fc:	f7fc fdee 	bl	80001dc <__adddf3>
 8003600:	ec41 0b10 	vmov	d0, r0, r1
 8003604:	f005 f804 	bl	8008610 <sqrt>
 8003608:	ed8d 0b00 	vstr	d0, [sp]
					ik_a1 = atan2(new_y,new_x)*57.2958/0.006338;
 800360c:	ed9b 1b00 	vldr	d1, [fp]
 8003610:	ed95 0b00 	vldr	d0, [r5]
 8003614:	f004 fffa 	bl	800860c <atan2>
 8003618:	ec51 0b10 	vmov	r0, r1, d0
 800361c:	a3c8      	add	r3, pc, #800	; (adr r3, 8003940 <HAL_TIM_OC_DelayElapsedCallback+0x1ae0>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fc ff91 	bl	8000548 <__aeabi_dmul>
 8003626:	a3d0      	add	r3, pc, #832	; (adr r3, 8003968 <HAL_TIM_OC_DelayElapsedCallback+0x1b08>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fd f8b6 	bl	800079c <__aeabi_ddiv>
 8003630:	4acf      	ldr	r2, [pc, #828]	; (8003970 <HAL_TIM_OC_DelayElapsedCallback+0x1b10>)
 8003632:	e9c2 0100 	strd	r0, r1, [r2]
					ik_a2 = (atan2(new_z,sqrt(new_x*new_x+new_y*new_y))+acos((L1*L1+new_L3*new_L3-L2*L2)/(2.0*L1*new_L3)))*57.2958/0.0067164;
 8003636:	4bcf      	ldr	r3, [pc, #828]	; (8003974 <HAL_TIM_OC_DelayElapsedCallback+0x1b14>)
 8003638:	ed93 8b00 	vldr	d8, [r3]
 800363c:	e9db 0100 	ldrd	r0, r1, [fp]
 8003640:	e9d5 8900 	ldrd	r8, r9, [r5]
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	f7fc ff7e 	bl	8000548 <__aeabi_dmul>
 800364c:	4606      	mov	r6, r0
 800364e:	460f      	mov	r7, r1
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc ff76 	bl	8000548 <__aeabi_dmul>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4630      	mov	r0, r6
 8003662:	4639      	mov	r1, r7
 8003664:	f7fc fdba 	bl	80001dc <__adddf3>
 8003668:	ec41 0b10 	vmov	d0, r0, r1
 800366c:	f004 ffd0 	bl	8008610 <sqrt>
 8003670:	eeb0 1a40 	vmov.f32	s2, s0
 8003674:	eef0 1a60 	vmov.f32	s3, s1
 8003678:	eeb0 0a48 	vmov.f32	s0, s16
 800367c:	eef0 0a68 	vmov.f32	s1, s17
 8003680:	f004 ffc4 	bl	800860c <atan2>
 8003684:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003688:	4abb      	ldr	r2, [pc, #748]	; (8003978 <HAL_TIM_OC_DelayElapsedCallback+0x1b18>)
 800368a:	e9d2 6700 	ldrd	r6, r7, [r2]
 800368e:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003692:	4642      	mov	r2, r8
 8003694:	464b      	mov	r3, r9
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	f7fc ff55 	bl	8000548 <__aeabi_dmul>
 800369e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036a2:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8003998 <HAL_TIM_OC_DelayElapsedCallback+0x1b38>
 80036a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80036aa:	4632      	mov	r2, r6
 80036ac:	463b      	mov	r3, r7
 80036ae:	4630      	mov	r0, r6
 80036b0:	4639      	mov	r1, r7
 80036b2:	f7fc ff49 	bl	8000548 <__aeabi_dmul>
 80036b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036ba:	f7fc fd8f 	bl	80001dc <__adddf3>
 80036be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80036c2:	4642      	mov	r2, r8
 80036c4:	464b      	mov	r3, r9
 80036c6:	4640      	mov	r0, r8
 80036c8:	4649      	mov	r1, r9
 80036ca:	f7fc ff3d 	bl	8000548 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036d6:	f7fc fd7f 	bl	80001d8 <__aeabi_dsub>
 80036da:	4680      	mov	r8, r0
 80036dc:	4689      	mov	r9, r1
 80036de:	4632      	mov	r2, r6
 80036e0:	463b      	mov	r3, r7
 80036e2:	4630      	mov	r0, r6
 80036e4:	4639      	mov	r1, r7
 80036e6:	f7fc fd79 	bl	80001dc <__adddf3>
 80036ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036ee:	f7fc ff2b 	bl	8000548 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4640      	mov	r0, r8
 80036f8:	4649      	mov	r1, r9
 80036fa:	f7fd f84f 	bl	800079c <__aeabi_ddiv>
 80036fe:	ec41 0b10 	vmov	d0, r0, r1
 8003702:	f004 ff49 	bl	8008598 <acos>
 8003706:	ec53 2b10 	vmov	r2, r3, d0
 800370a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800370e:	f7fc fd65 	bl	80001dc <__adddf3>
 8003712:	a38b      	add	r3, pc, #556	; (adr r3, 8003940 <HAL_TIM_OC_DelayElapsedCallback+0x1ae0>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fc ff16 	bl	8000548 <__aeabi_dmul>
 800371c:	a38a      	add	r3, pc, #552	; (adr r3, 8003948 <HAL_TIM_OC_DelayElapsedCallback+0x1ae8>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fd f83b 	bl	800079c <__aeabi_ddiv>
 8003726:	4e95      	ldr	r6, [pc, #596]	; (800397c <HAL_TIM_OC_DelayElapsedCallback+0x1b1c>)
 8003728:	e9c6 0100 	strd	r0, r1, [r6]
					ik_a3 = acos((L1*L1-new_L3*new_L3+L2*L2)/(2.0*L1*L2))*57.2958/0.0113924;
 800372c:	4a92      	ldr	r2, [pc, #584]	; (8003978 <HAL_TIM_OC_DelayElapsedCallback+0x1b18>)
 800372e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8003732:	e9da 8900 	ldrd	r8, r9, [sl]
 8003736:	4632      	mov	r2, r6
 8003738:	463b      	mov	r3, r7
 800373a:	4630      	mov	r0, r6
 800373c:	4639      	mov	r1, r7
 800373e:	f7fc ff03 	bl	8000548 <__aeabi_dmul>
 8003742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003746:	f7fc fd47 	bl	80001d8 <__aeabi_dsub>
 800374a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800374e:	4642      	mov	r2, r8
 8003750:	464b      	mov	r3, r9
 8003752:	4640      	mov	r0, r8
 8003754:	4649      	mov	r1, r9
 8003756:	f7fc fef7 	bl	8000548 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003762:	f7fc fd3b 	bl	80001dc <__adddf3>
 8003766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800376a:	4632      	mov	r2, r6
 800376c:	463b      	mov	r3, r7
 800376e:	4630      	mov	r0, r6
 8003770:	4639      	mov	r1, r7
 8003772:	f7fc fd33 	bl	80001dc <__adddf3>
 8003776:	4642      	mov	r2, r8
 8003778:	464b      	mov	r3, r9
 800377a:	f7fc fee5 	bl	8000548 <__aeabi_dmul>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003786:	f7fd f809 	bl	800079c <__aeabi_ddiv>
 800378a:	ec41 0b10 	vmov	d0, r0, r1
 800378e:	f004 ff03 	bl	8008598 <acos>
 8003792:	ec51 0b10 	vmov	r0, r1, d0
 8003796:	a36a      	add	r3, pc, #424	; (adr r3, 8003940 <HAL_TIM_OC_DelayElapsedCallback+0x1ae0>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc fed4 	bl	8000548 <__aeabi_dmul>
 80037a0:	a36b      	add	r3, pc, #428	; (adr r3, 8003950 <HAL_TIM_OC_DelayElapsedCallback+0x1af0>)
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f7fc fff9 	bl	800079c <__aeabi_ddiv>
 80037aa:	4f75      	ldr	r7, [pc, #468]	; (8003980 <HAL_TIM_OC_DelayElapsedCallback+0x1b20>)
 80037ac:	e9c7 0100 	strd	r0, r1, [r7]
					ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 80037b0:	e9db 0100 	ldrd	r0, r1, [fp]
 80037b4:	e9d5 8900 	ldrd	r8, r9, [r5]
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	f7fc fec4 	bl	8000548 <__aeabi_dmul>
 80037c0:	4606      	mov	r6, r0
 80037c2:	460f      	mov	r7, r1
 80037c4:	4642      	mov	r2, r8
 80037c6:	464b      	mov	r3, r9
 80037c8:	4640      	mov	r0, r8
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fc febc 	bl	8000548 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4630      	mov	r0, r6
 80037d6:	4639      	mov	r1, r7
 80037d8:	f7fc fd00 	bl	80001dc <__adddf3>
 80037dc:	ec41 0b10 	vmov	d0, r0, r1
 80037e0:	f004 ff16 	bl	8008610 <sqrt>
 80037e4:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_TIM_OC_DelayElapsedCallback+0x1b14>)
 80037e6:	ed93 1b00 	vldr	d1, [r3]
 80037ea:	f004 ff0f 	bl	800860c <atan2>
 80037ee:	ed8d 0b04 	vstr	d0, [sp, #16]
							acos((L2*L2+new_L3*new_L3-L1*L1)/(2.0*L2*new_L3)))*57.2958/0.0156673)*4.0/90.0;
 80037f2:	e9da 6700 	ldrd	r6, r7, [sl]
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_TIM_OC_DelayElapsedCallback+0x1b18>)
 80037f8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80037fc:	4632      	mov	r2, r6
 80037fe:	463b      	mov	r3, r7
 8003800:	4630      	mov	r0, r6
 8003802:	4639      	mov	r1, r7
 8003804:	f7fc fea0 	bl	8000548 <__aeabi_dmul>
 8003808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800380c:	f7fc fce6 	bl	80001dc <__adddf3>
 8003810:	4680      	mov	r8, r0
 8003812:	4689      	mov	r9, r1
 8003814:	4652      	mov	r2, sl
 8003816:	465b      	mov	r3, fp
 8003818:	4650      	mov	r0, sl
 800381a:	4659      	mov	r1, fp
 800381c:	f7fc fe94 	bl	8000548 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4640      	mov	r0, r8
 8003826:	4649      	mov	r1, r9
 8003828:	f7fc fcd6 	bl	80001d8 <__aeabi_dsub>
 800382c:	4680      	mov	r8, r0
 800382e:	4689      	mov	r9, r1
 8003830:	4632      	mov	r2, r6
 8003832:	463b      	mov	r3, r7
 8003834:	4630      	mov	r0, r6
 8003836:	4639      	mov	r1, r7
 8003838:	f7fc fcd0 	bl	80001dc <__adddf3>
 800383c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003840:	f7fc fe82 	bl	8000548 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4640      	mov	r0, r8
 800384a:	4649      	mov	r1, r9
 800384c:	f7fc ffa6 	bl	800079c <__aeabi_ddiv>
 8003850:	ec41 0b10 	vmov	d0, r0, r1
 8003854:	f004 fea0 	bl	8008598 <acos>
 8003858:	ec53 2b10 	vmov	r2, r3, d0
					ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 800385c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003860:	f7fc fcbc 	bl	80001dc <__adddf3>
							acos((L2*L2+new_L3*new_L3-L1*L1)/(2.0*L2*new_L3)))*57.2958/0.0156673)*4.0/90.0;
 8003864:	a336      	add	r3, pc, #216	; (adr r3, 8003940 <HAL_TIM_OC_DelayElapsedCallback+0x1ae0>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fe6d 	bl	8000548 <__aeabi_dmul>
 800386e:	a33a      	add	r3, pc, #232	; (adr r3, 8003958 <HAL_TIM_OC_DelayElapsedCallback+0x1af8>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc ff92 	bl	800079c <__aeabi_ddiv>
					ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 8003878:	a339      	add	r3, pc, #228	; (adr r3, 8003960 <HAL_TIM_OC_DelayElapsedCallback+0x1b00>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fcab 	bl	80001d8 <__aeabi_dsub>
 8003882:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
							acos((L2*L2+new_L3*new_L3-L1*L1)/(2.0*L2*new_L3)))*57.2958/0.0156673)*4.0/90.0;
 8003886:	2200      	movs	r2, #0
 8003888:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <HAL_TIM_OC_DelayElapsedCallback+0x1b24>)
 800388a:	f7fc fe5d 	bl	8000548 <__aeabi_dmul>
 800388e:	2200      	movs	r2, #0
 8003890:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <HAL_TIM_OC_DelayElapsedCallback+0x1b28>)
 8003892:	f7fc ff83 	bl	800079c <__aeabi_ddiv>
 8003896:	4680      	mov	r8, r0
 8003898:	4689      	mov	r9, r1
					ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <HAL_TIM_OC_DelayElapsedCallback+0x1b2c>)
 800389c:	e9c3 8900 	strd	r8, r9, [r3]
					instruct[4][3] = (int)(ik_a1*0.006338);
 80038a0:	4a33      	ldr	r2, [pc, #204]	; (8003970 <HAL_TIM_OC_DelayElapsedCallback+0x1b10>)
 80038a2:	e9d2 6700 	ldrd	r6, r7, [r2]
 80038a6:	a330      	add	r3, pc, #192	; (adr r3, 8003968 <HAL_TIM_OC_DelayElapsedCallback+0x1b08>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	4630      	mov	r0, r6
 80038ae:	4639      	mov	r1, r7
 80038b0:	f7fc fe4a 	bl	8000548 <__aeabi_dmul>
 80038b4:	f7fd f8f8 	bl	8000aa8 <__aeabi_d2iz>
 80038b8:	f8a4 005e 	strh.w	r0, [r4, #94]	; 0x5e
					instruct[4][4] = (int)(ik_a2*0.0067164);
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_TIM_OC_DelayElapsedCallback+0x1b1c>)
 80038be:	ed93 8b00 	vldr	d8, [r3]
 80038c2:	a321      	add	r3, pc, #132	; (adr r3, 8003948 <HAL_TIM_OC_DelayElapsedCallback+0x1ae8>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	ec51 0b18 	vmov	r0, r1, d8
 80038cc:	f7fc fe3c 	bl	8000548 <__aeabi_dmul>
 80038d0:	f7fd f8ea 	bl	8000aa8 <__aeabi_d2iz>
 80038d4:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
					instruct[4][5] = (int)(ik_a3*0.0113924);
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <HAL_TIM_OC_DelayElapsedCallback+0x1b20>)
 80038da:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80038de:	a31c      	add	r3, pc, #112	; (adr r3, 8003950 <HAL_TIM_OC_DelayElapsedCallback+0x1af0>)
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	4650      	mov	r0, sl
 80038e6:	4659      	mov	r1, fp
 80038e8:	f7fc fe2e 	bl	8000548 <__aeabi_dmul>
 80038ec:	f7fd f8dc 	bl	8000aa8 <__aeabi_d2iz>
 80038f0:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
					instruct[4][6] = (int)(ik_a4*0.0156673);
 80038f4:	a318      	add	r3, pc, #96	; (adr r3, 8003958 <HAL_TIM_OC_DelayElapsedCallback+0x1af8>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	f7fc fe23 	bl	8000548 <__aeabi_dmul>
 8003902:	f7fd f8d1 	bl	8000aa8 <__aeabi_d2iz>
 8003906:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
					instruct[4][7] = (int)new_L3;
 800390a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800390e:	f7fd f8cb 	bl	8000aa8 <__aeabi_d2iz>
 8003912:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
					max_pulse = max(abs((int)ik_a1-cur_pulse1),abs((int)ik_a2-cur_pulse2));
 8003916:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <HAL_TIM_OC_DelayElapsedCallback+0x1b30>)
 8003918:	681d      	ldr	r5, [r3, #0]
 800391a:	4630      	mov	r0, r6
 800391c:	4639      	mov	r1, r7
 800391e:	f7fd f8c3 	bl	8000aa8 <__aeabi_d2iz>
 8003922:	eba0 0905 	sub.w	r9, r0, r5
 8003926:	f1b9 0f00 	cmp.w	r9, #0
 800392a:	bfb8      	it	lt
 800392c:	f1c9 0900 	rsblt	r9, r9, #0
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_TIM_OC_DelayElapsedCallback+0x1b34>)
 8003932:	681e      	ldr	r6, [r3, #0]
 8003934:	ec51 0b18 	vmov	r0, r1, d8
 8003938:	e030      	b.n	800399c <HAL_TIM_OC_DelayElapsedCallback+0x1b3c>
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w
 8003940:	c63f1412 	.word	0xc63f1412
 8003944:	404ca5dc 	.word	0x404ca5dc
 8003948:	e58cb733 	.word	0xe58cb733
 800394c:	3f7b82a7 	.word	0x3f7b82a7
 8003950:	0b6233d2 	.word	0x0b6233d2
 8003954:	3f8754e6 	.word	0x3f8754e6
 8003958:	b4776b71 	.word	0xb4776b71
 800395c:	3f900b16 	.word	0x3f900b16
 8003960:	d9542442 	.word	0xd9542442
 8003964:	40b67072 	.word	0x40b67072
 8003968:	eb8d8234 	.word	0xeb8d8234
 800396c:	3f79f5df 	.word	0x3f79f5df
 8003970:	20002e58 	.word	0x20002e58
 8003974:	20002e98 	.word	0x20002e98
 8003978:	20002b00 	.word	0x20002b00
 800397c:	20002e60 	.word	0x20002e60
 8003980:	20002e68 	.word	0x20002e68
 8003984:	40100000 	.word	0x40100000
 8003988:	40568000 	.word	0x40568000
 800398c:	20002e70 	.word	0x20002e70
 8003990:	20002bc8 	.word	0x20002bc8
 8003994:	20002bcc 	.word	0x20002bcc
 8003998:	20002b08 	.word	0x20002b08
 800399c:	f7fd f884 	bl	8000aa8 <__aeabi_d2iz>
 80039a0:	eba0 0806 	sub.w	r8, r0, r6
 80039a4:	f1b8 0f00 	cmp.w	r8, #0
 80039a8:	bfb8      	it	lt
 80039aa:	f1c8 0800 	rsblt	r8, r8, #0
					max_pulse = max(max_pulse,abs((int)(ik_a3-180.0/0.0113924)-cur_pulse3));
 80039ae:	4bd8      	ldr	r3, [pc, #864]	; (8003d10 <HAL_TIM_OC_DelayElapsedCallback+0x1eb0>)
 80039b0:	681f      	ldr	r7, [r3, #0]
 80039b2:	a3d1      	add	r3, pc, #836	; (adr r3, 8003cf8 <HAL_TIM_OC_DelayElapsedCallback+0x1e98>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	4650      	mov	r0, sl
 80039ba:	4659      	mov	r1, fp
 80039bc:	f7fc fc0c 	bl	80001d8 <__aeabi_dsub>
 80039c0:	f7fd f872 	bl	8000aa8 <__aeabi_d2iz>
 80039c4:	1bc2      	subs	r2, r0, r7
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	bfb8      	it	lt
 80039ca:	4252      	neglt	r2, r2
	if(a>b)return a;
 80039cc:	464b      	mov	r3, r9
 80039ce:	45c1      	cmp	r9, r8
 80039d0:	bfb8      	it	lt
 80039d2:	4643      	movlt	r3, r8
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bfb8      	it	lt
 80039d8:	4613      	movlt	r3, r2
					max_pulse = max(max_pulse,abs((int)(ik_a3-180.0/0.0113924)-cur_pulse3));
 80039da:	49ce      	ldr	r1, [pc, #824]	; (8003d14 <HAL_TIM_OC_DelayElapsedCallback+0x1eb4>)
 80039dc:	600b      	str	r3, [r1, #0]
					step1_scale=abs((int)ik_a1-cur_pulse1)/(float)max_pulse;
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e6:	ee07 9a10 	vmov	s14, r9
 80039ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039f2:	4bc9      	ldr	r3, [pc, #804]	; (8003d18 <HAL_TIM_OC_DelayElapsedCallback+0x1eb8>)
 80039f4:	edc3 6a00 	vstr	s13, [r3]
					step2_scale=abs((int)ik_a2-cur_pulse2)/(float)max_pulse;
 80039f8:	ee07 8a10 	vmov	s14, r8
 80039fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a04:	4bc5      	ldr	r3, [pc, #788]	; (8003d1c <HAL_TIM_OC_DelayElapsedCallback+0x1ebc>)
 8003a06:	edc3 6a00 	vstr	s13, [r3]
					step3_scale=abs((int)(ik_a3-180.0/0.0113924)-cur_pulse3)/(float)max_pulse;
 8003a0a:	ee07 2a10 	vmov	s14, r2
 8003a0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a16:	4bc2      	ldr	r3, [pc, #776]	; (8003d20 <HAL_TIM_OC_DelayElapsedCallback+0x1ec0>)
 8003a18:	edc3 6a00 	vstr	s13, [r3]
					step_acc = instruct[instruct_step][3];
 8003a1c:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8003d50 <HAL_TIM_OC_DelayElapsedCallback+0x1ef0>
 8003a20:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8003d40 <HAL_TIM_OC_DelayElapsedCallback+0x1ee0>
 8003a24:	f8db 3000 	ldr.w	r3, [fp]
 8003a28:	f04f 0a16 	mov.w	sl, #22
 8003a2c:	fb0a 4303 	mla	r3, sl, r3, r4
 8003a30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3c:	edc8 7a00 	vstr	s15, [r8]
							(cur_pulse1-start_pul1)*(cur_pulse1-start_pul1)+
 8003a40:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8003d64 <HAL_TIM_OC_DelayElapsedCallback+0x1f04>
 8003a44:	f8d9 3000 	ldr.w	r3, [r9]
 8003a48:	1aeb      	subs	r3, r5, r3
							(cur_pulse2-start_pul2)*(cur_pulse2-start_pul2)+
 8003a4a:	4db6      	ldr	r5, [pc, #728]	; (8003d24 <HAL_TIM_OC_DelayElapsedCallback+0x1ec4>)
 8003a4c:	682a      	ldr	r2, [r5, #0]
 8003a4e:	1ab2      	subs	r2, r6, r2
							(cur_pulse3-start_pul3)*(cur_pulse3-start_pul3)));
 8003a50:	4eb5      	ldr	r6, [pc, #724]	; (8003d28 <HAL_TIM_OC_DelayElapsedCallback+0x1ec8>)
 8003a52:	6830      	ldr	r0, [r6, #0]
 8003a54:	1a38      	subs	r0, r7, r0
							(cur_pulse2-start_pul2)*(cur_pulse2-start_pul2)+
 8003a56:	fb02 f202 	mul.w	r2, r2, r2
							(cur_pulse1-start_pul1)*(cur_pulse1-start_pul1)+
 8003a5a:	fb03 2303 	mla	r3, r3, r3, r2
					float distance_start =(sqrt(
 8003a5e:	fb00 3000 	mla	r0, r0, r0, r3
 8003a62:	f7fc fd07 	bl	8000474 <__aeabi_i2d>
 8003a66:	ec41 0b10 	vmov	d0, r0, r1
 8003a6a:	f004 fdd1 	bl	8008610 <sqrt>
 8003a6e:	ec51 0b10 	vmov	r0, r1, d0
 8003a72:	f7fd f841 	bl	8000af8 <__aeabi_d2f>
 8003a76:	4607      	mov	r7, r0
							(start_pul1-instruct[instruct_step][4])*(start_pul1-instruct[instruct_step][4])+
 8003a78:	f8db 3000 	ldr.w	r3, [fp]
 8003a7c:	fb0a 4a03 	mla	sl, sl, r3, r4
 8003a80:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8003a84:	f8d9 3000 	ldr.w	r3, [r9]
 8003a88:	1a9b      	subs	r3, r3, r2
							(start_pul2-instruct[instruct_step][5])*(start_pul2-instruct[instruct_step][5])+
 8003a8a:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
 8003a8e:	682a      	ldr	r2, [r5, #0]
 8003a90:	1a52      	subs	r2, r2, r1
							(start_pul3-instruct[instruct_step][6])*(start_pul3-instruct[instruct_step][6])));
 8003a92:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
 8003a96:	6830      	ldr	r0, [r6, #0]
 8003a98:	1a40      	subs	r0, r0, r1
							(start_pul2-instruct[instruct_step][5])*(start_pul2-instruct[instruct_step][5])+
 8003a9a:	fb02 f202 	mul.w	r2, r2, r2
							(start_pul1-instruct[instruct_step][4])*(start_pul1-instruct[instruct_step][4])+
 8003a9e:	fb03 2303 	mla	r3, r3, r3, r2
					float distance_all =(sqrt(
 8003aa2:	fb00 3000 	mla	r0, r0, r0, r3
 8003aa6:	f7fc fce5 	bl	8000474 <__aeabi_i2d>
 8003aaa:	ec41 0b10 	vmov	d0, r0, r1
 8003aae:	f004 fdaf 	bl	8008610 <sqrt>
 8003ab2:	ec51 0b10 	vmov	r0, r1, d0
 8003ab6:	f7fd f81f 	bl	8000af8 <__aeabi_d2f>
 8003aba:	4605      	mov	r5, r0
					float speed_start = distance_start*sqrt((step_acc/100.0)*instruct[3][5]/5000.0)+3;
 8003abc:	f8d8 0000 	ldr.w	r0, [r8]
 8003ac0:	f7fc fcea 	bl	8000498 <__aeabi_f2d>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4b99      	ldr	r3, [pc, #612]	; (8003d2c <HAL_TIM_OC_DelayElapsedCallback+0x1ecc>)
 8003ac8:	f7fc fe68 	bl	800079c <__aeabi_ddiv>
 8003acc:	4680      	mov	r8, r0
 8003ace:	4689      	mov	r9, r1
 8003ad0:	f9b4 004c 	ldrsh.w	r0, [r4, #76]	; 0x4c
 8003ad4:	f7fc fcce 	bl	8000474 <__aeabi_i2d>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4640      	mov	r0, r8
 8003ade:	4649      	mov	r1, r9
 8003ae0:	f7fc fd32 	bl	8000548 <__aeabi_dmul>
 8003ae4:	a386      	add	r3, pc, #536	; (adr r3, 8003d00 <HAL_TIM_OC_DelayElapsedCallback+0x1ea0>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fe57 	bl	800079c <__aeabi_ddiv>
 8003aee:	ec41 0b10 	vmov	d0, r0, r1
 8003af2:	f004 fd8d 	bl	8008610 <sqrt>
 8003af6:	ec59 8b10 	vmov	r8, r9, d0
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7fc fccc 	bl	8000498 <__aeabi_f2d>
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	f7fc fd20 	bl	8000548 <__aeabi_dmul>
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4b89      	ldr	r3, [pc, #548]	; (8003d30 <HAL_TIM_OC_DelayElapsedCallback+0x1ed0>)
 8003b0c:	f7fc fb66 	bl	80001dc <__adddf3>
 8003b10:	f7fc fff2 	bl	8000af8 <__aeabi_d2f>
 8003b14:	ee08 0a10 	vmov	s16, r0
					if(((int)(speed_start)<instruct_speed)&&((int)(distance_start)<(int)(distance_all/2.0)))
 8003b18:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003b1c:	ee17 2a90 	vmov	r2, s15
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_TIM_OC_DelayElapsedCallback+0x1ed4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	da13      	bge.n	8003b50 <HAL_TIM_OC_DelayElapsedCallback+0x1cf0>
 8003b28:	ee07 7a90 	vmov	s15, r7
 8003b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b30:	ee17 7a90 	vmov	r7, s15
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7fc fcaf 	bl	8000498 <__aeabi_f2d>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4b7e      	ldr	r3, [pc, #504]	; (8003d38 <HAL_TIM_OC_DelayElapsedCallback+0x1ed8>)
 8003b3e:	f7fc fd03 	bl	8000548 <__aeabi_dmul>
 8003b42:	f7fc ffb1 	bl	8000aa8 <__aeabi_d2iz>
 8003b46:	4287      	cmp	r7, r0
						step_speed = speed_start;
 8003b48:	bfbc      	itt	lt
 8003b4a:	4b7c      	ldrlt	r3, [pc, #496]	; (8003d3c <HAL_TIM_OC_DelayElapsedCallback+0x1edc>)
 8003b4c:	ed83 8a00 	vstrlt	s16, [r3]
							(cur_pulse1-instruct[instruct_step][4])*(cur_pulse1-instruct[instruct_step][4])+
 8003b50:	4b7b      	ldr	r3, [pc, #492]	; (8003d40 <HAL_TIM_OC_DelayElapsedCallback+0x1ee0>)
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	4c7b      	ldr	r4, [pc, #492]	; (8003d44 <HAL_TIM_OC_DelayElapsedCallback+0x1ee4>)
 8003b56:	2316      	movs	r3, #22
 8003b58:	fb03 4101 	mla	r1, r3, r1, r4
 8003b5c:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 8003b60:	4b79      	ldr	r3, [pc, #484]	; (8003d48 <HAL_TIM_OC_DelayElapsedCallback+0x1ee8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	1a9b      	subs	r3, r3, r2
							(cur_pulse2-instruct[instruct_step][5])*(cur_pulse2-instruct[instruct_step][5])+
 8003b66:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8003b6a:	4a78      	ldr	r2, [pc, #480]	; (8003d4c <HAL_TIM_OC_DelayElapsedCallback+0x1eec>)
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	1a12      	subs	r2, r2, r0
							(cur_pulse3-instruct[instruct_step][6])*(cur_pulse3-instruct[instruct_step][6])));
 8003b70:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8003b74:	4866      	ldr	r0, [pc, #408]	; (8003d10 <HAL_TIM_OC_DelayElapsedCallback+0x1eb0>)
 8003b76:	6800      	ldr	r0, [r0, #0]
 8003b78:	1a40      	subs	r0, r0, r1
							(cur_pulse2-instruct[instruct_step][5])*(cur_pulse2-instruct[instruct_step][5])+
 8003b7a:	fb02 f202 	mul.w	r2, r2, r2
							(cur_pulse1-instruct[instruct_step][4])*(cur_pulse1-instruct[instruct_step][4])+
 8003b7e:	fb03 2303 	mla	r3, r3, r3, r2
					float distance_end =(sqrt(
 8003b82:	fb00 3000 	mla	r0, r0, r0, r3
 8003b86:	f7fc fc75 	bl	8000474 <__aeabi_i2d>
 8003b8a:	ec41 0b10 	vmov	d0, r0, r1
 8003b8e:	f004 fd3f 	bl	8008610 <sqrt>
 8003b92:	ec51 0b10 	vmov	r0, r1, d0
 8003b96:	f7fc ffaf 	bl	8000af8 <__aeabi_d2f>
 8003b9a:	4606      	mov	r6, r0
					float speed_end = distance_end*sqrt((step_acc/100.0)*instruct[3][5]/5000.0)+3;
 8003b9c:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <HAL_TIM_OC_DelayElapsedCallback+0x1ef0>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	f7fc fc7a 	bl	8000498 <__aeabi_f2d>
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_TIM_OC_DelayElapsedCallback+0x1ecc>)
 8003ba8:	f7fc fdf8 	bl	800079c <__aeabi_ddiv>
 8003bac:	4680      	mov	r8, r0
 8003bae:	4689      	mov	r9, r1
 8003bb0:	f9b4 004c 	ldrsh.w	r0, [r4, #76]	; 0x4c
 8003bb4:	f7fc fc5e 	bl	8000474 <__aeabi_i2d>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	f7fc fcc2 	bl	8000548 <__aeabi_dmul>
 8003bc4:	a34e      	add	r3, pc, #312	; (adr r3, 8003d00 <HAL_TIM_OC_DelayElapsedCallback+0x1ea0>)
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	f7fc fde7 	bl	800079c <__aeabi_ddiv>
 8003bce:	ec41 0b10 	vmov	d0, r0, r1
 8003bd2:	f004 fd1d 	bl	8008610 <sqrt>
 8003bd6:	ec59 8b10 	vmov	r8, r9, d0
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7fc fc5c 	bl	8000498 <__aeabi_f2d>
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	f7fc fcb0 	bl	8000548 <__aeabi_dmul>
 8003be8:	2200      	movs	r2, #0
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <HAL_TIM_OC_DelayElapsedCallback+0x1ed0>)
 8003bec:	f7fc faf6 	bl	80001dc <__adddf3>
 8003bf0:	f7fc ff82 	bl	8000af8 <__aeabi_d2f>
 8003bf4:	ee08 0a10 	vmov	s16, r0
					if(((int)(speed_end)<instruct_speed)&&((int)(distance_end)<(int)(distance_all/2.0)))
 8003bf8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003bfc:	ee17 2a90 	vmov	r2, s15
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <HAL_TIM_OC_DelayElapsedCallback+0x1ed4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	da13      	bge.n	8003c30 <HAL_TIM_OC_DelayElapsedCallback+0x1dd0>
 8003c08:	ee07 6a90 	vmov	s15, r6
 8003c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c10:	ee17 6a90 	vmov	r6, s15
 8003c14:	4628      	mov	r0, r5
 8003c16:	f7fc fc3f 	bl	8000498 <__aeabi_f2d>
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_TIM_OC_DelayElapsedCallback+0x1ed8>)
 8003c1e:	f7fc fc93 	bl	8000548 <__aeabi_dmul>
 8003c22:	f7fc ff41 	bl	8000aa8 <__aeabi_d2iz>
 8003c26:	4286      	cmp	r6, r0
						step_speed = speed_end;
 8003c28:	bfbc      	itt	lt
 8003c2a:	4b44      	ldrlt	r3, [pc, #272]	; (8003d3c <HAL_TIM_OC_DelayElapsedCallback+0x1edc>)
 8003c2c:	ed83 8a00 	vstrlt	s16, [r3]
				instruct[0][2] = (int)step_speed;
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <HAL_TIM_OC_DelayElapsedCallback+0x1edc>)
 8003c32:	ed93 8a00 	vldr	s16, [r3]
 8003c36:	4c43      	ldr	r4, [pc, #268]	; (8003d44 <HAL_TIM_OC_DelayElapsedCallback+0x1ee4>)
 8003c38:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003c3c:	ee17 3a90 	vmov	r3, s15
 8003c40:	80a3      	strh	r3, [r4, #4]
				instruct[0][3] = (int)(((step_acc)*instruct[3][5]/100.0));
 8003c42:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c4e:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <HAL_TIM_OC_DelayElapsedCallback+0x1ef0>)
 8003c50:	ed93 7a00 	vldr	s14, [r3]
 8003c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c58:	ee17 0a90 	vmov	r0, s15
 8003c5c:	f7fc fc1c 	bl	8000498 <__aeabi_f2d>
 8003c60:	2200      	movs	r2, #0
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_TIM_OC_DelayElapsedCallback+0x1ecc>)
 8003c64:	f7fc fd9a 	bl	800079c <__aeabi_ddiv>
 8003c68:	f7fc ff1e 	bl	8000aa8 <__aeabi_d2iz>
 8003c6c:	80e0      	strh	r0, [r4, #6]
				step=step+step_speed/255.0;
 8003c6e:	4e39      	ldr	r6, [pc, #228]	; (8003d54 <HAL_TIM_OC_DelayElapsedCallback+0x1ef4>)
 8003c70:	6830      	ldr	r0, [r6, #0]
 8003c72:	f7fc fc11 	bl	8000498 <__aeabi_f2d>
 8003c76:	4604      	mov	r4, r0
 8003c78:	460d      	mov	r5, r1
 8003c7a:	ee18 0a10 	vmov	r0, s16
 8003c7e:	f7fc fc0b 	bl	8000498 <__aeabi_f2d>
 8003c82:	a321      	add	r3, pc, #132	; (adr r3, 8003d08 <HAL_TIM_OC_DelayElapsedCallback+0x1ea8>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fd88 	bl	800079c <__aeabi_ddiv>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc faa2 	bl	80001dc <__adddf3>
 8003c98:	f7fc ff2e 	bl	8000af8 <__aeabi_d2f>
 8003c9c:	ee07 0a90 	vmov	s15, r0
 8003ca0:	6030      	str	r0, [r6, #0]
				if((step1_err!=(int)(step*step1_scale))&&(abs(foc_cut[0])<800)){
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_TIM_OC_DelayElapsedCallback+0x1eb8>)
 8003ca4:	ed93 7a00 	vldr	s14, [r3]
 8003ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cb0:	ee17 3a90 	vmov	r3, s15
 8003cb4:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <HAL_TIM_OC_DelayElapsedCallback+0x1ef8>)
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d017      	beq.n	8003cec <HAL_TIM_OC_DelayElapsedCallback+0x1e8c>
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_TIM_OC_DelayElapsedCallback+0x1efc>)
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8003cc4:	f240 613e 	movw	r1, #1598	; 0x63e
 8003cc8:	428a      	cmp	r2, r1
 8003cca:	d80f      	bhi.n	8003cec <HAL_TIM_OC_DelayElapsedCallback+0x1e8c>
					step1_err=(int)(step*step1_scale);
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_TIM_OC_DelayElapsedCallback+0x1ef8>)
 8003cce:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse1<(int)ik_a1){
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <HAL_TIM_OC_DelayElapsedCallback+0x1f00>)
 8003cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd8:	f7fc fee6 	bl	8000aa8 <__aeabi_d2iz>
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_TIM_OC_DelayElapsedCallback+0x1ee8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4298      	cmp	r0, r3
 8003ce2:	f300 852f 	bgt.w	8004744 <HAL_TIM_OC_DelayElapsedCallback+0x28e4>
					else if (cur_pulse1>(int)ik_a1){
 8003ce6:	4298      	cmp	r0, r3
 8003ce8:	f2c0 853e 	blt.w	8004768 <HAL_TIM_OC_DelayElapsedCallback+0x2908>
				if((step2_err!=(int)(step*step2_scale))&&(abs(foc_cut[1])<800)){
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_TIM_OC_DelayElapsedCallback+0x1ef4>)
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	e039      	b.n	8003d68 <HAL_TIM_OC_DelayElapsedCallback+0x1f08>
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	e61ab219 	.word	0xe61ab219
 8003cfc:	40cedc00 	.word	0x40cedc00
 8003d00:	00000000 	.word	0x00000000
 8003d04:	40b38800 	.word	0x40b38800
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	406fe000 	.word	0x406fe000
 8003d10:	20002bd0 	.word	0x20002bd0
 8003d14:	20002e80 	.word	0x20002e80
 8003d18:	20002ea8 	.word	0x20002ea8
 8003d1c:	20002eb4 	.word	0x20002eb4
 8003d20:	20002ec0 	.word	0x20002ec0
 8003d24:	200032cc 	.word	0x200032cc
 8003d28:	200032b8 	.word	0x200032b8
 8003d2c:	40590000 	.word	0x40590000
 8003d30:	40080000 	.word	0x40080000
 8003d34:	20002e78 	.word	0x20002e78
 8003d38:	3fe00000 	.word	0x3fe00000
 8003d3c:	20002bec 	.word	0x20002bec
 8003d40:	20002af8 	.word	0x20002af8
 8003d44:	20000000 	.word	0x20000000
 8003d48:	20002bc8 	.word	0x20002bc8
 8003d4c:	20002bcc 	.word	0x20002bcc
 8003d50:	20002be8 	.word	0x20002be8
 8003d54:	20002be4 	.word	0x20002be4
 8003d58:	20002ea0 	.word	0x20002ea0
 8003d5c:	20003288 	.word	0x20003288
 8003d60:	20002e58 	.word	0x20002e58
 8003d64:	200032b4 	.word	0x200032b4
 8003d68:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_TIM_OC_DelayElapsedCallback+0x2098>)
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d76:	ee17 3a90 	vmov	r3, s15
 8003d7a:	4a60      	ldr	r2, [pc, #384]	; (8003efc <HAL_TIM_OC_DelayElapsedCallback+0x209c>)
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d017      	beq.n	8003db2 <HAL_TIM_OC_DelayElapsedCallback+0x1f52>
 8003d82:	4a5f      	ldr	r2, [pc, #380]	; (8003f00 <HAL_TIM_OC_DelayElapsedCallback+0x20a0>)
 8003d84:	6852      	ldr	r2, [r2, #4]
 8003d86:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8003d8a:	f240 613e 	movw	r1, #1598	; 0x63e
 8003d8e:	428a      	cmp	r2, r1
 8003d90:	d80f      	bhi.n	8003db2 <HAL_TIM_OC_DelayElapsedCallback+0x1f52>
					step2_err=(int)(step*step2_scale);
 8003d92:	4a5a      	ldr	r2, [pc, #360]	; (8003efc <HAL_TIM_OC_DelayElapsedCallback+0x209c>)
 8003d94:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse2<(int)ik_a2){
 8003d98:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_TIM_OC_DelayElapsedCallback+0x20a4>)
 8003d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d9e:	f7fc fe83 	bl	8000aa8 <__aeabi_d2iz>
 8003da2:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_TIM_OC_DelayElapsedCallback+0x20a8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4298      	cmp	r0, r3
 8003da8:	f300 84f0 	bgt.w	800478c <HAL_TIM_OC_DelayElapsedCallback+0x292c>
					else if (cur_pulse2>(int)ik_a2){
 8003dac:	4298      	cmp	r0, r3
 8003dae:	f2c0 8500 	blt.w	80047b2 <HAL_TIM_OC_DelayElapsedCallback+0x2952>
				if((step3_err!=(int)(step*step3_scale))&&(abs(foc_cut[2])<800))
 8003db2:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <HAL_TIM_OC_DelayElapsedCallback+0x20ac>)
 8003db4:	edd3 7a00 	vldr	s15, [r3]
 8003db8:	4b55      	ldr	r3, [pc, #340]	; (8003f10 <HAL_TIM_OC_DelayElapsedCallback+0x20b0>)
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dc6:	ee17 3a90 	vmov	r3, s15
 8003dca:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_TIM_OC_DelayElapsedCallback+0x20b4>)
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01c      	beq.n	8003e0c <HAL_TIM_OC_DelayElapsedCallback+0x1fac>
 8003dd2:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <HAL_TIM_OC_DelayElapsedCallback+0x20a0>)
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8003dda:	f240 613e 	movw	r1, #1598	; 0x63e
 8003dde:	428a      	cmp	r2, r1
 8003de0:	d814      	bhi.n	8003e0c <HAL_TIM_OC_DelayElapsedCallback+0x1fac>
					step3_err=(int)(step*step3_scale);
 8003de2:	4a4c      	ldr	r2, [pc, #304]	; (8003f14 <HAL_TIM_OC_DelayElapsedCallback+0x20b4>)
 8003de4:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse3<(int)(ik_a3-180.0/0.0113924))
 8003de8:	a341      	add	r3, pc, #260	; (adr r3, 8003ef0 <HAL_TIM_OC_DelayElapsedCallback+0x2090>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	494a      	ldr	r1, [pc, #296]	; (8003f18 <HAL_TIM_OC_DelayElapsedCallback+0x20b8>)
 8003df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003df4:	f7fc f9f0 	bl	80001d8 <__aeabi_dsub>
 8003df8:	f7fc fe56 	bl	8000aa8 <__aeabi_d2iz>
 8003dfc:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_TIM_OC_DelayElapsedCallback+0x20bc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4298      	cmp	r0, r3
 8003e02:	f300 84e9 	bgt.w	80047d8 <HAL_TIM_OC_DelayElapsedCallback+0x2978>
					else if (cur_pulse3>(int)(ik_a3-180.0/0.0113924))
 8003e06:	4298      	cmp	r0, r3
 8003e08:	f2c0 84f9 	blt.w	80047fe <HAL_TIM_OC_DelayElapsedCallback+0x299e>
				if((step4_err!=(int)(step*step4_scale))&&(abs(foc_cut[3])<800))
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_TIM_OC_DelayElapsedCallback+0x20ac>)
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_TIM_OC_DelayElapsedCallback+0x20c0>)
 8003e14:	ed93 7a00 	vldr	s14, [r3]
 8003e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e1c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003e20:	ee17 3a10 	vmov	r3, s14
 8003e24:	4a3f      	ldr	r2, [pc, #252]	; (8003f24 <HAL_TIM_OC_DelayElapsedCallback+0x20c4>)
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	f000 853f 	beq.w	80048ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4c>
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <HAL_TIM_OC_DelayElapsedCallback+0x20a0>)
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8003e36:	f240 613e 	movw	r1, #1598	; 0x63e
 8003e3a:	428a      	cmp	r2, r1
 8003e3c:	f200 8536 	bhi.w	80048ac <HAL_TIM_OC_DelayElapsedCallback+0x2a4c>
					step4_err=(int)(step*step4_scale);
 8003e40:	4a38      	ldr	r2, [pc, #224]	; (8003f24 <HAL_TIM_OC_DelayElapsedCallback+0x20c4>)
 8003e42:	ed82 7a00 	vstr	s14, [r2]
					if(cur_pulse4<instruct[instruct_step][7])
 8003e46:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <HAL_TIM_OC_DelayElapsedCallback+0x20c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_TIM_OC_DelayElapsedCallback+0x20cc>)
 8003e4c:	2116      	movs	r1, #22
 8003e4e:	fb01 2303 	mla	r3, r1, r3, r2
 8003e52:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_TIM_OC_DelayElapsedCallback+0x20d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	f300 84e2 	bgt.w	8004824 <HAL_TIM_OC_DelayElapsedCallback+0x29c4>
					else if (cur_pulse4>instruct[instruct_step][7])
 8003e60:	429a      	cmp	r2, r3
 8003e62:	f2c0 8501 	blt.w	8004868 <HAL_TIM_OC_DelayElapsedCallback+0x2a08>
				if((step5_err!=(int)(step*step5_scale))&&(step4_is_run==0)&&(abs(foc_cut[4])<800)){
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_TIM_OC_DelayElapsedCallback+0x20ac>)
 8003e68:	edd3 7a00 	vldr	s15, [r3]
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_TIM_OC_DelayElapsedCallback+0x20d4>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e7a:	ee17 3a90 	vmov	r3, s15
 8003e7e:	4a2e      	ldr	r2, [pc, #184]	; (8003f38 <HAL_TIM_OC_DelayElapsedCallback+0x20d8>)
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f000 8523 	beq.w	80048ce <HAL_TIM_OC_DelayElapsedCallback+0x2a6e>
 8003e88:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <HAL_TIM_OC_DelayElapsedCallback+0x20dc>)
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	f040 851e 	bne.w	80048ce <HAL_TIM_OC_DelayElapsedCallback+0x2a6e>
 8003e92:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_TIM_OC_DelayElapsedCallback+0x20a0>)
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	f202 321f 	addw	r2, r2, #799	; 0x31f
 8003e9a:	f240 613e 	movw	r1, #1598	; 0x63e
 8003e9e:	428a      	cmp	r2, r1
 8003ea0:	f200 8515 	bhi.w	80048ce <HAL_TIM_OC_DelayElapsedCallback+0x2a6e>
					step5_err=(int)(step*step5_scale);
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <HAL_TIM_OC_DelayElapsedCallback+0x20d8>)
 8003ea6:	6013      	str	r3, [r2, #0]
					if(cur_pulse5<instruct[instruct_step][8]){
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <HAL_TIM_OC_DelayElapsedCallback+0x20c8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_TIM_OC_DelayElapsedCallback+0x20cc>)
 8003eae:	2116      	movs	r1, #22
 8003eb0:	fb01 2303 	mla	r3, r1, r3, r2
 8003eb4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_TIM_OC_DelayElapsedCallback+0x20e0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	f300 8543 	bgt.w	8004948 <HAL_TIM_OC_DelayElapsedCallback+0x2ae8>
					else if (cur_pulse5>instruct[instruct_step][8]){
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	f280 8503 	bge.w	80048ce <HAL_TIM_OC_DelayElapsedCallback+0x2a6e>
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_SET);
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ece:	481d      	ldr	r0, [pc, #116]	; (8003f44 <HAL_TIM_OC_DelayElapsedCallback+0x20e4>)
 8003ed0:	f002 f8fe 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eda:	481b      	ldr	r0, [pc, #108]	; (8003f48 <HAL_TIM_OC_DelayElapsedCallback+0x20e8>)
 8003edc:	f002 f8f8 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse5--;
 8003ee0:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <HAL_TIM_OC_DelayElapsedCallback+0x20e0>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	f000 bcf1 	b.w	80048ce <HAL_TIM_OC_DelayElapsedCallback+0x2a6e>
 8003eec:	f3af 8000 	nop.w
 8003ef0:	e61ab219 	.word	0xe61ab219
 8003ef4:	40cedc00 	.word	0x40cedc00
 8003ef8:	20002eb4 	.word	0x20002eb4
 8003efc:	20002eac 	.word	0x20002eac
 8003f00:	20003288 	.word	0x20003288
 8003f04:	20002e60 	.word	0x20002e60
 8003f08:	20002bcc 	.word	0x20002bcc
 8003f0c:	20002be4 	.word	0x20002be4
 8003f10:	20002ec0 	.word	0x20002ec0
 8003f14:	20002eb8 	.word	0x20002eb8
 8003f18:	20002e68 	.word	0x20002e68
 8003f1c:	20002bd0 	.word	0x20002bd0
 8003f20:	20002ed0 	.word	0x20002ed0
 8003f24:	20002ec4 	.word	0x20002ec4
 8003f28:	20002af8 	.word	0x20002af8
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	20002bd4 	.word	0x20002bd4
 8003f34:	20002edc 	.word	0x20002edc
 8003f38:	20002ed4 	.word	0x20002ed4
 8003f3c:	20002ecc 	.word	0x20002ecc
 8003f40:	20002bd8 	.word	0x20002bd8
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40020400 	.word	0x40020400
						new_z = new_z+(ik_z-z)*2.0/(float)max_xyz;
 8003f4c:	ee07 0a90 	vmov	s15, r0
 8003f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f54:	ee17 0a90 	vmov	r0, s15
 8003f58:	f7fc fa9e 	bl	8000498 <__aeabi_f2d>
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	460d      	mov	r5, r1
 8003f60:	ec53 2b1b 	vmov	r2, r3, d11
 8003f64:	ec51 0b1a 	vmov	r0, r1, d10
 8003f68:	f7fc f936 	bl	80001d8 <__aeabi_dsub>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	f7fc f934 	bl	80001dc <__adddf3>
 8003f74:	4622      	mov	r2, r4
 8003f76:	462b      	mov	r3, r5
 8003f78:	f7fc fc10 	bl	800079c <__aeabi_ddiv>
 8003f7c:	4bd2      	ldr	r3, [pc, #840]	; (80042c8 <HAL_TIM_OC_DelayElapsedCallback+0x2468>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc f92b 	bl	80001dc <__adddf3>
 8003f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f8a:	4bcf      	ldr	r3, [pc, #828]	; (80042c8 <HAL_TIM_OC_DelayElapsedCallback+0x2468>)
 8003f8c:	e9c3 0100 	strd	r0, r1, [r3]
						new_x = new_x+(ik_x-x)*2.0/(float)max_xyz;
 8003f90:	4632      	mov	r2, r6
 8003f92:	463b      	mov	r3, r7
 8003f94:	ec51 0b19 	vmov	r0, r1, d9
 8003f98:	f7fc f91e 	bl	80001d8 <__aeabi_dsub>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	f7fc f91c 	bl	80001dc <__adddf3>
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	f7fc fbf8 	bl	800079c <__aeabi_ddiv>
 8003fac:	f8df b334 	ldr.w	fp, [pc, #820]	; 80042e4 <HAL_TIM_OC_DelayElapsedCallback+0x2484>
 8003fb0:	e9db 2300 	ldrd	r2, r3, [fp]
 8003fb4:	f7fc f912 	bl	80001dc <__adddf3>
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	e9cb 6700 	strd	r6, r7, [fp]
						new_y = new_y+(ik_y-y)*2.0/(float)max_xyz;
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	4653      	mov	r3, sl
 8003fc4:	ec51 0b18 	vmov	r0, r1, d8
 8003fc8:	f7fc f906 	bl	80001d8 <__aeabi_dsub>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	f7fc f904 	bl	80001dc <__adddf3>
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	f7fc fbe0 	bl	800079c <__aeabi_ddiv>
 8003fdc:	4cbb      	ldr	r4, [pc, #748]	; (80042cc <HAL_TIM_OC_DelayElapsedCallback+0x246c>)
 8003fde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003fe2:	f7fc f8fb 	bl	80001dc <__adddf3>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	460d      	mov	r5, r1
 8003fea:	4bb8      	ldr	r3, [pc, #736]	; (80042cc <HAL_TIM_OC_DelayElapsedCallback+0x246c>)
 8003fec:	e9c3 4500 	strd	r4, r5, [r3]
						instruct[4][0] = (int)ik_z;
 8003ff0:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80042e8 <HAL_TIM_OC_DelayElapsedCallback+0x2488>
 8003ff4:	f8aa 8058 	strh.w	r8, [sl, #88]	; 0x58
						instruct[4][1] = (int)ik_x;
 8003ff8:	9a02      	ldr	r2, [sp, #8]
 8003ffa:	f8aa 205a 	strh.w	r2, [sl, #90]	; 0x5a
						instruct[4][2] = (int)ik_y;
 8003ffe:	9a00      	ldr	r2, [sp, #0]
 8004000:	f8aa 205c 	strh.w	r2, [sl, #92]	; 0x5c
						instruct[4][8] = (int)new_z;
 8004004:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc fd4c 	bl	8000aa8 <__aeabi_d2iz>
 8004010:	f8aa 0068 	strh.w	r0, [sl, #104]	; 0x68
						instruct[4][9] = (int)new_x;
 8004014:	4630      	mov	r0, r6
 8004016:	4639      	mov	r1, r7
 8004018:	f7fc fd46 	bl	8000aa8 <__aeabi_d2iz>
 800401c:	f8aa 006a 	strh.w	r0, [sl, #106]	; 0x6a
						instruct[4][10] = (int)new_y;
 8004020:	4620      	mov	r0, r4
 8004022:	4629      	mov	r1, r5
 8004024:	f7fc fd40 	bl	8000aa8 <__aeabi_d2iz>
 8004028:	f8aa 006c 	strh.w	r0, [sl, #108]	; 0x6c
						double new_L3 = sqrt(new_z*new_z+new_x*new_x+new_y*new_y);
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	4640      	mov	r0, r8
 8004032:	4649      	mov	r1, r9
 8004034:	f7fc fa88 	bl	8000548 <__aeabi_dmul>
 8004038:	4680      	mov	r8, r0
 800403a:	4689      	mov	r9, r1
 800403c:	4632      	mov	r2, r6
 800403e:	463b      	mov	r3, r7
 8004040:	4630      	mov	r0, r6
 8004042:	4639      	mov	r1, r7
 8004044:	f7fc fa80 	bl	8000548 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4640      	mov	r0, r8
 800404e:	4649      	mov	r1, r9
 8004050:	f7fc f8c4 	bl	80001dc <__adddf3>
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
 8004058:	4622      	mov	r2, r4
 800405a:	462b      	mov	r3, r5
 800405c:	4620      	mov	r0, r4
 800405e:	4629      	mov	r1, r5
 8004060:	f7fc fa72 	bl	8000548 <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4630      	mov	r0, r6
 800406a:	4639      	mov	r1, r7
 800406c:	f7fc f8b6 	bl	80001dc <__adddf3>
 8004070:	ec41 0b10 	vmov	d0, r0, r1
 8004074:	f004 facc 	bl	8008610 <sqrt>
 8004078:	ed8d 0b00 	vstr	d0, [sp]
						ik_a1 = atan2(new_y,new_x)*57.2958/0.006338;
 800407c:	ed9b 1b00 	vldr	d1, [fp]
 8004080:	4c92      	ldr	r4, [pc, #584]	; (80042cc <HAL_TIM_OC_DelayElapsedCallback+0x246c>)
 8004082:	ed94 0b00 	vldr	d0, [r4]
 8004086:	f004 fac1 	bl	800860c <atan2>
 800408a:	ec51 0b10 	vmov	r0, r1, d0
 800408e:	a386      	add	r3, pc, #536	; (adr r3, 80042a8 <HAL_TIM_OC_DelayElapsedCallback+0x2448>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc fa58 	bl	8000548 <__aeabi_dmul>
 8004098:	a385      	add	r3, pc, #532	; (adr r3, 80042b0 <HAL_TIM_OC_DelayElapsedCallback+0x2450>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fb7d 	bl	800079c <__aeabi_ddiv>
 80040a2:	4a8b      	ldr	r2, [pc, #556]	; (80042d0 <HAL_TIM_OC_DelayElapsedCallback+0x2470>)
 80040a4:	e9c2 0100 	strd	r0, r1, [r2]
						ik_a2 = (atan2(new_z,sqrt(new_x*new_x+new_y*new_y))+acos((L1*L1+new_L3*new_L3-L2*L2)/(2*L1*new_L3)))*57.2958/0.0067164;
 80040a8:	4b87      	ldr	r3, [pc, #540]	; (80042c8 <HAL_TIM_OC_DelayElapsedCallback+0x2468>)
 80040aa:	ed93 8b00 	vldr	d8, [r3]
 80040ae:	e9db 0100 	ldrd	r0, r1, [fp]
 80040b2:	e9d4 6700 	ldrd	r6, r7, [r4]
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	f7fc fa45 	bl	8000548 <__aeabi_dmul>
 80040be:	4604      	mov	r4, r0
 80040c0:	460d      	mov	r5, r1
 80040c2:	4632      	mov	r2, r6
 80040c4:	463b      	mov	r3, r7
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc fa3d 	bl	8000548 <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc f881 	bl	80001dc <__adddf3>
 80040da:	ec41 0b10 	vmov	d0, r0, r1
 80040de:	f004 fa97 	bl	8008610 <sqrt>
 80040e2:	eeb0 1a40 	vmov.f32	s2, s0
 80040e6:	eef0 1a60 	vmov.f32	s3, s1
 80040ea:	eeb0 0a48 	vmov.f32	s0, s16
 80040ee:	eef0 0a68 	vmov.f32	s1, s17
 80040f2:	f004 fa8b 	bl	800860c <atan2>
 80040f6:	ec59 8b10 	vmov	r8, r9, d0
 80040fa:	4a76      	ldr	r2, [pc, #472]	; (80042d4 <HAL_TIM_OC_DelayElapsedCallback+0x2474>)
 80040fc:	e9d2 4500 	ldrd	r4, r5, [r2]
 8004100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	f7fc fa1e 	bl	8000548 <__aeabi_dmul>
 800410c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004110:	4e71      	ldr	r6, [pc, #452]	; (80042d8 <HAL_TIM_OC_DelayElapsedCallback+0x2478>)
 8004112:	e9d6 6700 	ldrd	r6, r7, [r6]
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	4620      	mov	r0, r4
 800411c:	4629      	mov	r1, r5
 800411e:	f7fc fa13 	bl	8000548 <__aeabi_dmul>
 8004122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004126:	f7fc f859 	bl	80001dc <__adddf3>
 800412a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	4630      	mov	r0, r6
 8004134:	4639      	mov	r1, r7
 8004136:	f7fc fa07 	bl	8000548 <__aeabi_dmul>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004142:	f7fc f849 	bl	80001d8 <__aeabi_dsub>
 8004146:	4606      	mov	r6, r0
 8004148:	460f      	mov	r7, r1
 800414a:	4622      	mov	r2, r4
 800414c:	462b      	mov	r3, r5
 800414e:	4620      	mov	r0, r4
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc f843 	bl	80001dc <__adddf3>
 8004156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800415a:	f7fc f9f5 	bl	8000548 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4630      	mov	r0, r6
 8004164:	4639      	mov	r1, r7
 8004166:	f7fc fb19 	bl	800079c <__aeabi_ddiv>
 800416a:	ec41 0b10 	vmov	d0, r0, r1
 800416e:	f004 fa13 	bl	8008598 <acos>
 8004172:	ec53 2b10 	vmov	r2, r3, d0
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	f7fc f82f 	bl	80001dc <__adddf3>
 800417e:	a34a      	add	r3, pc, #296	; (adr r3, 80042a8 <HAL_TIM_OC_DelayElapsedCallback+0x2448>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fc f9e0 	bl	8000548 <__aeabi_dmul>
 8004188:	a34b      	add	r3, pc, #300	; (adr r3, 80042b8 <HAL_TIM_OC_DelayElapsedCallback+0x2458>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc fb05 	bl	800079c <__aeabi_ddiv>
 8004192:	4d52      	ldr	r5, [pc, #328]	; (80042dc <HAL_TIM_OC_DelayElapsedCallback+0x247c>)
 8004194:	e9c5 0100 	strd	r0, r1, [r5]
						ik_a3 = acos((L1*L1-new_L3*new_L3+L2*L2)/(2*L1*L2))*57.2958/0.0113924;
 8004198:	494e      	ldr	r1, [pc, #312]	; (80042d4 <HAL_TIM_OC_DelayElapsedCallback+0x2474>)
 800419a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800419e:	4e4e      	ldr	r6, [pc, #312]	; (80042d8 <HAL_TIM_OC_DelayElapsedCallback+0x2478>)
 80041a0:	e9d6 8900 	ldrd	r8, r9, [r6]
 80041a4:	4622      	mov	r2, r4
 80041a6:	462b      	mov	r3, r5
 80041a8:	4620      	mov	r0, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	f7fc f9cc 	bl	8000548 <__aeabi_dmul>
 80041b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041b4:	f7fc f810 	bl	80001d8 <__aeabi_dsub>
 80041b8:	4606      	mov	r6, r0
 80041ba:	460f      	mov	r7, r1
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc f9c0 	bl	8000548 <__aeabi_dmul>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4630      	mov	r0, r6
 80041ce:	4639      	mov	r1, r7
 80041d0:	f7fc f804 	bl	80001dc <__adddf3>
 80041d4:	4606      	mov	r6, r0
 80041d6:	460f      	mov	r7, r1
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	4620      	mov	r0, r4
 80041de:	4629      	mov	r1, r5
 80041e0:	f7fb fffc 	bl	80001dc <__adddf3>
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	f7fc f9ae 	bl	8000548 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fc fad2 	bl	800079c <__aeabi_ddiv>
 80041f8:	ec41 0b10 	vmov	d0, r0, r1
 80041fc:	f004 f9cc 	bl	8008598 <acos>
 8004200:	ec51 0b10 	vmov	r0, r1, d0
 8004204:	a328      	add	r3, pc, #160	; (adr r3, 80042a8 <HAL_TIM_OC_DelayElapsedCallback+0x2448>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc f99d 	bl	8000548 <__aeabi_dmul>
 800420e:	a32c      	add	r3, pc, #176	; (adr r3, 80042c0 <HAL_TIM_OC_DelayElapsedCallback+0x2460>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f7fc fac2 	bl	800079c <__aeabi_ddiv>
 8004218:	4f31      	ldr	r7, [pc, #196]	; (80042e0 <HAL_TIM_OC_DelayElapsedCallback+0x2480>)
 800421a:	e9c7 0100 	strd	r0, r1, [r7]
						ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 800421e:	e9db 0100 	ldrd	r0, r1, [fp]
 8004222:	4c2a      	ldr	r4, [pc, #168]	; (80042cc <HAL_TIM_OC_DelayElapsedCallback+0x246c>)
 8004224:	e9d4 6700 	ldrd	r6, r7, [r4]
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	f7fc f98c 	bl	8000548 <__aeabi_dmul>
 8004230:	4604      	mov	r4, r0
 8004232:	460d      	mov	r5, r1
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	4630      	mov	r0, r6
 800423a:	4639      	mov	r1, r7
 800423c:	f7fc f984 	bl	8000548 <__aeabi_dmul>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fb ffc8 	bl	80001dc <__adddf3>
 800424c:	ec41 0b10 	vmov	d0, r0, r1
 8004250:	f004 f9de 	bl	8008610 <sqrt>
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_TIM_OC_DelayElapsedCallback+0x2468>)
 8004256:	ed93 1b00 	vldr	d1, [r3]
 800425a:	f004 f9d7 	bl	800860c <atan2>
 800425e:	ec59 8b10 	vmov	r8, r9, d0
								acos((L2*L2+new_L3*new_L3-L1*L1)/(2*L2*new_L3)))*57.2958/0.0156673)*4.0/90.0;
 8004262:	4e1d      	ldr	r6, [pc, #116]	; (80042d8 <HAL_TIM_OC_DelayElapsedCallback+0x2478>)
 8004264:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004268:	491a      	ldr	r1, [pc, #104]	; (80042d4 <HAL_TIM_OC_DelayElapsedCallback+0x2474>)
 800426a:	e9d1 6700 	ldrd	r6, r7, [r1]
 800426e:	4622      	mov	r2, r4
 8004270:	462b      	mov	r3, r5
 8004272:	4620      	mov	r0, r4
 8004274:	4629      	mov	r1, r5
 8004276:	f7fc f967 	bl	8000548 <__aeabi_dmul>
 800427a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800427e:	f7fb ffad 	bl	80001dc <__adddf3>
 8004282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004286:	4632      	mov	r2, r6
 8004288:	463b      	mov	r3, r7
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	f7fc f95b 	bl	8000548 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800429a:	f7fb ff9d 	bl	80001d8 <__aeabi_dsub>
 800429e:	4606      	mov	r6, r0
 80042a0:	460f      	mov	r7, r1
 80042a2:	e023      	b.n	80042ec <HAL_TIM_OC_DelayElapsedCallback+0x248c>
 80042a4:	f3af 8000 	nop.w
 80042a8:	c63f1412 	.word	0xc63f1412
 80042ac:	404ca5dc 	.word	0x404ca5dc
 80042b0:	eb8d8234 	.word	0xeb8d8234
 80042b4:	3f79f5df 	.word	0x3f79f5df
 80042b8:	e58cb733 	.word	0xe58cb733
 80042bc:	3f7b82a7 	.word	0x3f7b82a7
 80042c0:	0b6233d2 	.word	0x0b6233d2
 80042c4:	3f8754e6 	.word	0x3f8754e6
 80042c8:	20002e98 	.word	0x20002e98
 80042cc:	20002e90 	.word	0x20002e90
 80042d0:	20002e58 	.word	0x20002e58
 80042d4:	20002b00 	.word	0x20002b00
 80042d8:	20002b08 	.word	0x20002b08
 80042dc:	20002e60 	.word	0x20002e60
 80042e0:	20002e68 	.word	0x20002e68
 80042e4:	20002e88 	.word	0x20002e88
 80042e8:	20000000 	.word	0x20000000
 80042ec:	4622      	mov	r2, r4
 80042ee:	462b      	mov	r3, r5
 80042f0:	4620      	mov	r0, r4
 80042f2:	4629      	mov	r1, r5
 80042f4:	f7fb ff72 	bl	80001dc <__adddf3>
 80042f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042fc:	f7fc f924 	bl	8000548 <__aeabi_dmul>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4630      	mov	r0, r6
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc fa48 	bl	800079c <__aeabi_ddiv>
 800430c:	ec41 0b10 	vmov	d0, r0, r1
 8004310:	f004 f942 	bl	8008598 <acos>
 8004314:	ec53 2b10 	vmov	r2, r3, d0
						ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 8004318:	4640      	mov	r0, r8
 800431a:	4649      	mov	r1, r9
 800431c:	f7fb ff5e 	bl	80001dc <__adddf3>
								acos((L2*L2+new_L3*new_L3-L1*L1)/(2*L2*new_L3)))*57.2958/0.0156673)*4.0/90.0;
 8004320:	a3f8      	add	r3, pc, #992	; (adr r3, 8004704 <HAL_TIM_OC_DelayElapsedCallback+0x28a4>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f90f 	bl	8000548 <__aeabi_dmul>
 800432a:	a3d9      	add	r3, pc, #868	; (adr r3, 8004690 <HAL_TIM_OC_DelayElapsedCallback+0x2830>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fc fa34 	bl	800079c <__aeabi_ddiv>
						ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 8004334:	a3f5      	add	r3, pc, #980	; (adr r3, 800470c <HAL_TIM_OC_DelayElapsedCallback+0x28ac>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fb ff4d 	bl	80001d8 <__aeabi_dsub>
 800433e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
								acos((L2*L2+new_L3*new_L3-L1*L1)/(2*L2*new_L3)))*57.2958/0.0156673)*4.0/90.0;
 8004342:	2200      	movs	r2, #0
 8004344:	4bd8      	ldr	r3, [pc, #864]	; (80046a8 <HAL_TIM_OC_DelayElapsedCallback+0x2848>)
 8004346:	f7fc f8ff 	bl	8000548 <__aeabi_dmul>
 800434a:	2200      	movs	r2, #0
 800434c:	4bd7      	ldr	r3, [pc, #860]	; (80046ac <HAL_TIM_OC_DelayElapsedCallback+0x284c>)
 800434e:	f7fc fa25 	bl	800079c <__aeabi_ddiv>
 8004352:	4604      	mov	r4, r0
 8004354:	460d      	mov	r5, r1
						ik_a4 = -(-90.0/0.0156673 + (atan2(sqrt(new_x*new_x+new_y*new_y),new_z)+
 8004356:	4bd6      	ldr	r3, [pc, #856]	; (80046b0 <HAL_TIM_OC_DelayElapsedCallback+0x2850>)
 8004358:	e9c3 4500 	strd	r4, r5, [r3]
						instruct[4][3] = (int)(ik_a1*0.006338);
 800435c:	4ad5      	ldr	r2, [pc, #852]	; (80046b4 <HAL_TIM_OC_DelayElapsedCallback+0x2854>)
 800435e:	e9d2 8900 	ldrd	r8, r9, [r2]
 8004362:	a3c5      	add	r3, pc, #788	; (adr r3, 8004678 <HAL_TIM_OC_DelayElapsedCallback+0x2818>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	4640      	mov	r0, r8
 800436a:	4649      	mov	r1, r9
 800436c:	f7fc f8ec 	bl	8000548 <__aeabi_dmul>
 8004370:	f7fc fb9a 	bl	8000aa8 <__aeabi_d2iz>
 8004374:	f8aa 005e 	strh.w	r0, [sl, #94]	; 0x5e
						instruct[4][4] = (int)(ik_a2*0.0067164);
 8004378:	4bcf      	ldr	r3, [pc, #828]	; (80046b8 <HAL_TIM_OC_DelayElapsedCallback+0x2858>)
 800437a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800437e:	a3c0      	add	r3, pc, #768	; (adr r3, 8004680 <HAL_TIM_OC_DelayElapsedCallback+0x2820>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	4630      	mov	r0, r6
 8004386:	4639      	mov	r1, r7
 8004388:	f7fc f8de 	bl	8000548 <__aeabi_dmul>
 800438c:	f7fc fb8c 	bl	8000aa8 <__aeabi_d2iz>
 8004390:	f8aa 0060 	strh.w	r0, [sl, #96]	; 0x60
						instruct[4][5] = (int)(ik_a3*0.0113924);
 8004394:	4bc9      	ldr	r3, [pc, #804]	; (80046bc <HAL_TIM_OC_DelayElapsedCallback+0x285c>)
 8004396:	ed93 8b00 	vldr	d8, [r3]
 800439a:	a3bb      	add	r3, pc, #748	; (adr r3, 8004688 <HAL_TIM_OC_DelayElapsedCallback+0x2828>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	ec51 0b18 	vmov	r0, r1, d8
 80043a4:	f7fc f8d0 	bl	8000548 <__aeabi_dmul>
 80043a8:	f7fc fb7e 	bl	8000aa8 <__aeabi_d2iz>
 80043ac:	f8aa 0062 	strh.w	r0, [sl, #98]	; 0x62
						instruct[4][6] = (int)(ik_a4*0.0156673);
 80043b0:	a3b7      	add	r3, pc, #732	; (adr r3, 8004690 <HAL_TIM_OC_DelayElapsedCallback+0x2830>)
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7fc f8c5 	bl	8000548 <__aeabi_dmul>
 80043be:	f7fc fb73 	bl	8000aa8 <__aeabi_d2iz>
 80043c2:	f8aa 0064 	strh.w	r0, [sl, #100]	; 0x64
						max_pulse = max(abs((int)ik_a1-cur_pulse1),abs((int)ik_a2-cur_pulse2));
 80043c6:	4bbe      	ldr	r3, [pc, #760]	; (80046c0 <HAL_TIM_OC_DelayElapsedCallback+0x2860>)
 80043c8:	681c      	ldr	r4, [r3, #0]
 80043ca:	4640      	mov	r0, r8
 80043cc:	4649      	mov	r1, r9
 80043ce:	f7fc fb6b 	bl	8000aa8 <__aeabi_d2iz>
 80043d2:	eba0 0804 	sub.w	r8, r0, r4
 80043d6:	f1b8 0f00 	cmp.w	r8, #0
 80043da:	bfb8      	it	lt
 80043dc:	f1c8 0800 	rsblt	r8, r8, #0
 80043e0:	4bb8      	ldr	r3, [pc, #736]	; (80046c4 <HAL_TIM_OC_DelayElapsedCallback+0x2864>)
 80043e2:	681d      	ldr	r5, [r3, #0]
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc fb5e 	bl	8000aa8 <__aeabi_d2iz>
 80043ec:	1b47      	subs	r7, r0, r5
 80043ee:	2f00      	cmp	r7, #0
 80043f0:	bfb8      	it	lt
 80043f2:	427f      	neglt	r7, r7
						max_pulse = max(max_pulse,abs((int)(ik_a3-180.0/0.0113924)-cur_pulse3));
 80043f4:	4bb4      	ldr	r3, [pc, #720]	; (80046c8 <HAL_TIM_OC_DelayElapsedCallback+0x2868>)
 80043f6:	681e      	ldr	r6, [r3, #0]
 80043f8:	a3a7      	add	r3, pc, #668	; (adr r3, 8004698 <HAL_TIM_OC_DelayElapsedCallback+0x2838>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	ec51 0b18 	vmov	r0, r1, d8
 8004402:	f7fb fee9 	bl	80001d8 <__aeabi_dsub>
 8004406:	f7fc fb4f 	bl	8000aa8 <__aeabi_d2iz>
 800440a:	1b82      	subs	r2, r0, r6
 800440c:	2a00      	cmp	r2, #0
 800440e:	bfb8      	it	lt
 8004410:	4252      	neglt	r2, r2
	if(a>b)return a;
 8004412:	4643      	mov	r3, r8
 8004414:	45b8      	cmp	r8, r7
 8004416:	bfb8      	it	lt
 8004418:	463b      	movlt	r3, r7
 800441a:	4293      	cmp	r3, r2
 800441c:	bfb8      	it	lt
 800441e:	4613      	movlt	r3, r2
						max_pulse = max(max_pulse,abs((int)(ik_a3-180.0/0.0113924)-cur_pulse3));
 8004420:	49aa      	ldr	r1, [pc, #680]	; (80046cc <HAL_TIM_OC_DelayElapsedCallback+0x286c>)
 8004422:	600b      	str	r3, [r1, #0]
						step1_scale=abs((int)ik_a1-cur_pulse1)/(float)max_pulse;
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442c:	ee07 8a10 	vmov	s14, r8
 8004430:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004434:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004438:	4ba5      	ldr	r3, [pc, #660]	; (80046d0 <HAL_TIM_OC_DelayElapsedCallback+0x2870>)
 800443a:	edc3 6a00 	vstr	s13, [r3]
						step2_scale=abs((int)ik_a2-cur_pulse2)/(float)max_pulse;
 800443e:	ee07 7a10 	vmov	s14, r7
 8004442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004446:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800444a:	4ba2      	ldr	r3, [pc, #648]	; (80046d4 <HAL_TIM_OC_DelayElapsedCallback+0x2874>)
 800444c:	edc3 6a00 	vstr	s13, [r3]
						step3_scale=abs((int)(ik_a3-180.0/0.0113924)-cur_pulse3)/(float)max_pulse;
 8004450:	ee07 2a10 	vmov	s14, r2
 8004454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004458:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800445c:	4b9e      	ldr	r3, [pc, #632]	; (80046d8 <HAL_TIM_OC_DelayElapsedCallback+0x2878>)
 800445e:	edc3 6a00 	vstr	s13, [r3]
						step_acc = instruct[instruct_step][3];
 8004462:	4f9e      	ldr	r7, [pc, #632]	; (80046dc <HAL_TIM_OC_DelayElapsedCallback+0x287c>)
 8004464:	f8df b294 	ldr.w	fp, [pc, #660]	; 80046fc <HAL_TIM_OC_DelayElapsedCallback+0x289c>
 8004468:	f8db 3000 	ldr.w	r3, [fp]
 800446c:	f04f 0916 	mov.w	r9, #22
 8004470:	fb09 a303 	mla	r3, r9, r3, sl
 8004474:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004480:	edc7 7a00 	vstr	s15, [r7]
								(cur_pulse1-start_pul1)*(cur_pulse1-start_pul1)+
 8004484:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8004714 <HAL_TIM_OC_DelayElapsedCallback+0x28b4>
 8004488:	f8d8 3000 	ldr.w	r3, [r8]
 800448c:	1ae3      	subs	r3, r4, r3
								(cur_pulse2-start_pul2)*(cur_pulse2-start_pul2)+
 800448e:	4c94      	ldr	r4, [pc, #592]	; (80046e0 <HAL_TIM_OC_DelayElapsedCallback+0x2880>)
 8004490:	6822      	ldr	r2, [r4, #0]
 8004492:	1aaa      	subs	r2, r5, r2
								(cur_pulse3-start_pul3)*(cur_pulse3-start_pul3)));
 8004494:	4d93      	ldr	r5, [pc, #588]	; (80046e4 <HAL_TIM_OC_DelayElapsedCallback+0x2884>)
 8004496:	6828      	ldr	r0, [r5, #0]
 8004498:	1a30      	subs	r0, r6, r0
								(cur_pulse2-start_pul2)*(cur_pulse2-start_pul2)+
 800449a:	fb02 f202 	mul.w	r2, r2, r2
								(cur_pulse1-start_pul1)*(cur_pulse1-start_pul1)+
 800449e:	fb03 2303 	mla	r3, r3, r3, r2
						float distance_start =(sqrt(
 80044a2:	fb00 3000 	mla	r0, r0, r0, r3
 80044a6:	f7fb ffe5 	bl	8000474 <__aeabi_i2d>
 80044aa:	ec41 0b10 	vmov	d0, r0, r1
 80044ae:	f004 f8af 	bl	8008610 <sqrt>
 80044b2:	ec51 0b10 	vmov	r0, r1, d0
 80044b6:	f7fc fb1f 	bl	8000af8 <__aeabi_d2f>
 80044ba:	4606      	mov	r6, r0
								(start_pul1-instruct[instruct_step][4])*(start_pul1-instruct[instruct_step][4])+
 80044bc:	f8db 3000 	ldr.w	r3, [fp]
 80044c0:	fb09 a903 	mla	r9, r9, r3, sl
 80044c4:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80044c8:	f8d8 3000 	ldr.w	r3, [r8]
 80044cc:	1a9b      	subs	r3, r3, r2
								(start_pul2-instruct[instruct_step][5])*(start_pul2-instruct[instruct_step][5])+
 80044ce:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	1a52      	subs	r2, r2, r1
								(start_pul3-instruct[instruct_step][6])*(start_pul3-instruct[instruct_step][6])));
 80044d6:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
 80044da:	6828      	ldr	r0, [r5, #0]
 80044dc:	1a40      	subs	r0, r0, r1
								(start_pul2-instruct[instruct_step][5])*(start_pul2-instruct[instruct_step][5])+
 80044de:	fb02 f202 	mul.w	r2, r2, r2
								(start_pul1-instruct[instruct_step][4])*(start_pul1-instruct[instruct_step][4])+
 80044e2:	fb03 2303 	mla	r3, r3, r3, r2
						float distance_all =(sqrt(
 80044e6:	fb00 3000 	mla	r0, r0, r0, r3
 80044ea:	f7fb ffc3 	bl	8000474 <__aeabi_i2d>
 80044ee:	ec41 0b10 	vmov	d0, r0, r1
 80044f2:	f004 f88d 	bl	8008610 <sqrt>
 80044f6:	ec51 0b10 	vmov	r0, r1, d0
 80044fa:	f7fc fafd 	bl	8000af8 <__aeabi_d2f>
 80044fe:	4604      	mov	r4, r0
						float speed_start = distance_start*sqrt((step_acc/100.0)*instruct[3][5]/5000.0)+3;
 8004500:	6838      	ldr	r0, [r7, #0]
 8004502:	f7fb ffc9 	bl	8000498 <__aeabi_f2d>
 8004506:	2200      	movs	r2, #0
 8004508:	4b77      	ldr	r3, [pc, #476]	; (80046e8 <HAL_TIM_OC_DelayElapsedCallback+0x2888>)
 800450a:	f7fc f947 	bl	800079c <__aeabi_ddiv>
 800450e:	4680      	mov	r8, r0
 8004510:	4689      	mov	r9, r1
 8004512:	f9ba 004c 	ldrsh.w	r0, [sl, #76]	; 0x4c
 8004516:	f7fb ffad 	bl	8000474 <__aeabi_i2d>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fc f811 	bl	8000548 <__aeabi_dmul>
 8004526:	a35e      	add	r3, pc, #376	; (adr r3, 80046a0 <HAL_TIM_OC_DelayElapsedCallback+0x2840>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fc f936 	bl	800079c <__aeabi_ddiv>
 8004530:	ec41 0b10 	vmov	d0, r0, r1
 8004534:	f004 f86c 	bl	8008610 <sqrt>
 8004538:	ec59 8b10 	vmov	r8, r9, d0
 800453c:	4630      	mov	r0, r6
 800453e:	f7fb ffab 	bl	8000498 <__aeabi_f2d>
 8004542:	4642      	mov	r2, r8
 8004544:	464b      	mov	r3, r9
 8004546:	f7fb ffff 	bl	8000548 <__aeabi_dmul>
 800454a:	2200      	movs	r2, #0
 800454c:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_TIM_OC_DelayElapsedCallback+0x288c>)
 800454e:	f7fb fe45 	bl	80001dc <__adddf3>
 8004552:	f7fc fad1 	bl	8000af8 <__aeabi_d2f>
 8004556:	ee08 0a10 	vmov	s16, r0
						if(((int)(speed_start)<instruct_speed)&&((int)(distance_start)<(int)(distance_all/2.0)))
 800455a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800455e:	ee17 2a90 	vmov	r2, s15
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_TIM_OC_DelayElapsedCallback+0x2890>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	da13      	bge.n	8004592 <HAL_TIM_OC_DelayElapsedCallback+0x2732>
 800456a:	ee07 6a90 	vmov	s15, r6
 800456e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004572:	ee17 6a90 	vmov	r6, s15
 8004576:	4620      	mov	r0, r4
 8004578:	f7fb ff8e 	bl	8000498 <__aeabi_f2d>
 800457c:	2200      	movs	r2, #0
 800457e:	4b5d      	ldr	r3, [pc, #372]	; (80046f4 <HAL_TIM_OC_DelayElapsedCallback+0x2894>)
 8004580:	f7fb ffe2 	bl	8000548 <__aeabi_dmul>
 8004584:	f7fc fa90 	bl	8000aa8 <__aeabi_d2iz>
 8004588:	4286      	cmp	r6, r0
							step_speed = speed_start;
 800458a:	bfbc      	itt	lt
 800458c:	4b5a      	ldrlt	r3, [pc, #360]	; (80046f8 <HAL_TIM_OC_DelayElapsedCallback+0x2898>)
 800458e:	ed83 8a00 	vstrlt	s16, [r3]
								(cur_pulse1-instruct[instruct_step][4])*(cur_pulse1-instruct[instruct_step][4])+
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_TIM_OC_DelayElapsedCallback+0x289c>)
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	4d5a      	ldr	r5, [pc, #360]	; (8004700 <HAL_TIM_OC_DelayElapsedCallback+0x28a0>)
 8004598:	2316      	movs	r3, #22
 800459a:	fb03 5101 	mla	r1, r3, r1, r5
 800459e:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_TIM_OC_DelayElapsedCallback+0x2860>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1a9b      	subs	r3, r3, r2
								(cur_pulse2-instruct[instruct_step][5])*(cur_pulse2-instruct[instruct_step][5])+
 80045a8:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 80045ac:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <HAL_TIM_OC_DelayElapsedCallback+0x2864>)
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	1a12      	subs	r2, r2, r0
								(cur_pulse3-instruct[instruct_step][6])*(cur_pulse3-instruct[instruct_step][6])));
 80045b2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80045b6:	4844      	ldr	r0, [pc, #272]	; (80046c8 <HAL_TIM_OC_DelayElapsedCallback+0x2868>)
 80045b8:	6800      	ldr	r0, [r0, #0]
 80045ba:	1a40      	subs	r0, r0, r1
								(cur_pulse2-instruct[instruct_step][5])*(cur_pulse2-instruct[instruct_step][5])+
 80045bc:	fb02 f202 	mul.w	r2, r2, r2
								(cur_pulse1-instruct[instruct_step][4])*(cur_pulse1-instruct[instruct_step][4])+
 80045c0:	fb03 2303 	mla	r3, r3, r3, r2
						float distance_end =(sqrt(
 80045c4:	fb00 3000 	mla	r0, r0, r0, r3
 80045c8:	f7fb ff54 	bl	8000474 <__aeabi_i2d>
 80045cc:	ec41 0b10 	vmov	d0, r0, r1
 80045d0:	f004 f81e 	bl	8008610 <sqrt>
 80045d4:	ec51 0b10 	vmov	r0, r1, d0
 80045d8:	f7fc fa8e 	bl	8000af8 <__aeabi_d2f>
 80045dc:	4606      	mov	r6, r0
						float speed_end = distance_end*sqrt((step_acc/100.0)*instruct[3][5]/5000.0)+3;
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_TIM_OC_DelayElapsedCallback+0x287c>)
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f7fb ff59 	bl	8000498 <__aeabi_f2d>
 80045e6:	2200      	movs	r2, #0
 80045e8:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_TIM_OC_DelayElapsedCallback+0x2888>)
 80045ea:	f7fc f8d7 	bl	800079c <__aeabi_ddiv>
 80045ee:	4680      	mov	r8, r0
 80045f0:	4689      	mov	r9, r1
 80045f2:	f9b5 004c 	ldrsh.w	r0, [r5, #76]	; 0x4c
 80045f6:	f7fb ff3d 	bl	8000474 <__aeabi_i2d>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4640      	mov	r0, r8
 8004600:	4649      	mov	r1, r9
 8004602:	f7fb ffa1 	bl	8000548 <__aeabi_dmul>
 8004606:	a326      	add	r3, pc, #152	; (adr r3, 80046a0 <HAL_TIM_OC_DelayElapsedCallback+0x2840>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fc f8c6 	bl	800079c <__aeabi_ddiv>
 8004610:	ec41 0b10 	vmov	d0, r0, r1
 8004614:	f003 fffc 	bl	8008610 <sqrt>
 8004618:	ec59 8b10 	vmov	r8, r9, d0
 800461c:	4630      	mov	r0, r6
 800461e:	f7fb ff3b 	bl	8000498 <__aeabi_f2d>
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	f7fb ff8f 	bl	8000548 <__aeabi_dmul>
 800462a:	2200      	movs	r2, #0
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <HAL_TIM_OC_DelayElapsedCallback+0x288c>)
 800462e:	f7fb fdd5 	bl	80001dc <__adddf3>
 8004632:	f7fc fa61 	bl	8000af8 <__aeabi_d2f>
 8004636:	ee08 0a10 	vmov	s16, r0
						if(((int)(speed_end)<instruct_speed)&&((int)(distance_end)<(int)(distance_all/2.0)))
 800463a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800463e:	ee17 2a90 	vmov	r2, s15
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_TIM_OC_DelayElapsedCallback+0x2890>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	f6be aeb4 	bge.w	80033b4 <HAL_TIM_OC_DelayElapsedCallback+0x1554>
 800464c:	ee07 6a90 	vmov	s15, r6
 8004650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004654:	ee17 6a90 	vmov	r6, s15
 8004658:	4620      	mov	r0, r4
 800465a:	f7fb ff1d 	bl	8000498 <__aeabi_f2d>
 800465e:	2200      	movs	r2, #0
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_TIM_OC_DelayElapsedCallback+0x2894>)
 8004662:	f7fb ff71 	bl	8000548 <__aeabi_dmul>
 8004666:	f7fc fa1f 	bl	8000aa8 <__aeabi_d2iz>
 800466a:	4286      	cmp	r6, r0
							step_speed = speed_end;
 800466c:	bfbc      	itt	lt
 800466e:	4b22      	ldrlt	r3, [pc, #136]	; (80046f8 <HAL_TIM_OC_DelayElapsedCallback+0x2898>)
 8004670:	ed83 8a00 	vstrlt	s16, [r3]
 8004674:	e050      	b.n	8004718 <HAL_TIM_OC_DelayElapsedCallback+0x28b8>
 8004676:	bf00      	nop
 8004678:	eb8d8234 	.word	0xeb8d8234
 800467c:	3f79f5df 	.word	0x3f79f5df
 8004680:	e58cb733 	.word	0xe58cb733
 8004684:	3f7b82a7 	.word	0x3f7b82a7
 8004688:	0b6233d2 	.word	0x0b6233d2
 800468c:	3f8754e6 	.word	0x3f8754e6
 8004690:	b4776b71 	.word	0xb4776b71
 8004694:	3f900b16 	.word	0x3f900b16
 8004698:	e61ab219 	.word	0xe61ab219
 800469c:	40cedc00 	.word	0x40cedc00
 80046a0:	00000000 	.word	0x00000000
 80046a4:	40b38800 	.word	0x40b38800
 80046a8:	40100000 	.word	0x40100000
 80046ac:	40568000 	.word	0x40568000
 80046b0:	20002e70 	.word	0x20002e70
 80046b4:	20002e58 	.word	0x20002e58
 80046b8:	20002e60 	.word	0x20002e60
 80046bc:	20002e68 	.word	0x20002e68
 80046c0:	20002bc8 	.word	0x20002bc8
 80046c4:	20002bcc 	.word	0x20002bcc
 80046c8:	20002bd0 	.word	0x20002bd0
 80046cc:	20002e80 	.word	0x20002e80
 80046d0:	20002ea8 	.word	0x20002ea8
 80046d4:	20002eb4 	.word	0x20002eb4
 80046d8:	20002ec0 	.word	0x20002ec0
 80046dc:	20002be8 	.word	0x20002be8
 80046e0:	200032cc 	.word	0x200032cc
 80046e4:	200032b8 	.word	0x200032b8
 80046e8:	40590000 	.word	0x40590000
 80046ec:	40080000 	.word	0x40080000
 80046f0:	20002e78 	.word	0x20002e78
 80046f4:	3fe00000 	.word	0x3fe00000
 80046f8:	20002bec 	.word	0x20002bec
 80046fc:	20002af8 	.word	0x20002af8
 8004700:	20000000 	.word	0x20000000
 8004704:	c63f1412 	.word	0xc63f1412
 8004708:	404ca5dc 	.word	0x404ca5dc
 800470c:	d9542442 	.word	0xd9542442
 8004710:	40b67072 	.word	0x40b67072
 8004714:	200032b4 	.word	0x200032b4
 8004718:	f7fe be4c 	b.w	80033b4 <HAL_TIM_OC_DelayElapsedCallback+0x1554>
					(abs((int)ik_y-(int)new_y)>1)))
 800471c:	4b9e      	ldr	r3, [pc, #632]	; (8004998 <HAL_TIM_OC_DelayElapsedCallback+0x2b38>)
 800471e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004722:	f7fc f9c1 	bl	8000aa8 <__aeabi_d2iz>
 8004726:	4604      	mov	r4, r0
 8004728:	4b9c      	ldr	r3, [pc, #624]	; (800499c <HAL_TIM_OC_DelayElapsedCallback+0x2b3c>)
 800472a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800472e:	f7fc f9bb 	bl	8000aa8 <__aeabi_d2iz>
 8004732:	1a23      	subs	r3, r4, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	bfb8      	it	lt
 8004738:	425b      	neglt	r3, r3
					(abs((int)ik_x-(int)new_x)>1)||
 800473a:	2b01      	cmp	r3, #1
 800473c:	f73e ae8b 	bgt.w	8003456 <HAL_TIM_OC_DelayElapsedCallback+0x15f6>
 8004740:	f7ff ba76 	b.w	8003c30 <HAL_TIM_OC_DelayElapsedCallback+0x1dd0>
						HAL_GPIO_WritePin(STEP1_DIR_GPIO_Port,STEP1_DIR_Pin,GPIO_PIN_RESET);
 8004744:	4c96      	ldr	r4, [pc, #600]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 8004746:	2200      	movs	r2, #0
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	4620      	mov	r0, r4
 800474c:	f001 fcc0 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_RESET);
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004756:	4620      	mov	r0, r4
 8004758:	f001 fcba 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse1++;
 800475c:	4a91      	ldr	r2, [pc, #580]	; (80049a4 <HAL_TIM_OC_DelayElapsedCallback+0x2b44>)
 800475e:	6813      	ldr	r3, [r2, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	f7ff bac2 	b.w	8003cec <HAL_TIM_OC_DelayElapsedCallback+0x1e8c>
						HAL_GPIO_WritePin(STEP1_DIR_GPIO_Port,STEP1_DIR_Pin,GPIO_PIN_SET);
 8004768:	4c8d      	ldr	r4, [pc, #564]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 800476a:	2201      	movs	r2, #1
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	4620      	mov	r0, r4
 8004770:	f001 fcae 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP1_PUL_GPIO_Port,STEP1_PUL_Pin,GPIO_PIN_RESET);
 8004774:	2200      	movs	r2, #0
 8004776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800477a:	4620      	mov	r0, r4
 800477c:	f001 fca8 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse1--;
 8004780:	4a88      	ldr	r2, [pc, #544]	; (80049a4 <HAL_TIM_OC_DelayElapsedCallback+0x2b44>)
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	3b01      	subs	r3, #1
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	f7ff bab0 	b.w	8003cec <HAL_TIM_OC_DelayElapsedCallback+0x1e8c>
						HAL_GPIO_WritePin(STEP2_DIR_GPIO_Port,STEP2_DIR_Pin,GPIO_PIN_RESET);
 800478c:	4c84      	ldr	r4, [pc, #528]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 800478e:	2200      	movs	r2, #0
 8004790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004794:	4620      	mov	r0, r4
 8004796:	f001 fc9b 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_RESET);
 800479a:	2200      	movs	r2, #0
 800479c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047a0:	4620      	mov	r0, r4
 80047a2:	f001 fc95 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse2++;
 80047a6:	4a80      	ldr	r2, [pc, #512]	; (80049a8 <HAL_TIM_OC_DelayElapsedCallback+0x2b48>)
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	f7ff bb00 	b.w	8003db2 <HAL_TIM_OC_DelayElapsedCallback+0x1f52>
						HAL_GPIO_WritePin(STEP2_DIR_GPIO_Port,STEP2_DIR_Pin,GPIO_PIN_SET);
 80047b2:	4c7b      	ldr	r4, [pc, #492]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047ba:	4620      	mov	r0, r4
 80047bc:	f001 fc88 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP2_PUL_GPIO_Port,STEP2_PUL_Pin,GPIO_PIN_RESET);
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047c6:	4620      	mov	r0, r4
 80047c8:	f001 fc82 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse2--;
 80047cc:	4a76      	ldr	r2, [pc, #472]	; (80049a8 <HAL_TIM_OC_DelayElapsedCallback+0x2b48>)
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	f7ff baed 	b.w	8003db2 <HAL_TIM_OC_DelayElapsedCallback+0x1f52>
						HAL_GPIO_WritePin(STEP3_DIR_GPIO_Port,STEP3_DIR_Pin,GPIO_PIN_SET);
 80047d8:	4c71      	ldr	r4, [pc, #452]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 80047da:	2201      	movs	r2, #1
 80047dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047e0:	4620      	mov	r0, r4
 80047e2:	f001 fc75 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_RESET);
 80047e6:	2200      	movs	r2, #0
 80047e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ec:	4620      	mov	r0, r4
 80047ee:	f001 fc6f 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse3++;
 80047f2:	4a6e      	ldr	r2, [pc, #440]	; (80049ac <HAL_TIM_OC_DelayElapsedCallback+0x2b4c>)
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	f7ff bb07 	b.w	8003e0c <HAL_TIM_OC_DelayElapsedCallback+0x1fac>
						HAL_GPIO_WritePin(STEP3_DIR_GPIO_Port,STEP3_DIR_Pin,GPIO_PIN_RESET);
 80047fe:	4c68      	ldr	r4, [pc, #416]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 8004800:	2200      	movs	r2, #0
 8004802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004806:	4620      	mov	r0, r4
 8004808:	f001 fc62 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP3_PUL_GPIO_Port,STEP3_PUL_Pin,GPIO_PIN_RESET);
 800480c:	2200      	movs	r2, #0
 800480e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004812:	4620      	mov	r0, r4
 8004814:	f001 fc5c 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse3--;
 8004818:	4a64      	ldr	r2, [pc, #400]	; (80049ac <HAL_TIM_OC_DelayElapsedCallback+0x2b4c>)
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	3b01      	subs	r3, #1
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	f7ff baf4 	b.w	8003e0c <HAL_TIM_OC_DelayElapsedCallback+0x1fac>
						step4_is_run = 1;
 8004824:	2501      	movs	r5, #1
 8004826:	4b62      	ldr	r3, [pc, #392]	; (80049b0 <HAL_TIM_OC_DelayElapsedCallback+0x2b50>)
 8004828:	701d      	strb	r5, [r3, #0]
						HAL_GPIO_WritePin(STEP4_DIR_GPIO_Port,STEP4_DIR_Pin,GPIO_PIN_RESET);
 800482a:	4c5d      	ldr	r4, [pc, #372]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004832:	4620      	mov	r0, r4
 8004834:	f001 fc4c 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_SET);
 8004838:	462a      	mov	r2, r5
 800483a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800483e:	4620      	mov	r0, r4
 8004840:	f001 fc46 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse4++;
 8004844:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_TIM_OC_DelayElapsedCallback+0x2b54>)
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	442b      	add	r3, r5
 800484a:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_SET);
 800484c:	462a      	mov	r2, r5
 800484e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004852:	4620      	mov	r0, r4
 8004854:	f001 fc3c 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800485e:	4856      	ldr	r0, [pc, #344]	; (80049b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b58>)
 8004860:	f001 fc36 	bl	80060d0 <HAL_GPIO_WritePin>
 8004864:	f7ff baff 	b.w	8003e66 <HAL_TIM_OC_DelayElapsedCallback+0x2006>
						step4_is_run = 1;
 8004868:	2501      	movs	r5, #1
 800486a:	4b51      	ldr	r3, [pc, #324]	; (80049b0 <HAL_TIM_OC_DelayElapsedCallback+0x2b50>)
 800486c:	701d      	strb	r5, [r3, #0]
						HAL_GPIO_WritePin(STEP4_DIR_GPIO_Port,STEP4_DIR_Pin,GPIO_PIN_SET);
 800486e:	4c4c      	ldr	r4, [pc, #304]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 8004870:	462a      	mov	r2, r5
 8004872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004876:	4620      	mov	r0, r4
 8004878:	f001 fc2a 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP4_PUL_GPIO_Port,STEP4_PUL_Pin,GPIO_PIN_SET);
 800487c:	462a      	mov	r2, r5
 800487e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004882:	4620      	mov	r0, r4
 8004884:	f001 fc24 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse4--;
 8004888:	4a4a      	ldr	r2, [pc, #296]	; (80049b4 <HAL_TIM_OC_DelayElapsedCallback+0x2b54>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	3b01      	subs	r3, #1
 800488e:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_RESET);
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004896:	4620      	mov	r0, r4
 8004898:	f001 fc1a 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 800489c:	2200      	movs	r2, #0
 800489e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048a2:	4845      	ldr	r0, [pc, #276]	; (80049b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b58>)
 80048a4:	f001 fc14 	bl	80060d0 <HAL_GPIO_WritePin>
 80048a8:	f7ff badd 	b.w	8003e66 <HAL_TIM_OC_DelayElapsedCallback+0x2006>
				}else step4_is_run=0;
 80048ac:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <HAL_TIM_OC_DelayElapsedCallback+0x2b50>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
				if((step5_err!=(int)(step*step5_scale))&&(step4_is_run==0)&&(abs(foc_cut[4])<800)){
 80048b2:	4b42      	ldr	r3, [pc, #264]	; (80049bc <HAL_TIM_OC_DelayElapsedCallback+0x2b5c>)
 80048b4:	ed93 7a00 	vldr	s14, [r3]
 80048b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c0:	ee17 3a90 	vmov	r3, s15
 80048c4:	4a3e      	ldr	r2, [pc, #248]	; (80049c0 <HAL_TIM_OC_DelayElapsedCallback+0x2b60>)
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	f47f aae2 	bne.w	8003e92 <HAL_TIM_OC_DelayElapsedCallback+0x2032>
				if((step6_err!=(int)(step*step6_scale))&&(abs(foc_cut[5])<800)){
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_TIM_OC_DelayElapsedCallback+0x2b64>)
 80048d0:	edd3 7a00 	vldr	s15, [r3]
 80048d4:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <HAL_TIM_OC_DelayElapsedCallback+0x2b68>)
 80048d6:	ed93 7a00 	vldr	s14, [r3]
 80048da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	4a39      	ldr	r2, [pc, #228]	; (80049cc <HAL_TIM_OC_DelayElapsedCallback+0x2b6c>)
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f43e aa4d 	beq.w	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0xf2a>
 80048f0:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_TIM_OC_DelayElapsedCallback+0x2b70>)
 80048f2:	6952      	ldr	r2, [r2, #20]
 80048f4:	f202 321f 	addw	r2, r2, #799	; 0x31f
 80048f8:	f240 613e 	movw	r1, #1598	; 0x63e
 80048fc:	428a      	cmp	r2, r1
 80048fe:	f63e aa44 	bhi.w	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0xf2a>
					step6_err=(int)(step*step6_scale);
 8004902:	4a32      	ldr	r2, [pc, #200]	; (80049cc <HAL_TIM_OC_DelayElapsedCallback+0x2b6c>)
 8004904:	edc2 7a00 	vstr	s15, [r2]
					if(cur_pulse6<instruct[instruct_step][9]){
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_TIM_OC_DelayElapsedCallback+0x2b74>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a32      	ldr	r2, [pc, #200]	; (80049d8 <HAL_TIM_OC_DelayElapsedCallback+0x2b78>)
 800490e:	2116      	movs	r1, #22
 8004910:	fb01 2303 	mla	r3, r1, r3, r2
 8004914:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_TIM_OC_DelayElapsedCallback+0x2b7c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	dc24      	bgt.n	800496a <HAL_TIM_OC_DelayElapsedCallback+0x2b0a>
					else if (cur_pulse6>instruct[instruct_step][9]){
 8004920:	429a      	cmp	r2, r3
 8004922:	f6be aa32 	bge.w	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0xf2a>
						HAL_GPIO_WritePin(STEP6_DIR_GPIO_Port,STEP6_DIR_Pin,GPIO_PIN_RESET);
 8004926:	4c2e      	ldr	r4, [pc, #184]	; (80049e0 <HAL_TIM_OC_DelayElapsedCallback+0x2b80>)
 8004928:	2200      	movs	r2, #0
 800492a:	2101      	movs	r1, #1
 800492c:	4620      	mov	r0, r4
 800492e:	f001 fbcf 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_RESET);
 8004932:	2200      	movs	r2, #0
 8004934:	2102      	movs	r1, #2
 8004936:	4620      	mov	r0, r4
 8004938:	f001 fbca 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse6=cur_pulse6-6;
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <HAL_TIM_OC_DelayElapsedCallback+0x2b7c>)
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	3b06      	subs	r3, #6
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	f7fe ba21 	b.w	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0xf2a>
						HAL_GPIO_WritePin(STEP5_DIR_GPIO_Port,STEP5_DIR_Pin,GPIO_PIN_RESET);
 8004948:	2200      	movs	r2, #0
 800494a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800494e:	4814      	ldr	r0, [pc, #80]	; (80049a0 <HAL_TIM_OC_DelayElapsedCallback+0x2b40>)
 8004950:	f001 fbbe 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP5_PUL_GPIO_Port,STEP5_PUL_Pin,GPIO_PIN_RESET);
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800495a:	4817      	ldr	r0, [pc, #92]	; (80049b8 <HAL_TIM_OC_DelayElapsedCallback+0x2b58>)
 800495c:	f001 fbb8 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse5++;
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_TIM_OC_DelayElapsedCallback+0x2b84>)
 8004962:	6813      	ldr	r3, [r2, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e7b1      	b.n	80048ce <HAL_TIM_OC_DelayElapsedCallback+0x2a6e>
						HAL_GPIO_WritePin(STEP6_DIR_GPIO_Port,STEP6_DIR_Pin,GPIO_PIN_SET);
 800496a:	4c1d      	ldr	r4, [pc, #116]	; (80049e0 <HAL_TIM_OC_DelayElapsedCallback+0x2b80>)
 800496c:	2201      	movs	r2, #1
 800496e:	4611      	mov	r1, r2
 8004970:	4620      	mov	r0, r4
 8004972:	f001 fbad 	bl	80060d0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(STEP6_PUL_GPIO_Port,STEP6_PUL_Pin,GPIO_PIN_RESET);
 8004976:	2200      	movs	r2, #0
 8004978:	2102      	movs	r1, #2
 800497a:	4620      	mov	r0, r4
 800497c:	f001 fba8 	bl	80060d0 <HAL_GPIO_WritePin>
						cur_pulse6=cur_pulse6+6;
 8004980:	4a16      	ldr	r2, [pc, #88]	; (80049dc <HAL_TIM_OC_DelayElapsedCallback+0x2b7c>)
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	3306      	adds	r3, #6
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	f7fe b9ff 	b.w	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0xf2a>
		}else key_flag = 0;
 800498c:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <HAL_TIM_OC_DelayElapsedCallback+0x2b88>)
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
}
 8004992:	f7fe b9fa 	b.w	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0xf2a>
 8004996:	bf00      	nop
 8004998:	200032d8 	.word	0x200032d8
 800499c:	20002e90 	.word	0x20002e90
 80049a0:	40021000 	.word	0x40021000
 80049a4:	20002bc8 	.word	0x20002bc8
 80049a8:	20002bcc 	.word	0x20002bcc
 80049ac:	20002bd0 	.word	0x20002bd0
 80049b0:	20002ecc 	.word	0x20002ecc
 80049b4:	20002bd4 	.word	0x20002bd4
 80049b8:	40020400 	.word	0x40020400
 80049bc:	20002edc 	.word	0x20002edc
 80049c0:	20002ed4 	.word	0x20002ed4
 80049c4:	20002be4 	.word	0x20002be4
 80049c8:	20002ee8 	.word	0x20002ee8
 80049cc:	20002ee0 	.word	0x20002ee0
 80049d0:	20003288 	.word	0x20003288
 80049d4:	20002af8 	.word	0x20002af8
 80049d8:	20000000 	.word	0x20000000
 80049dc:	20002bdc 	.word	0x20002bdc
 80049e0:	40021800 	.word	0x40021800
 80049e4:	20002bd8 	.word	0x20002bd8
 80049e8:	20002e7c 	.word	0x20002e7c

080049ec <Error_Handler>:
 80049ec:	b672      	cpsid	i
  while (1)
 80049ee:	e7fe      	b.n	80049ee <Error_Handler+0x2>

080049f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049f0:	b500      	push	{lr}
 80049f2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f4:	2200      	movs	r2, #0
 80049f6:	9200      	str	r2, [sp, #0]
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_MspInit+0x40>)
 80049fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80049fc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004a00:	6459      	str	r1, [r3, #68]	; 0x44
 8004a02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004a04:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004a08:	9100      	str	r1, [sp, #0]
 8004a0a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a0c:	9201      	str	r2, [sp, #4]
 8004a0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a10:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004a14:	6419      	str	r1, [r3, #64]	; 0x40
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a20:	210f      	movs	r1, #15
 8004a22:	f06f 0001 	mvn.w	r0, #1
 8004a26:	f000 fde5 	bl	80055f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a2a:	b003      	add	sp, #12
 8004a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a30:	40023800 	.word	0x40023800

08004a34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a34:	e7fe      	b.n	8004a34 <NMI_Handler>

08004a36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a36:	e7fe      	b.n	8004a36 <HardFault_Handler>

08004a38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a38:	e7fe      	b.n	8004a38 <MemManage_Handler>

08004a3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a3a:	e7fe      	b.n	8004a3a <BusFault_Handler>

08004a3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a3c:	e7fe      	b.n	8004a3c <UsageFault_Handler>

08004a3e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a3e:	4770      	bx	lr

08004a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a42:	f000 fa61 	bl	8004f08 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a46:	f003 fa3f 	bl	8007ec8 <xTaskGetSchedulerState>
 8004a4a:	2801      	cmp	r0, #1
 8004a4c:	d100      	bne.n	8004a50 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a4e:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 8004a50:	f003 fb20 	bl	8008094 <xPortSysTickHandler>
}
 8004a54:	e7fb      	b.n	8004a4e <SysTick_Handler+0xe>
	...

08004a58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a5a:	4802      	ldr	r0, [pc, #8]	; (8004a64 <DMA1_Stream5_IRQHandler+0xc>)
 8004a5c:	f000 ff7a 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a60:	bd08      	pop	{r3, pc}
 8004a62:	bf00      	nop
 8004a64:	20003330 	.word	0x20003330

08004a68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <DMA1_Stream6_IRQHandler+0xc>)
 8004a6c:	f000 ff72 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a70:	bd08      	pop	{r3, pc}
 8004a72:	bf00      	nop
 8004a74:	200033f0 	.word	0x200033f0

08004a78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004a7a:	4802      	ldr	r0, [pc, #8]	; (8004a84 <ADC_IRQHandler+0xc>)
 8004a7c:	f000 fbf1 	bl	8005262 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004a80:	bd08      	pop	{r3, pc}
 8004a82:	bf00      	nop
 8004a84:	20003048 	.word	0x20003048

08004a88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a8a:	4802      	ldr	r0, [pc, #8]	; (8004a94 <TIM1_CC_IRQHandler+0xc>)
 8004a8c:	f001 ff42 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a90:	bd08      	pop	{r3, pc}
 8004a92:	bf00      	nop
 8004a94:	200032e8 	.word	0x200032e8

08004a98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a9a:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <USART1_IRQHandler+0xc>)
 8004a9c:	f002 fc02 	bl	80072a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004aa0:	bd08      	pop	{r3, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20003450 	.word	0x20003450

08004aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004aaa:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <USART2_IRQHandler+0xc>)
 8004aac:	f002 fbfa 	bl	80072a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ab0:	bd08      	pop	{r3, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20003494 	.word	0x20003494

08004ab8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004aba:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <DMA2_Stream0_IRQHandler+0xc>)
 8004abc:	f000 ff4a 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ac0:	bd08      	pop	{r3, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20003090 	.word	0x20003090

08004ac8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004aca:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <DMA2_Stream7_IRQHandler+0xc>)
 8004acc:	f000 ff42 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004ad0:	bd08      	pop	{r3, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20003390 	.word	0x20003390

08004ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ad8:	b508      	push	{r3, lr}
 8004ada:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004adc:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <_sbrk+0x38>)
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	b152      	cbz	r2, 8004af8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <_sbrk+0x38>)
 8004ae4:	6810      	ldr	r0, [r2, #0]
 8004ae6:	4403      	add	r3, r0
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <_sbrk+0x3c>)
 8004aea:	490b      	ldr	r1, [pc, #44]	; (8004b18 <_sbrk+0x40>)
 8004aec:	1a52      	subs	r2, r2, r1
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d806      	bhi.n	8004b00 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004af2:	4a07      	ldr	r2, [pc, #28]	; (8004b10 <_sbrk+0x38>)
 8004af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004af6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8004af8:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <_sbrk+0x38>)
 8004afa:	4908      	ldr	r1, [pc, #32]	; (8004b1c <_sbrk+0x44>)
 8004afc:	6011      	str	r1, [r2, #0]
 8004afe:	e7f0      	b.n	8004ae2 <_sbrk+0xa>
    errno = ENOMEM;
 8004b00:	f003 fb9c 	bl	800823c <__errno>
 8004b04:	230c      	movs	r3, #12
 8004b06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e7f3      	b.n	8004af6 <_sbrk+0x1e>
 8004b0e:	bf00      	nop
 8004b10:	20002f08 	.word	0x20002f08
 8004b14:	20020000 	.word	0x20020000
 8004b18:	00001600 	.word	0x00001600
 8004b1c:	20003510 	.word	0x20003510

08004b20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <SystemInit+0x10>)
 8004b22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004b34:	b510      	push	{r4, lr}
 8004b36:	b092      	sub	sp, #72	; 0x48

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b38:	2400      	movs	r4, #0
 8004b3a:	9410      	str	r4, [sp, #64]	; 0x40
 8004b3c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b3e:	9409      	str	r4, [sp, #36]	; 0x24
 8004b40:	940a      	str	r4, [sp, #40]	; 0x28
 8004b42:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b44:	940c      	str	r4, [sp, #48]	; 0x30
 8004b46:	940d      	str	r4, [sp, #52]	; 0x34
 8004b48:	940e      	str	r4, [sp, #56]	; 0x38
 8004b4a:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	4621      	mov	r1, r4
 8004b50:	a801      	add	r0, sp, #4
 8004b52:	f003 fbad 	bl	80082b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004b56:	4820      	ldr	r0, [pc, #128]	; (8004bd8 <MX_TIM1_Init+0xa4>)
 8004b58:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <MX_TIM1_Init+0xa8>)
 8004b5a:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 167;
 8004b5c:	23a7      	movs	r3, #167	; 0xa7
 8004b5e:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b60:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 100;
 8004b62:	2364      	movs	r3, #100	; 0x64
 8004b64:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b66:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b68:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004b6c:	f002 f814 	bl	8006b98 <HAL_TIM_OC_Init>
 8004b70:	bb30      	cbnz	r0, 8004bc0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b76:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b78:	a910      	add	r1, sp, #64	; 0x40
 8004b7a:	4817      	ldr	r0, [pc, #92]	; (8004bd8 <MX_TIM1_Init+0xa4>)
 8004b7c:	f002 f95a 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8004b80:	bb08      	cbnz	r0, 8004bc6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004b82:	2200      	movs	r2, #0
 8004b84:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8004b86:	2332      	movs	r3, #50	; 0x32
 8004b88:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8a:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b8c:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b8e:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b90:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b92:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b94:	a909      	add	r1, sp, #36	; 0x24
 8004b96:	4810      	ldr	r0, [pc, #64]	; (8004bd8 <MX_TIM1_Init+0xa4>)
 8004b98:	f002 f862 	bl	8006c60 <HAL_TIM_OC_ConfigChannel>
 8004b9c:	b9b0      	cbnz	r0, 8004bcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ba2:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ba4:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ba6:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ba8:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bae:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004bb0:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004bb2:	a901      	add	r1, sp, #4
 8004bb4:	4808      	ldr	r0, [pc, #32]	; (8004bd8 <MX_TIM1_Init+0xa4>)
 8004bb6:	f002 f981 	bl	8006ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8004bba:	b950      	cbnz	r0, 8004bd2 <MX_TIM1_Init+0x9e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004bbc:	b012      	add	sp, #72	; 0x48
 8004bbe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004bc0:	f7ff ff14 	bl	80049ec <Error_Handler>
 8004bc4:	e7d5      	b.n	8004b72 <MX_TIM1_Init+0x3e>
    Error_Handler();
 8004bc6:	f7ff ff11 	bl	80049ec <Error_Handler>
 8004bca:	e7da      	b.n	8004b82 <MX_TIM1_Init+0x4e>
    Error_Handler();
 8004bcc:	f7ff ff0e 	bl	80049ec <Error_Handler>
 8004bd0:	e7e5      	b.n	8004b9e <MX_TIM1_Init+0x6a>
    Error_Handler();
 8004bd2:	f7ff ff0b 	bl	80049ec <Error_Handler>
}
 8004bd6:	e7f1      	b.n	8004bbc <MX_TIM1_Init+0x88>
 8004bd8:	200032e8 	.word	0x200032e8
 8004bdc:	40010000 	.word	0x40010000

08004be0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM1)
 8004be0:	6802      	ldr	r2, [r0, #0]
 8004be2:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <HAL_TIM_OC_MspInit+0x3c>)
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d000      	beq.n	8004bea <HAL_TIM_OC_MspInit+0xa>
 8004be8:	4770      	bx	lr
{
 8004bea:	b500      	push	{lr}
 8004bec:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bee:	2200      	movs	r2, #0
 8004bf0:	9201      	str	r2, [sp, #4]
 8004bf2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004bf6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004bf8:	f041 0101 	orr.w	r1, r1, #1
 8004bfc:	6459      	str	r1, [r3, #68]	; 0x44
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004c08:	2105      	movs	r1, #5
 8004c0a:	201b      	movs	r0, #27
 8004c0c:	f000 fcf2 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004c10:	201b      	movs	r0, #27
 8004c12:	f000 fd21 	bl	8005658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004c16:	b003      	add	sp, #12
 8004c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c1c:	40010000 	.word	0x40010000

08004c20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c20:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c22:	480a      	ldr	r0, [pc, #40]	; (8004c4c <MX_USART1_UART_Init+0x2c>)
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <MX_USART1_UART_Init+0x30>)
 8004c26:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004c28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c2c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c32:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c34:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c36:	220c      	movs	r2, #12
 8004c38:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c3a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c3c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c3e:	f002 fa09 	bl	8007054 <HAL_UART_Init>
 8004c42:	b900      	cbnz	r0, 8004c46 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c44:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c46:	f7ff fed1 	bl	80049ec <Error_Handler>
}
 8004c4a:	e7fb      	b.n	8004c44 <MX_USART1_UART_Init+0x24>
 8004c4c:	20003450 	.word	0x20003450
 8004c50:	40011000 	.word	0x40011000

08004c54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c54:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c56:	480a      	ldr	r0, [pc, #40]	; (8004c80 <MX_USART2_UART_Init+0x2c>)
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <MX_USART2_UART_Init+0x30>)
 8004c5a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004c5c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c60:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c62:	2300      	movs	r3, #0
 8004c64:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c66:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c68:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c6e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c70:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c72:	f002 f9ef 	bl	8007054 <HAL_UART_Init>
 8004c76:	b900      	cbnz	r0, 8004c7a <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c78:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c7a:	f7ff feb7 	bl	80049ec <Error_Handler>
}
 8004c7e:	e7fb      	b.n	8004c78 <MX_USART2_UART_Init+0x24>
 8004c80:	20003494 	.word	0x20003494
 8004c84:	40004400 	.word	0x40004400

08004c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c88:	b530      	push	{r4, r5, lr}
 8004c8a:	b08b      	sub	sp, #44	; 0x2c
 8004c8c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	9306      	str	r3, [sp, #24]
 8004c94:	9307      	str	r3, [sp, #28]
 8004c96:	9308      	str	r3, [sp, #32]
 8004c98:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8004c9a:	6803      	ldr	r3, [r0, #0]
 8004c9c:	4a5a      	ldr	r2, [pc, #360]	; (8004e08 <HAL_UART_MspInit+0x180>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004ca2:	4a5a      	ldr	r2, [pc, #360]	; (8004e0c <HAL_UART_MspInit+0x184>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d048      	beq.n	8004d3a <HAL_UART_MspInit+0xb2>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ca8:	b00b      	add	sp, #44	; 0x2c
 8004caa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cac:	2500      	movs	r5, #0
 8004cae:	9501      	str	r5, [sp, #4]
 8004cb0:	4b57      	ldr	r3, [pc, #348]	; (8004e10 <HAL_UART_MspInit+0x188>)
 8004cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb4:	f042 0210 	orr.w	r2, r2, #16
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8004cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cbc:	f002 0210 	and.w	r2, r2, #16
 8004cc0:	9201      	str	r2, [sp, #4]
 8004cc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc4:	9502      	str	r5, [sp, #8]
 8004cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	9302      	str	r3, [sp, #8]
 8004cd6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004cd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004cdc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ce8:	2307      	movs	r3, #7
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cec:	a905      	add	r1, sp, #20
 8004cee:	4849      	ldr	r0, [pc, #292]	; (8004e14 <HAL_UART_MspInit+0x18c>)
 8004cf0:	f001 f8f6 	bl	8005ee0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004cf4:	4848      	ldr	r0, [pc, #288]	; (8004e18 <HAL_UART_MspInit+0x190>)
 8004cf6:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <HAL_UART_MspInit+0x194>)
 8004cf8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004cfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cfe:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d00:	2340      	movs	r3, #64	; 0x40
 8004d02:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d04:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d0a:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d0c:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d0e:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004d10:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d12:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d14:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004d16:	f000 fce3 	bl	80056e0 <HAL_DMA_Init>
 8004d1a:	b958      	cbnz	r0, 8004d34 <HAL_UART_MspInit+0xac>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004d1c:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <HAL_UART_MspInit+0x190>)
 8004d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8004d20:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2105      	movs	r1, #5
 8004d26:	2025      	movs	r0, #37	; 0x25
 8004d28:	f000 fc64 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d2c:	2025      	movs	r0, #37	; 0x25
 8004d2e:	f000 fc93 	bl	8005658 <HAL_NVIC_EnableIRQ>
 8004d32:	e7b9      	b.n	8004ca8 <HAL_UART_MspInit+0x20>
      Error_Handler();
 8004d34:	f7ff fe5a 	bl	80049ec <Error_Handler>
 8004d38:	e7f0      	b.n	8004d1c <HAL_UART_MspInit+0x94>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d3a:	2500      	movs	r5, #0
 8004d3c:	9503      	str	r5, [sp, #12]
 8004d3e:	4b34      	ldr	r3, [pc, #208]	; (8004e10 <HAL_UART_MspInit+0x188>)
 8004d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
 8004d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d4a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004d4e:	9203      	str	r2, [sp, #12]
 8004d50:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d52:	9504      	str	r5, [sp, #16]
 8004d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d56:	f042 0208 	orr.w	r2, r2, #8
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004d66:	2360      	movs	r3, #96	; 0x60
 8004d68:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d74:	2307      	movs	r3, #7
 8004d76:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d78:	a905      	add	r1, sp, #20
 8004d7a:	4829      	ldr	r0, [pc, #164]	; (8004e20 <HAL_UART_MspInit+0x198>)
 8004d7c:	f001 f8b0 	bl	8005ee0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004d80:	4828      	ldr	r0, [pc, #160]	; (8004e24 <HAL_UART_MspInit+0x19c>)
 8004d82:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <HAL_UART_MspInit+0x1a0>)
 8004d84:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d8a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d8c:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8e:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d94:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d96:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d98:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d9e:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da4:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004da6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004da8:	f000 fc9a 	bl	80056e0 <HAL_DMA_Init>
 8004dac:	bb28      	cbnz	r0, 8004dfa <HAL_UART_MspInit+0x172>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_UART_MspInit+0x19c>)
 8004db0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004db2:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004db4:	481d      	ldr	r0, [pc, #116]	; (8004e2c <HAL_UART_MspInit+0x1a4>)
 8004db6:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <HAL_UART_MspInit+0x1a8>)
 8004db8:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dbe:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dcc:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dce:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dd0:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004dd2:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dd8:	6202      	str	r2, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dda:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ddc:	f000 fc80 	bl	80056e0 <HAL_DMA_Init>
 8004de0:	b970      	cbnz	r0, 8004e00 <HAL_UART_MspInit+0x178>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_UART_MspInit+0x1a4>)
 8004de4:	6363      	str	r3, [r4, #52]	; 0x34
 8004de6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004de8:	2200      	movs	r2, #0
 8004dea:	2105      	movs	r1, #5
 8004dec:	2026      	movs	r0, #38	; 0x26
 8004dee:	f000 fc01 	bl	80055f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004df2:	2026      	movs	r0, #38	; 0x26
 8004df4:	f000 fc30 	bl	8005658 <HAL_NVIC_EnableIRQ>
}
 8004df8:	e756      	b.n	8004ca8 <HAL_UART_MspInit+0x20>
      Error_Handler();
 8004dfa:	f7ff fdf7 	bl	80049ec <Error_Handler>
 8004dfe:	e7d6      	b.n	8004dae <HAL_UART_MspInit+0x126>
      Error_Handler();
 8004e00:	f7ff fdf4 	bl	80049ec <Error_Handler>
 8004e04:	e7ed      	b.n	8004de2 <HAL_UART_MspInit+0x15a>
 8004e06:	bf00      	nop
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40004400 	.word	0x40004400
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40020000 	.word	0x40020000
 8004e18:	20003390 	.word	0x20003390
 8004e1c:	400264b8 	.word	0x400264b8
 8004e20:	40020c00 	.word	0x40020c00
 8004e24:	20003330 	.word	0x20003330
 8004e28:	40026088 	.word	0x40026088
 8004e2c:	200033f0 	.word	0x200033f0
 8004e30:	400260a0 	.word	0x400260a0

08004e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e38:	480d      	ldr	r0, [pc, #52]	; (8004e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e3a:	490e      	ldr	r1, [pc, #56]	; (8004e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e40:	e002      	b.n	8004e48 <LoopCopyDataInit>

08004e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e46:	3304      	adds	r3, #4

08004e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e4c:	d3f9      	bcc.n	8004e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e4e:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e50:	4c0b      	ldr	r4, [pc, #44]	; (8004e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e54:	e001      	b.n	8004e5a <LoopFillZerobss>

08004e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e58:	3204      	adds	r2, #4

08004e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e5c:	d3fb      	bcc.n	8004e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e5e:	f7ff fe5f 	bl	8004b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e62:	f003 f9f1 	bl	8008248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e66:	f7fc ffc7 	bl	8001df8 <main>
  bx  lr    
 8004e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e74:	20002b88 	.word	0x20002b88
  ldr r2, =_sidata
 8004e78:	0800a508 	.word	0x0800a508
  ldr r2, =_sbss
 8004e7c:	20002b88 	.word	0x20002b88
  ldr r4, =_ebss
 8004e80:	2000350c 	.word	0x2000350c

08004e84 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e84:	e7fe      	b.n	8004e84 <CAN1_RX0_IRQHandler>
	...

08004e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <HAL_InitTick+0x40>)
 8004e8e:	7818      	ldrb	r0, [r3, #0]
 8004e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e94:	fbb3 f3f0 	udiv	r3, r3, r0
 8004e98:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <HAL_InitTick+0x44>)
 8004e9a:	6810      	ldr	r0, [r2, #0]
 8004e9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ea0:	f000 fbe8 	bl	8005674 <HAL_SYSTICK_Config>
 8004ea4:	b968      	cbnz	r0, 8004ec2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ea6:	2c0f      	cmp	r4, #15
 8004ea8:	d901      	bls.n	8004eae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004eaa:	2001      	movs	r0, #1
 8004eac:	e00a      	b.n	8004ec4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb6:	f000 fb9d 	bl	80055f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_InitTick+0x48>)
 8004ebc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004ec2:	2001      	movs	r0, #1
}
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20002b14 	.word	0x20002b14
 8004ecc:	20002b10 	.word	0x20002b10
 8004ed0:	20002b18 	.word	0x20002b18

08004ed4 <HAL_Init>:
{
 8004ed4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_Init+0x30>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ee6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ef0:	2003      	movs	r0, #3
 8004ef2:	f000 fb6d 	bl	80055d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ef6:	200f      	movs	r0, #15
 8004ef8:	f7ff ffc6 	bl	8004e88 <HAL_InitTick>
  HAL_MspInit();
 8004efc:	f7ff fd78 	bl	80049f0 <HAL_MspInit>
}
 8004f00:	2000      	movs	r0, #0
 8004f02:	bd08      	pop	{r3, pc}
 8004f04:	40023c00 	.word	0x40023c00

08004f08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004f08:	4a03      	ldr	r2, [pc, #12]	; (8004f18 <HAL_IncTick+0x10>)
 8004f0a:	6811      	ldr	r1, [r2, #0]
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_IncTick+0x14>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	440b      	add	r3, r1
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	200034d8 	.word	0x200034d8
 8004f1c:	20002b14 	.word	0x20002b14

08004f20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004f20:	4b01      	ldr	r3, [pc, #4]	; (8004f28 <HAL_GetTick+0x8>)
 8004f22:	6818      	ldr	r0, [r3, #0]
}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	200034d8 	.word	0x200034d8

08004f2c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f000 80b9 	beq.w	80050a4 <HAL_ADC_Init+0x178>
{
 8004f32:	b510      	push	{r4, lr}
 8004f34:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f38:	b143      	cbz	r3, 8004f4c <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f3c:	f013 0f10 	tst.w	r3, #16
 8004f40:	d00b      	beq.n	8004f5a <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f42:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f44:	2300      	movs	r3, #0
 8004f46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8004f4a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8004f4c:	f7fc f832 	bl	8000fb4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f50:	2300      	movs	r3, #0
 8004f52:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8004f54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004f58:	e7ef      	b.n	8004f3a <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 8004f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f60:	f023 0302 	bic.w	r3, r3, #2
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <HAL_ADC_Init+0x17c>)
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004f72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	6861      	ldr	r1, [r4, #4]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	6853      	ldr	r3, [r2, #4]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	6853      	ldr	r3, [r2, #4]
 8004f8a:	6921      	ldr	r1, [r4, #16]
 8004f8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f90:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	6853      	ldr	r3, [r2, #4]
 8004f96:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004f9a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	6853      	ldr	r3, [r2, #4]
 8004fa0:	68a1      	ldr	r1, [r4, #8]
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	6893      	ldr	r3, [r2, #8]
 8004faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fae:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	6893      	ldr	r3, [r2, #8]
 8004fb4:	68e1      	ldr	r1, [r4, #12]
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_ADC_Init+0x180>)
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d05f      	beq.n	8005082 <HAL_ADC_Init+0x156>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	6893      	ldr	r3, [r2, #8]
 8004fc6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004fca:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	6893      	ldr	r3, [r2, #8]
 8004fd0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	6893      	ldr	r3, [r2, #8]
 8004fda:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004fde:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	6893      	ldr	r3, [r2, #8]
 8004fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	6893      	ldr	r3, [r2, #8]
 8004fee:	f023 0302 	bic.w	r3, r3, #2
 8004ff2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	6893      	ldr	r3, [r2, #8]
 8004ff8:	7e21      	ldrb	r1, [r4, #24]
 8004ffa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004ffe:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005000:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d047      	beq.n	8005098 <HAL_ADC_Init+0x16c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	6853      	ldr	r3, [r2, #4]
 800500c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005010:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	6853      	ldr	r3, [r2, #4]
 8005016:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800501a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800501c:	6821      	ldr	r1, [r4, #0]
 800501e:	684b      	ldr	r3, [r1, #4]
 8005020:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005022:	3a01      	subs	r2, #1
 8005024:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8005028:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800502e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005032:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005038:	69e2      	ldr	r2, [r4, #28]
 800503a:	3a01      	subs	r2, #1
 800503c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005040:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	6893      	ldr	r3, [r2, #8]
 8005046:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800504a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800504c:	6822      	ldr	r2, [r4, #0]
 800504e:	6893      	ldr	r3, [r2, #8]
 8005050:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8005054:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8005058:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	6893      	ldr	r3, [r2, #8]
 800505e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005062:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	6893      	ldr	r3, [r2, #8]
 8005068:	6961      	ldr	r1, [r4, #20]
 800506a:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800506e:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005070:	2000      	movs	r0, #0
 8005072:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6423      	str	r3, [r4, #64]	; 0x40
 8005080:	e760      	b.n	8004f44 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	6893      	ldr	r3, [r2, #8]
 8005086:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800508a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	6893      	ldr	r3, [r2, #8]
 8005090:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005094:	6093      	str	r3, [r2, #8]
 8005096:	e7a8      	b.n	8004fea <HAL_ADC_Init+0xbe>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	6853      	ldr	r3, [r2, #4]
 800509c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a0:	6053      	str	r3, [r2, #4]
 80050a2:	e7c2      	b.n	800502a <HAL_ADC_Init+0xfe>
    return HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
}
 80050a6:	4770      	bx	lr
 80050a8:	40012300 	.word	0x40012300
 80050ac:	0f000001 	.word	0x0f000001

080050b0 <HAL_ADC_Start_DMA>:
{
 80050b0:	b510      	push	{r4, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80050b6:	2200      	movs	r2, #0
 80050b8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80050ba:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80050be:	2a01      	cmp	r2, #1
 80050c0:	f000 80ae 	beq.w	8005220 <HAL_ADC_Start_DMA+0x170>
 80050c4:	4604      	mov	r4, r0
 80050c6:	2201      	movs	r2, #1
 80050c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050cc:	6802      	ldr	r2, [r0, #0]
 80050ce:	6890      	ldr	r0, [r2, #8]
 80050d0:	f010 0f01 	tst.w	r0, #1
 80050d4:	d114      	bne.n	8005100 <HAL_ADC_Start_DMA+0x50>
    __HAL_ADC_ENABLE(hadc);
 80050d6:	6890      	ldr	r0, [r2, #8]
 80050d8:	f040 0001 	orr.w	r0, r0, #1
 80050dc:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050de:	4a54      	ldr	r2, [pc, #336]	; (8005230 <HAL_ADC_Start_DMA+0x180>)
 80050e0:	6810      	ldr	r0, [r2, #0]
 80050e2:	4a54      	ldr	r2, [pc, #336]	; (8005234 <HAL_ADC_Start_DMA+0x184>)
 80050e4:	fba2 2000 	umull	r2, r0, r2, r0
 80050e8:	0c80      	lsrs	r0, r0, #18
 80050ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80050ee:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80050f0:	9a01      	ldr	r2, [sp, #4]
 80050f2:	b12a      	cbz	r2, 8005100 <HAL_ADC_Start_DMA+0x50>
      counter--;
 80050f4:	9801      	ldr	r0, [sp, #4]
 80050f6:	3801      	subs	r0, #1
 80050f8:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80050fa:	9801      	ldr	r0, [sp, #4]
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d1f9      	bne.n	80050f4 <HAL_ADC_Start_DMA+0x44>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	6890      	ldr	r0, [r2, #8]
 8005104:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005108:	d003      	beq.n	8005112 <HAL_ADC_Start_DMA+0x62>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800510a:	6890      	ldr	r0, [r2, #8]
 800510c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005110:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	6890      	ldr	r0, [r2, #8]
 8005116:	f010 0f01 	tst.w	r0, #1
 800511a:	d076      	beq.n	800520a <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 800511c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800511e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005122:	f020 0001 	bic.w	r0, r0, #1
 8005126:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800512a:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800512c:	6852      	ldr	r2, [r2, #4]
 800512e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005132:	d005      	beq.n	8005140 <HAL_ADC_Start_DMA+0x90>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005134:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005136:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800513a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800513e:	6422      	str	r2, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005140:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005142:	f412 5f80 	tst.w	r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005146:	bf1a      	itte	ne
 8005148:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 800514a:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800514e:	2200      	moveq	r2, #0
 8005150:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8005152:	2200      	movs	r2, #0
 8005154:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800515a:	4837      	ldr	r0, [pc, #220]	; (8005238 <HAL_ADC_Start_DMA+0x188>)
 800515c:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800515e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005160:	4836      	ldr	r0, [pc, #216]	; (800523c <HAL_ADC_Start_DMA+0x18c>)
 8005162:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005166:	4836      	ldr	r0, [pc, #216]	; (8005240 <HAL_ADC_Start_DMA+0x190>)
 8005168:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8005170:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	6842      	ldr	r2, [r0, #4]
 8005176:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800517a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	6882      	ldr	r2, [r0, #8]
 8005180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005184:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005186:	6820      	ldr	r0, [r4, #0]
 8005188:	460a      	mov	r2, r1
 800518a:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800518e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005190:	f000 fb3e 	bl	8005810 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <HAL_ADC_Start_DMA+0x194>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f013 0f1f 	tst.w	r3, #31
 800519c:	d124      	bne.n	80051e8 <HAL_ADC_Start_DMA+0x138>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	4a29      	ldr	r2, [pc, #164]	; (8005248 <HAL_ADC_Start_DMA+0x198>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d016      	beq.n	80051d4 <HAL_ADC_Start_DMA+0x124>
 80051a6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_ADC_Start_DMA+0x108>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80051ae:	4a27      	ldr	r2, [pc, #156]	; (800524c <HAL_ADC_Start_DMA+0x19c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_ADC_Start_DMA+0x118>
  return HAL_OK;
 80051b4:	2000      	movs	r0, #0
 80051b6:	e031      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80051b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80051bc:	6852      	ldr	r2, [r2, #4]
 80051be:	f012 0f1f 	tst.w	r2, #31
 80051c2:	d007      	beq.n	80051d4 <HAL_ADC_Start_DMA+0x124>
  return HAL_OK;
 80051c4:	2000      	movs	r0, #0
 80051c6:	e029      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80051c8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80051cc:	6852      	ldr	r2, [r2, #4]
 80051ce:	f012 0f10 	tst.w	r2, #16
 80051d2:	d127      	bne.n	8005224 <HAL_ADC_Start_DMA+0x174>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80051da:	d125      	bne.n	8005228 <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e4:	2000      	movs	r0, #0
 80051e6:	e019      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	4b17      	ldr	r3, [pc, #92]	; (8005248 <HAL_ADC_Start_DMA+0x198>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_ADC_Start_DMA+0x144>
  return HAL_OK;
 80051f0:	2000      	movs	r0, #0
 80051f2:	e013      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80051fa:	d117      	bne.n	800522c <HAL_ADC_Start_DMA+0x17c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051fc:	4a12      	ldr	r2, [pc, #72]	; (8005248 <HAL_ADC_Start_DMA+0x198>)
 80051fe:	6893      	ldr	r3, [r2, #8]
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005204:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 8005206:	2000      	movs	r0, #0
 8005208:	e008      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800520a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800520c:	f043 0310 	orr.w	r3, r3, #16
 8005210:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005212:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800521a:	2000      	movs	r0, #0
}
 800521c:	b002      	add	sp, #8
 800521e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8005220:	2002      	movs	r0, #2
 8005222:	e7fb      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8005224:	2000      	movs	r0, #0
 8005226:	e7f9      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
 8005228:	2000      	movs	r0, #0
 800522a:	e7f7      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
 800522c:	2000      	movs	r0, #0
 800522e:	e7f5      	b.n	800521c <HAL_ADC_Start_DMA+0x16c>
 8005230:	20002b10 	.word	0x20002b10
 8005234:	431bde83 	.word	0x431bde83
 8005238:	080053c5 	.word	0x080053c5
 800523c:	08005255 	.word	0x08005255
 8005240:	080053af 	.word	0x080053af
 8005244:	40012300 	.word	0x40012300
 8005248:	40012000 	.word	0x40012000
 800524c:	40012200 	.word	0x40012200

08005250 <HAL_ADC_ConvCpltCallback>:
}
 8005250:	4770      	bx	lr

08005252 <HAL_ADC_ConvHalfCpltCallback>:
}
 8005252:	4770      	bx	lr

08005254 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005254:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005256:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005258:	f7ff fffb 	bl	8005252 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800525c:	bd08      	pop	{r3, pc}

0800525e <HAL_ADC_LevelOutOfWindowCallback>:
}
 800525e:	4770      	bx	lr

08005260 <HAL_ADC_ErrorCallback>:
}
 8005260:	4770      	bx	lr

08005262 <HAL_ADC_IRQHandler>:
{
 8005262:	b538      	push	{r3, r4, r5, lr}
 8005264:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005266:	6803      	ldr	r3, [r0, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800526a:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 800526c:	f012 0f02 	tst.w	r2, #2
 8005270:	d02f      	beq.n	80052d2 <HAL_ADC_IRQHandler+0x70>
 8005272:	f011 0f20 	tst.w	r1, #32
 8005276:	d02c      	beq.n	80052d2 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005278:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800527a:	f012 0f10 	tst.w	r2, #16
 800527e:	d103      	bne.n	8005288 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005280:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005286:	6402      	str	r2, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800528e:	d119      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x62>
 8005290:	7e22      	ldrb	r2, [r4, #24]
 8005292:	b9ba      	cbnz	r2, 80052c4 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005296:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800529a:	d003      	beq.n	80052a4 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800529c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800529e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80052a2:	d10f      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	f022 0220 	bic.w	r2, r2, #32
 80052aa:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052b6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80052ba:	d103      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7ff ffc3 	bl	8005250 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f06f 0212 	mvn.w	r2, #18
 80052d0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80052d6:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 80052d8:	f012 0f04 	tst.w	r2, #4
 80052dc:	d037      	beq.n	800534e <HAL_ADC_IRQHandler+0xec>
 80052de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052e2:	d034      	beq.n	800534e <HAL_ADC_IRQHandler+0xec>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052e6:	f012 0f10 	tst.w	r2, #16
 80052ea:	d103      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f2:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80052fa:	d121      	bne.n	8005340 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80052fe:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8005302:	d003      	beq.n	800530c <HAL_ADC_IRQHandler+0xaa>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005304:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005306:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800530a:	d119      	bne.n	8005340 <HAL_ADC_IRQHandler+0xde>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800530c:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800530e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005312:	d115      	bne.n	8005340 <HAL_ADC_IRQHandler+0xde>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005314:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005316:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800531a:	d111      	bne.n	8005340 <HAL_ADC_IRQHandler+0xde>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800531c:	7e22      	ldrb	r2, [r4, #24]
 800531e:	b97a      	cbnz	r2, 8005340 <HAL_ADC_IRQHandler+0xde>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005326:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800532a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800532e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005332:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005336:	d103      	bne.n	8005340 <HAL_ADC_IRQHandler+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005340:	4620      	mov	r0, r4
 8005342:	f000 f943 	bl	80055cc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	f06f 020c 	mvn.w	r2, #12
 800534c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005352:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005354:	f012 0f01 	tst.w	r2, #1
 8005358:	d006      	beq.n	8005368 <HAL_ADC_IRQHandler+0x106>
 800535a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800535e:	d003      	beq.n	8005368 <HAL_ADC_IRQHandler+0x106>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f013 0f01 	tst.w	r3, #1
 8005366:	d109      	bne.n	800537c <HAL_ADC_IRQHandler+0x11a>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800536c:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 800536e:	f012 0f20 	tst.w	r2, #32
 8005372:	d002      	beq.n	800537a <HAL_ADC_IRQHandler+0x118>
 8005374:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8005378:	d10c      	bne.n	8005394 <HAL_ADC_IRQHandler+0x132>
}
 800537a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800537c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005384:	4620      	mov	r0, r4
 8005386:	f7ff ff6a 	bl	800525e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f06f 0201 	mvn.w	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e7e9      	b.n	8005368 <HAL_ADC_IRQHandler+0x106>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005394:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005396:	f042 0202 	orr.w	r2, r2, #2
 800539a:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800539c:	f06f 0520 	mvn.w	r5, #32
 80053a0:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80053a2:	4620      	mov	r0, r4
 80053a4:	f7ff ff5c 	bl	8005260 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	601d      	str	r5, [r3, #0]
}
 80053ac:	e7e5      	b.n	800537a <HAL_ADC_IRQHandler+0x118>

080053ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80053ae:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80053b2:	2340      	movs	r3, #64	; 0x40
 80053b4:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80053b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80053b8:	f043 0304 	orr.w	r3, r3, #4
 80053bc:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053be:	f7ff ff4f 	bl	8005260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053c2:	bd08      	pop	{r3, pc}

080053c4 <ADC_DMAConvCplt>:
{
 80053c4:	b508      	push	{r3, lr}
 80053c6:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80053ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80053cc:	f012 0f50 	tst.w	r2, #80	; 0x50
 80053d0:	d125      	bne.n	800541e <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d8:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053da:	6803      	ldr	r3, [r0, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80053e2:	d119      	bne.n	8005418 <ADC_DMAConvCplt+0x54>
 80053e4:	7e02      	ldrb	r2, [r0, #24]
 80053e6:	b9ba      	cbnz	r2, 8005418 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053ea:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80053ee:	d003      	beq.n	80053f8 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80053f0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80053f2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80053f6:	d10f      	bne.n	8005418 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	f022 0220 	bic.w	r2, r2, #32
 80053fe:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005400:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005406:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005408:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800540a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800540e:	d103      	bne.n	8005418 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005410:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8005418:	f7ff ff1a 	bl	8005250 <HAL_ADC_ConvCpltCallback>
}
 800541c:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800541e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005420:	f012 0f10 	tst.w	r2, #16
 8005424:	d104      	bne.n	8005430 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005426:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005428:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800542a:	4618      	mov	r0, r3
 800542c:	4790      	blx	r2
}
 800542e:	e7f5      	b.n	800541c <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8005430:	f7ff ff16 	bl	8005260 <HAL_ADC_ErrorCallback>
 8005434:	e7f2      	b.n	800541c <ADC_DMAConvCplt+0x58>
	...

08005438 <HAL_ADC_ConfigChannel>:
{
 8005438:	b430      	push	{r4, r5}
 800543a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005440:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	f000 80b8 	beq.w	80055ba <HAL_ADC_ConfigChannel+0x182>
 800544a:	2301      	movs	r3, #1
 800544c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005450:	680b      	ldr	r3, [r1, #0]
 8005452:	2b09      	cmp	r3, #9
 8005454:	d93a      	bls.n	80054cc <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005456:	6805      	ldr	r5, [r0, #0]
 8005458:	68ea      	ldr	r2, [r5, #12]
 800545a:	b29b      	uxth	r3, r3
 800545c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005460:	3b1e      	subs	r3, #30
 8005462:	2407      	movs	r4, #7
 8005464:	fa04 f303 	lsl.w	r3, r4, r3
 8005468:	ea22 0303 	bic.w	r3, r2, r3
 800546c:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800546e:	6804      	ldr	r4, [r0, #0]
 8005470:	68e5      	ldr	r5, [r4, #12]
 8005472:	880b      	ldrh	r3, [r1, #0]
 8005474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005478:	3b1e      	subs	r3, #30
 800547a:	688a      	ldr	r2, [r1, #8]
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	432b      	orrs	r3, r5
 8005482:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8005484:	684b      	ldr	r3, [r1, #4]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d835      	bhi.n	80054f6 <HAL_ADC_ConfigChannel+0xbe>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800548a:	6805      	ldr	r5, [r0, #0]
 800548c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800548e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005492:	3b05      	subs	r3, #5
 8005494:	241f      	movs	r4, #31
 8005496:	fa04 f303 	lsl.w	r3, r4, r3
 800549a:	ea22 0303 	bic.w	r3, r2, r3
 800549e:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054a0:	6804      	ldr	r4, [r0, #0]
 80054a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80054a4:	880a      	ldrh	r2, [r1, #0]
 80054a6:	684b      	ldr	r3, [r1, #4]
 80054a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054ac:	3b05      	subs	r3, #5
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	432b      	orrs	r3, r5
 80054b4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054b6:	6802      	ldr	r2, [r0, #0]
 80054b8:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_ADC_ConfigChannel+0x188>)
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d04b      	beq.n	8005556 <HAL_ADC_ConfigChannel+0x11e>
  __HAL_UNLOCK(hadc);
 80054be:	2300      	movs	r3, #0
 80054c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80054c4:	4618      	mov	r0, r3
}
 80054c6:	b002      	add	sp, #8
 80054c8:	bc30      	pop	{r4, r5}
 80054ca:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054cc:	6805      	ldr	r5, [r0, #0]
 80054ce:	692a      	ldr	r2, [r5, #16]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054d6:	2407      	movs	r4, #7
 80054d8:	fa04 f303 	lsl.w	r3, r4, r3
 80054dc:	ea22 0303 	bic.w	r3, r2, r3
 80054e0:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054e2:	6804      	ldr	r4, [r0, #0]
 80054e4:	6925      	ldr	r5, [r4, #16]
 80054e6:	880b      	ldrh	r3, [r1, #0]
 80054e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80054ec:	688b      	ldr	r3, [r1, #8]
 80054ee:	4093      	lsls	r3, r2
 80054f0:	432b      	orrs	r3, r5
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	e7c6      	b.n	8005484 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d816      	bhi.n	8005528 <HAL_ADC_ConfigChannel+0xf0>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054fa:	6805      	ldr	r5, [r0, #0]
 80054fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80054fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005502:	3b23      	subs	r3, #35	; 0x23
 8005504:	241f      	movs	r4, #31
 8005506:	fa04 f303 	lsl.w	r3, r4, r3
 800550a:	ea22 0303 	bic.w	r3, r2, r3
 800550e:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005510:	6804      	ldr	r4, [r0, #0]
 8005512:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005514:	880a      	ldrh	r2, [r1, #0]
 8005516:	684b      	ldr	r3, [r1, #4]
 8005518:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800551c:	3b23      	subs	r3, #35	; 0x23
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	432b      	orrs	r3, r5
 8005524:	6323      	str	r3, [r4, #48]	; 0x30
 8005526:	e7c6      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005528:	6805      	ldr	r5, [r0, #0]
 800552a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800552c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005530:	3b41      	subs	r3, #65	; 0x41
 8005532:	241f      	movs	r4, #31
 8005534:	fa04 f303 	lsl.w	r3, r4, r3
 8005538:	ea22 0303 	bic.w	r3, r2, r3
 800553c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800553e:	6804      	ldr	r4, [r0, #0]
 8005540:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005542:	880a      	ldrh	r2, [r1, #0]
 8005544:	684b      	ldr	r3, [r1, #4]
 8005546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800554a:	3b41      	subs	r3, #65	; 0x41
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	432b      	orrs	r3, r5
 8005552:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005554:	e7af      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	2b12      	cmp	r3, #18
 800555a:	d024      	beq.n	80055a6 <HAL_ADC_ConfigChannel+0x16e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800555c:	680b      	ldr	r3, [r1, #0]
 800555e:	3b10      	subs	r3, #16
 8005560:	2b01      	cmp	r3, #1
 8005562:	d8ac      	bhi.n	80054be <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005564:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <HAL_ADC_ConfigChannel+0x18c>)
 8005566:	6853      	ldr	r3, [r2, #4]
 8005568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800556c:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800556e:	680b      	ldr	r3, [r1, #0]
 8005570:	2b10      	cmp	r3, #16
 8005572:	d1a4      	bne.n	80054be <HAL_ADC_ConfigChannel+0x86>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005574:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <HAL_ADC_ConfigChannel+0x190>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800557c:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005580:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	0c9b      	lsrs	r3, r3, #18
 800558a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d092      	beq.n	80054be <HAL_ADC_ConfigChannel+0x86>
        counter--;
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800559e:	9b01      	ldr	r3, [sp, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f9      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x160>
 80055a4:	e78b      	b.n	80054be <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055a6:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <HAL_ADC_ConfigChannel+0x18c>)
 80055a8:	6853      	ldr	r3, [r2, #4]
 80055aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055ae:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055b0:	6802      	ldr	r2, [r0, #0]
 80055b2:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_ADC_ConfigChannel+0x188>)
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d0d1      	beq.n	800555c <HAL_ADC_ConfigChannel+0x124>
 80055b8:	e781      	b.n	80054be <HAL_ADC_ConfigChannel+0x86>
  __HAL_LOCK(hadc);
 80055ba:	2002      	movs	r0, #2
 80055bc:	e783      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x8e>
 80055be:	bf00      	nop
 80055c0:	40012000 	.word	0x40012000
 80055c4:	40012300 	.word	0x40012300
 80055c8:	20002b10 	.word	0x20002b10

080055cc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055d0:	4907      	ldr	r1, [pc, #28]	; (80055f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80055d2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055d4:	0203      	lsls	r3, r0, #8
 80055d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055de:	0412      	lsls	r2, r2, #16
 80055e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80055ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80055ee:	4770      	bx	lr
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055f4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f6:	4b16      	ldr	r3, [pc, #88]	; (8005650 <HAL_NVIC_SetPriority+0x5c>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055fe:	f1c3 0407 	rsb	r4, r3, #7
 8005602:	2c04      	cmp	r4, #4
 8005604:	bf28      	it	cs
 8005606:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005608:	1d1d      	adds	r5, r3, #4
 800560a:	2d06      	cmp	r5, #6
 800560c:	bf8c      	ite	hi
 800560e:	3b03      	subhi	r3, #3
 8005610:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005612:	f04f 35ff 	mov.w	r5, #4294967295
 8005616:	fa05 f404 	lsl.w	r4, r5, r4
 800561a:	ea21 0104 	bic.w	r1, r1, r4
 800561e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005620:	fa05 f303 	lsl.w	r3, r5, r3
 8005624:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005628:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800562a:	2800      	cmp	r0, #0
 800562c:	db09      	blt.n	8005642 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800562e:	0109      	lsls	r1, r1, #4
 8005630:	b2c9      	uxtb	r1, r1
 8005632:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005636:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800563a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800563e:	bc30      	pop	{r4, r5}
 8005640:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005642:	f000 000f 	and.w	r0, r0, #15
 8005646:	0109      	lsls	r1, r1, #4
 8005648:	b2c9      	uxtb	r1, r1
 800564a:	4b02      	ldr	r3, [pc, #8]	; (8005654 <HAL_NVIC_SetPriority+0x60>)
 800564c:	5419      	strb	r1, [r3, r0]
 800564e:	e7f6      	b.n	800563e <HAL_NVIC_SetPriority+0x4a>
 8005650:	e000ed00 	.word	0xe000ed00
 8005654:	e000ed14 	.word	0xe000ed14

08005658 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005658:	2800      	cmp	r0, #0
 800565a:	db08      	blt.n	800566e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800565c:	0942      	lsrs	r2, r0, #5
 800565e:	f000 001f 	and.w	r0, r0, #31
 8005662:	2301      	movs	r3, #1
 8005664:	fa03 f000 	lsl.w	r0, r3, r0
 8005668:	4b01      	ldr	r3, [pc, #4]	; (8005670 <HAL_NVIC_EnableIRQ+0x18>)
 800566a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800566e:	4770      	bx	lr
 8005670:	e000e100 	.word	0xe000e100

08005674 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005674:	3801      	subs	r0, #1
 8005676:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800567a:	d20a      	bcs.n	8005692 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_SYSTICK_Config+0x24>)
 800567e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005680:	4a06      	ldr	r2, [pc, #24]	; (800569c <HAL_SYSTICK_Config+0x28>)
 8005682:	21f0      	movs	r1, #240	; 0xf0
 8005684:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005688:	2000      	movs	r0, #0
 800568a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800568c:	2207      	movs	r2, #7
 800568e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005690:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005692:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	e000e010 	.word	0xe000e010
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056a0:	b410      	push	{r4}
 80056a2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056a4:	6803      	ldr	r3, [r0, #0]
 80056a6:	b2d8      	uxtb	r0, r3
 80056a8:	3810      	subs	r0, #16
 80056aa:	490b      	ldr	r1, [pc, #44]	; (80056d8 <DMA_CalcBaseAndBitshift+0x38>)
 80056ac:	fba1 4100 	umull	r4, r1, r1, r0
 80056b0:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056b2:	4c0a      	ldr	r4, [pc, #40]	; (80056dc <DMA_CalcBaseAndBitshift+0x3c>)
 80056b4:	5c61      	ldrb	r1, [r4, r1]
 80056b6:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056b8:	285f      	cmp	r0, #95	; 0x5f
 80056ba:	d908      	bls.n	80056ce <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056bc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056c0:	f023 0303 	bic.w	r3, r3, #3
 80056c4:	1d18      	adds	r0, r3, #4
 80056c6:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80056c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056ce:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 80056d2:	f020 0003 	bic.w	r0, r0, #3
 80056d6:	e7f6      	b.n	80056c6 <DMA_CalcBaseAndBitshift+0x26>
 80056d8:	aaaaaaab 	.word	0xaaaaaaab
 80056dc:	0800a29c 	.word	0x0800a29c

080056e0 <HAL_DMA_Init>:
{
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80056e4:	f7ff fc1c 	bl	8004f20 <HAL_GetTick>
  if(hdma == NULL)
 80056e8:	2c00      	cmp	r4, #0
 80056ea:	f000 808c 	beq.w	8005806 <HAL_DMA_Init+0x126>
 80056ee:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80056f0:	2300      	movs	r3, #0
 80056f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80056f6:	2302      	movs	r3, #2
 80056f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	f012 0f01 	tst.w	r2, #1
 800570e:	d00a      	beq.n	8005726 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005710:	f7ff fc06 	bl	8004f20 <HAL_GetTick>
 8005714:	1b43      	subs	r3, r0, r5
 8005716:	2b05      	cmp	r3, #5
 8005718:	d9f5      	bls.n	8005706 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800571a:	2320      	movs	r3, #32
 800571c:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800571e:	2003      	movs	r0, #3
 8005720:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005724:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8005726:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005728:	4838      	ldr	r0, [pc, #224]	; (800580c <HAL_DMA_Init+0x12c>)
 800572a:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800572c:	6861      	ldr	r1, [r4, #4]
 800572e:	68a2      	ldr	r2, [r4, #8]
 8005730:	430a      	orrs	r2, r1
 8005732:	68e1      	ldr	r1, [r4, #12]
 8005734:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005736:	6921      	ldr	r1, [r4, #16]
 8005738:	430a      	orrs	r2, r1
 800573a:	6961      	ldr	r1, [r4, #20]
 800573c:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573e:	69a1      	ldr	r1, [r4, #24]
 8005740:	430a      	orrs	r2, r1
 8005742:	69e1      	ldr	r1, [r4, #28]
 8005744:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005746:	6a21      	ldr	r1, [r4, #32]
 8005748:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800574a:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800574c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800574e:	2904      	cmp	r1, #4
 8005750:	d021      	beq.n	8005796 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8005752:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005758:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 800575c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575e:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005760:	2b04      	cmp	r3, #4
 8005762:	d10a      	bne.n	800577a <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8005764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005766:	431a      	orrs	r2, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005768:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800576a:	b130      	cbz	r0, 800577a <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800576c:	69a5      	ldr	r5, [r4, #24]
 800576e:	bb3d      	cbnz	r5, 80057c0 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8005770:	2b01      	cmp	r3, #1
 8005772:	d01f      	beq.n	80057b4 <HAL_DMA_Init+0xd4>
 8005774:	f033 0302 	bics.w	r3, r3, #2
 8005778:	d012      	beq.n	80057a0 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 800577a:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff ff8f 	bl	80056a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005782:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005784:	233f      	movs	r3, #63	; 0x3f
 8005786:	4093      	lsls	r3, r2
 8005788:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578a:	2000      	movs	r0, #0
 800578c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800578e:	2301      	movs	r3, #1
 8005790:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005794:	e7c6      	b.n	8005724 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005796:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005798:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800579a:	4301      	orrs	r1, r0
 800579c:	430a      	orrs	r2, r1
 800579e:	e7d8      	b.n	8005752 <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	f3c0 6000 	ubfx	r0, r0, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0e8      	beq.n	800577a <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80057ac:	2001      	movs	r0, #1
 80057ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80057b2:	e7b7      	b.n	8005724 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80057b8:	bf14      	ite	ne
 80057ba:	2000      	movne	r0, #0
 80057bc:	2001      	moveq	r0, #1
 80057be:	e7f1      	b.n	80057a4 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057c0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80057c4:	d006      	beq.n	80057d4 <HAL_DMA_Init+0xf4>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d9ee      	bls.n	80057a8 <HAL_DMA_Init+0xc8>
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d1d5      	bne.n	800577a <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	f3c0 6000 	ubfx	r0, r0, #24, #1
 80057d2:	e7e7      	b.n	80057a4 <HAL_DMA_Init+0xc4>
    switch (tmp)
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d814      	bhi.n	8005802 <HAL_DMA_Init+0x122>
 80057d8:	a501      	add	r5, pc, #4	; (adr r5, 80057e0 <HAL_DMA_Init+0x100>)
 80057da:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057a9 	.word	0x080057a9
 80057e4:	080057f1 	.word	0x080057f1
 80057e8:	080057a9 	.word	0x080057a9
 80057ec:	080057f7 	.word	0x080057f7
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	f3c0 6000 	ubfx	r0, r0, #24, #1
 80057f4:	e7d6      	b.n	80057a4 <HAL_DMA_Init+0xc4>
 80057f6:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80057fa:	bf14      	ite	ne
 80057fc:	2000      	movne	r0, #0
 80057fe:	2001      	moveq	r0, #1
 8005800:	e7d0      	b.n	80057a4 <HAL_DMA_Init+0xc4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005802:	2000      	movs	r0, #0
 8005804:	e7ce      	b.n	80057a4 <HAL_DMA_Init+0xc4>
    return HAL_ERROR;
 8005806:	2001      	movs	r0, #1
 8005808:	e78c      	b.n	8005724 <HAL_DMA_Init+0x44>
 800580a:	bf00      	nop
 800580c:	f010803f 	.word	0xf010803f

08005810 <HAL_DMA_Start_IT>:
{
 8005810:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005812:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005814:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005818:	2c01      	cmp	r4, #1
 800581a:	d03c      	beq.n	8005896 <HAL_DMA_Start_IT+0x86>
 800581c:	2401      	movs	r4, #1
 800581e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005822:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005826:	b2e4      	uxtb	r4, r4
 8005828:	2c01      	cmp	r4, #1
 800582a:	d005      	beq.n	8005838 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800582c:	2300      	movs	r3, #0
 800582e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8005832:	2002      	movs	r0, #2
}
 8005834:	bc70      	pop	{r4, r5, r6}
 8005836:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005838:	2402      	movs	r4, #2
 800583a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800583e:	2400      	movs	r4, #0
 8005840:	6544      	str	r4, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005842:	6806      	ldr	r6, [r0, #0]
 8005844:	6834      	ldr	r4, [r6, #0]
 8005846:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800584a:	6034      	str	r4, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 800584c:	6804      	ldr	r4, [r0, #0]
 800584e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005850:	6883      	ldr	r3, [r0, #8]
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d01a      	beq.n	800588c <HAL_DMA_Start_IT+0x7c>
    hdma->Instance->PAR = SrcAddress;
 8005856:	6803      	ldr	r3, [r0, #0]
 8005858:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800585a:	6803      	ldr	r3, [r0, #0]
 800585c:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800585e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005860:	233f      	movs	r3, #63	; 0x3f
 8005862:	4093      	lsls	r3, r2
 8005864:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005866:	6802      	ldr	r2, [r0, #0]
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	f043 0316 	orr.w	r3, r3, #22
 800586e:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005870:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005872:	b123      	cbz	r3, 800587e <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005874:	6802      	ldr	r2, [r0, #0]
 8005876:	6813      	ldr	r3, [r2, #0]
 8005878:	f043 0308 	orr.w	r3, r3, #8
 800587c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800587e:	6802      	ldr	r2, [r0, #0]
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005888:	2000      	movs	r0, #0
 800588a:	e7d3      	b.n	8005834 <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 800588c:	6803      	ldr	r3, [r0, #0]
 800588e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	60d9      	str	r1, [r3, #12]
 8005894:	e7e3      	b.n	800585e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8005896:	2002      	movs	r0, #2
 8005898:	e7cc      	b.n	8005834 <HAL_DMA_Start_IT+0x24>

0800589a <HAL_DMA_Abort>:
{
 800589a:	b570      	push	{r4, r5, r6, lr}
 800589c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800589e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80058a0:	f7ff fb3e 	bl	8004f20 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d006      	beq.n	80058bc <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80058b8:	2001      	movs	r0, #1
}
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	6813      	ldr	r3, [r2, #0]
 80058c2:	f023 0316 	bic.w	r3, r3, #22
 80058c6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	6953      	ldr	r3, [r2, #20]
 80058cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058d4:	b1e3      	cbz	r3, 8005910 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	6813      	ldr	r3, [r2, #0]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f013 0f01 	tst.w	r3, #1
 80058f2:	d011      	beq.n	8005918 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058f4:	f7ff fb14 	bl	8004f20 <HAL_GetTick>
 80058f8:	1b43      	subs	r3, r0, r5
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d9f5      	bls.n	80058ea <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058fe:	2320      	movs	r3, #32
 8005900:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005902:	2300      	movs	r3, #0
 8005904:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005908:	2003      	movs	r0, #3
 800590a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800590e:	e7d4      	b.n	80058ba <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005910:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1df      	bne.n	80058d6 <HAL_DMA_Abort+0x3c>
 8005916:	e7e3      	b.n	80058e0 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005918:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800591a:	233f      	movs	r3, #63	; 0x3f
 800591c:	4093      	lsls	r3, r2
 800591e:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005920:	2000      	movs	r0, #0
 8005922:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005926:	2301      	movs	r3, #1
 8005928:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800592c:	e7c5      	b.n	80058ba <HAL_DMA_Abort+0x20>

0800592e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800592e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d003      	beq.n	8005940 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005938:	2380      	movs	r3, #128	; 0x80
 800593a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800593c:	2001      	movs	r0, #1
 800593e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005940:	2305      	movs	r3, #5
 8005942:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005946:	6802      	ldr	r2, [r0, #0]
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005950:	2000      	movs	r0, #0
}
 8005952:	4770      	bx	lr

08005954 <HAL_DMA_IRQHandler>:
{
 8005954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005956:	b083      	sub	sp, #12
 8005958:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800595e:	4b72      	ldr	r3, [pc, #456]	; (8005b28 <HAL_DMA_IRQHandler+0x1d4>)
 8005960:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005962:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005964:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005966:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005968:	2308      	movs	r3, #8
 800596a:	4093      	lsls	r3, r2
 800596c:	422b      	tst	r3, r5
 800596e:	d010      	beq.n	8005992 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005970:	6803      	ldr	r3, [r0, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f012 0f04 	tst.w	r2, #4
 8005978:	d00b      	beq.n	8005992 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005982:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005984:	2308      	movs	r3, #8
 8005986:	4093      	lsls	r3, r2
 8005988:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800598a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005992:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005994:	2301      	movs	r3, #1
 8005996:	4093      	lsls	r3, r2
 8005998:	422b      	tst	r3, r5
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	6952      	ldr	r2, [r2, #20]
 80059a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059a6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059b2:	2304      	movs	r3, #4
 80059b4:	4093      	lsls	r3, r2
 80059b6:	422b      	tst	r3, r5
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059ba:	6822      	ldr	r2, [r4, #0]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	f012 0f02 	tst.w	r2, #2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059c4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059d0:	2310      	movs	r3, #16
 80059d2:	4093      	lsls	r3, r2
 80059d4:	422b      	tst	r3, r5
 80059d6:	d024      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	f012 0f08 	tst.w	r2, #8
 80059e0:	d01f      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059e2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80059ec:	d00d      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80059f4:	d104      	bne.n	8005a00 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80059f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f8:	b19b      	cbz	r3, 8005a22 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80059fa:	4620      	mov	r0, r4
 80059fc:	4798      	blx	r3
 80059fe:	e010      	b.n	8005a22 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a02:	b173      	cbz	r3, 8005a22 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8005a04:	4620      	mov	r0, r4
 8005a06:	4798      	blx	r3
 8005a08:	e00b      	b.n	8005a22 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a10:	d103      	bne.n	8005a1a <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	f022 0208 	bic.w	r2, r2, #8
 8005a18:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a1c:	b10b      	cbz	r3, 8005a22 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a24:	2320      	movs	r3, #32
 8005a26:	4093      	lsls	r3, r2
 8005a28:	422b      	tst	r3, r5
 8005a2a:	d055      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	f012 0f10 	tst.w	r2, #16
 8005a34:	d050      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a36:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a38:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d00e      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005a4a:	d033      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a52:	d12a      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8005a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d03e      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4798      	blx	r3
 8005a5e:	e03b      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	f023 0316 	bic.w	r3, r3, #22
 8005a68:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	6953      	ldr	r3, [r2, #20]
 8005a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a72:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a76:	b1a3      	cbz	r3, 8005aa2 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	f023 0308 	bic.w	r3, r3, #8
 8005a80:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a84:	233f      	movs	r3, #63	; 0x3f
 8005a86:	4093      	lsls	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005a96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d043      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4798      	blx	r3
 8005aa0:	e040      	b.n	8005b24 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e7      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x124>
 8005aa8:	e7eb      	b.n	8005a82 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8005aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005aac:	b1a3      	cbz	r3, 8005ad8 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4798      	blx	r3
 8005ab2:	e011      	b.n	8005ad8 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005aba:	d109      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	f022 0210 	bic.w	r2, r2, #16
 8005ac2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ad2:	b10b      	cbz	r3, 8005ad8 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ada:	b31b      	cbz	r3, 8005b24 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ade:	f013 0f01 	tst.w	r3, #1
 8005ae2:	d01b      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <HAL_DMA_IRQHandler+0x1d8>)
 8005ae6:	fba3 3606 	umull	r3, r6, r3, r6
 8005aea:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8005aec:	2305      	movs	r3, #5
 8005aee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	6813      	ldr	r3, [r2, #0]
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	3301      	adds	r3, #1
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	42b3      	cmp	r3, r6
 8005b04:	d804      	bhi.n	8005b10 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f013 0f01 	tst.w	r3, #1
 8005b0e:	d1f5      	bne.n	8005afc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005b10:	2300      	movs	r3, #0
 8005b12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005b1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b1e:	b10b      	cbz	r3, 8005b24 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005b20:	4620      	mov	r0, r4
 8005b22:	4798      	blx	r3
}
 8005b24:	b003      	add	sp, #12
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b28:	20002b10 	.word	0x20002b10
 8005b2c:	1b4e81b5 	.word	0x1b4e81b5

08005b30 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b30:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b32:	490a      	ldr	r1, [pc, #40]	; (8005b5c <FLASH_Program_DoubleWord+0x2c>)
 8005b34:	690c      	ldr	r4, [r1, #16]
 8005b36:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8005b3a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005b3c:	690c      	ldr	r4, [r1, #16]
 8005b3e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8005b42:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b44:	690c      	ldr	r4, [r1, #16]
 8005b46:	f044 0401 	orr.w	r4, r4, #1
 8005b4a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005b4c:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005b4e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005b52:	6043      	str	r3, [r0, #4]
}
 8005b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40023c00 	.word	0x40023c00

08005b60 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <FLASH_Program_Word+0x20>)
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b68:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b70:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8005b7a:	6001      	str	r1, [r0, #0]
}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40023c00 	.word	0x40023c00

08005b84 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <FLASH_Program_HalfWord+0x20>)
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b8c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b94:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8005b9e:	8001      	strh	r1, [r0, #0]
}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023c00 	.word	0x40023c00

08005ba8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f013 0f10 	tst.w	r3, #16
 8005bb0:	d007      	beq.n	8005bc2 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <FLASH_SetErrorCode+0x88>)
 8005bb4:	69d3      	ldr	r3, [r2, #28]
 8005bb6:	f043 0310 	orr.w	r3, r3, #16
 8005bba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f013 0f20 	tst.w	r3, #32
 8005bca:	d007      	beq.n	8005bdc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <FLASH_SetErrorCode+0x88>)
 8005bce:	69d3      	ldr	r3, [r2, #28]
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005bd8:	2220      	movs	r2, #32
 8005bda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005be4:	d007      	beq.n	8005bf6 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <FLASH_SetErrorCode+0x88>)
 8005be8:	69d3      	ldr	r3, [r2, #28]
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005bf2:	2240      	movs	r2, #64	; 0x40
 8005bf4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bfe:	d007      	beq.n	8005c10 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005c00:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <FLASH_SetErrorCode+0x88>)
 8005c02:	69d3      	ldr	r3, [r2, #28]
 8005c04:	f043 0302 	orr.w	r3, r3, #2
 8005c08:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005c0c:	2280      	movs	r2, #128	; 0x80
 8005c0e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f013 0f02 	tst.w	r3, #2
 8005c18:	d007      	beq.n	8005c2a <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <FLASH_SetErrorCode+0x88>)
 8005c1c:	69d3      	ldr	r3, [r2, #28]
 8005c1e:	f043 0320 	orr.w	r3, r3, #32
 8005c22:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005c24:	4b01      	ldr	r3, [pc, #4]	; (8005c2c <FLASH_SetErrorCode+0x84>)
 8005c26:	2202      	movs	r2, #2
 8005c28:	60da      	str	r2, [r3, #12]
  }
}
 8005c2a:	4770      	bx	lr
 8005c2c:	40023c00 	.word	0x40023c00
 8005c30:	200034dc 	.word	0x200034dc

08005c34 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c34:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_FLASH_Unlock+0x20>)
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db01      	blt.n	8005c40 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2000      	movs	r0, #0
}
 8005c3e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <HAL_FLASH_Unlock+0x20>)
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <HAL_FLASH_Unlock+0x24>)
 8005c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c46:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8005c4a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c4c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	0fc0      	lsrs	r0, r0, #31
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40023c00 	.word	0x40023c00
 8005c58:	45670123 	.word	0x45670123

08005c5c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8005c5c:	4a03      	ldr	r2, [pc, #12]	; (8005c6c <HAL_FLASH_Lock+0x10>)
 8005c5e:	6913      	ldr	r3, [r2, #16]
 8005c60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c64:	6113      	str	r3, [r2, #16]
}
 8005c66:	2000      	movs	r0, #0
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40023c00 	.word	0x40023c00

08005c70 <FLASH_WaitForLastOperation>:
{ 
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <FLASH_WaitForLastOperation+0x5c>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8005c7a:	f7ff f951 	bl	8004f20 <HAL_GetTick>
 8005c7e:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005c80:	4d13      	ldr	r5, [pc, #76]	; (8005cd0 <FLASH_WaitForLastOperation+0x60>)
 8005c82:	68eb      	ldr	r3, [r5, #12]
 8005c84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005c88:	d00a      	beq.n	8005ca0 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8005c8a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005c8e:	d0f8      	beq.n	8005c82 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005c90:	b1cc      	cbz	r4, 8005cc6 <FLASH_WaitForLastOperation+0x56>
 8005c92:	f7ff f945 	bl	8004f20 <HAL_GetTick>
 8005c96:	1b80      	subs	r0, r0, r6
 8005c98:	42a0      	cmp	r0, r4
 8005c9a:	d9f2      	bls.n	8005c82 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8005c9c:	2003      	movs	r0, #3
 8005c9e:	e00d      	b.n	8005cbc <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <FLASH_WaitForLastOperation+0x60>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f013 0f01 	tst.w	r3, #1
 8005ca8:	d002      	beq.n	8005cb0 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <FLASH_WaitForLastOperation+0x60>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <FLASH_WaitForLastOperation+0x60>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8005cb8:	d101      	bne.n	8005cbe <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8005cba:	2000      	movs	r0, #0
}  
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 8005cbe:	f7ff ff73 	bl	8005ba8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	e7fa      	b.n	8005cbc <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8005cc6:	2003      	movs	r0, #3
 8005cc8:	e7f8      	b.n	8005cbc <FLASH_WaitForLastOperation+0x4c>
 8005cca:	bf00      	nop
 8005ccc:	200034dc 	.word	0x200034dc
 8005cd0:	40023c00 	.word	0x40023c00

08005cd4 <HAL_FLASH_Program>:
{
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	4615      	mov	r5, r2
  __HAL_LOCK(&pFlash);
 8005cd8:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <HAL_FLASH_Program+0x84>)
 8005cda:	7e12      	ldrb	r2, [r2, #24]
 8005cdc:	2a01      	cmp	r2, #1
 8005cde:	d039      	beq.n	8005d54 <HAL_FLASH_Program+0x80>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	460e      	mov	r6, r1
 8005ce4:	461f      	mov	r7, r3
 8005ce6:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <HAL_FLASH_Program+0x84>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cf0:	f7ff ffbe 	bl	8005c70 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005cf4:	b990      	cbnz	r0, 8005d1c <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005cf6:	b1ac      	cbz	r4, 8005d24 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005cf8:	2c01      	cmp	r4, #1
 8005cfa:	d021      	beq.n	8005d40 <HAL_FLASH_Program+0x6c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005cfc:	2c02      	cmp	r4, #2
 8005cfe:	d024      	beq.n	8005d4a <HAL_FLASH_Program+0x76>
      FLASH_Program_DoubleWord(Address, Data);
 8005d00:	462a      	mov	r2, r5
 8005d02:	463b      	mov	r3, r7
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff ff13 	bl	8005b30 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d0e:	f7ff ffaf 	bl	8005c70 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <HAL_FLASH_Program+0x88>)
 8005d14:	6913      	ldr	r3, [r2, #16]
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_FLASH_Program+0x84>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	761a      	strb	r2, [r3, #24]
}
 8005d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005d24:	b2ed      	uxtb	r5, r5
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <HAL_FLASH_Program+0x88>)
 8005d28:	6919      	ldr	r1, [r3, #16]
 8005d2a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005d2e:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d34:	6919      	ldr	r1, [r3, #16]
 8005d36:	f041 0101 	orr.w	r1, r1, #1
 8005d3a:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8005d3c:	7035      	strb	r5, [r6, #0]
}
 8005d3e:	e7e4      	b.n	8005d0a <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005d40:	b2a9      	uxth	r1, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7ff ff1e 	bl	8005b84 <FLASH_Program_HalfWord>
 8005d48:	e7df      	b.n	8005d0a <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff ff07 	bl	8005b60 <FLASH_Program_Word>
 8005d52:	e7da      	b.n	8005d0a <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8005d54:	2002      	movs	r0, #2
 8005d56:	e7e4      	b.n	8005d22 <HAL_FLASH_Program+0x4e>
 8005d58:	200034dc 	.word	0x200034dc
 8005d5c:	40023c00 	.word	0x40023c00

08005d60 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <FLASH_MassErase+0x20>)
 8005d62:	6919      	ldr	r1, [r3, #16]
 8005d64:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005d68:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005d6a:	6919      	ldr	r1, [r3, #16]
 8005d6c:	f041 0104 	orr.w	r1, r1, #4
 8005d70:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005d78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d7c:	611a      	str	r2, [r3, #16]
}
 8005d7e:	4770      	bx	lr
 8005d80:	40023c00 	.word	0x40023c00

08005d84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005d84:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005d86:	b141      	cbz	r1, 8005d9a <FLASH_Erase_Sector+0x16>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005d88:	2901      	cmp	r1, #1
 8005d8a:	d020      	beq.n	8005dce <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005d8c:	2902      	cmp	r1, #2
 8005d8e:	bf0c      	ite	eq
 8005d90:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8005d94:	f44f 7440 	movne.w	r4, #768	; 0x300
 8005d98:	e000      	b.n	8005d9c <FLASH_Erase_Sector+0x18>
     tmp_psize = FLASH_PSIZE_BYTE;
 8005d9a:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <FLASH_Erase_Sector+0x50>)
 8005d9e:	6919      	ldr	r1, [r3, #16]
 8005da0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005da4:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	4322      	orrs	r2, r4
 8005daa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005db2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8005dba:	f040 0002 	orr.w	r0, r0, #2
 8005dbe:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005dc6:	611a      	str	r2, [r3, #16]
}
 8005dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dcc:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005dce:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005dd2:	e7e3      	b.n	8005d9c <FLASH_Erase_Sector+0x18>
 8005dd4:	40023c00 	.word	0x40023c00

08005dd8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005dd8:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <FLASH_FlushCaches+0x5c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005de0:	d010      	beq.n	8005e04 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <FLASH_FlushCaches+0x5c>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dea:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dfa:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e02:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <FLASH_FlushCaches+0x5c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005e0c:	d010      	beq.n	8005e30 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <FLASH_FlushCaches+0x5c>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e16:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e26:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e2e:	601a      	str	r2, [r3, #0]
  }
}
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40023c00 	.word	0x40023c00

08005e38 <HAL_FLASHEx_Erase>:
{
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8005e3c:	4b26      	ldr	r3, [pc, #152]	; (8005ed8 <HAL_FLASHEx_Erase+0xa0>)
 8005e3e:	7e1b      	ldrb	r3, [r3, #24]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d045      	beq.n	8005ed0 <HAL_FLASHEx_Erase+0x98>
 8005e44:	4604      	mov	r4, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <HAL_FLASHEx_Erase+0xa0>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e52:	f7ff ff0d 	bl	8005c70 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005e56:	4681      	mov	r9, r0
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d133      	bne.n	8005ec4 <HAL_FLASHEx_Erase+0x8c>
    *SectorError = 0xFFFFFFFFU;
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d01b      	beq.n	8005ea0 <HAL_FLASHEx_Erase+0x68>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e68:	68a5      	ldr	r5, [r4, #8]
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	442b      	add	r3, r5
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	d226      	bcs.n	8005ec0 <HAL_FLASHEx_Erase+0x88>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e72:	f24c 3850 	movw	r8, #50000	; 0xc350
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005e76:	4e19      	ldr	r6, [pc, #100]	; (8005edc <HAL_FLASHEx_Erase+0xa4>)
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005e78:	7c21      	ldrb	r1, [r4, #16]
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff ff82 	bl	8005d84 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e80:	4640      	mov	r0, r8
 8005e82:	f7ff fef5 	bl	8005c70 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005e86:	6933      	ldr	r3, [r6, #16]
 8005e88:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005e8c:	6133      	str	r3, [r6, #16]
        if(status != HAL_OK) 
 8005e8e:	4681      	mov	r9, r0
 8005e90:	b9a8      	cbnz	r0, 8005ebe <HAL_FLASHEx_Erase+0x86>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e92:	3501      	adds	r5, #1
 8005e94:	68e3      	ldr	r3, [r4, #12]
 8005e96:	68a2      	ldr	r2, [r4, #8]
 8005e98:	4413      	add	r3, r2
 8005e9a:	42ab      	cmp	r3, r5
 8005e9c:	d8ec      	bhi.n	8005e78 <HAL_FLASHEx_Erase+0x40>
 8005e9e:	e00f      	b.n	8005ec0 <HAL_FLASHEx_Erase+0x88>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	7c20      	ldrb	r0, [r4, #16]
 8005ea4:	f7ff ff5c 	bl	8005d60 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ea8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005eac:	f7ff fee0 	bl	8005c70 <FLASH_WaitForLastOperation>
 8005eb0:	4681      	mov	r9, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <HAL_FLASHEx_Erase+0xa4>)
 8005eb4:	6913      	ldr	r3, [r2, #16]
 8005eb6:	f023 0304 	bic.w	r3, r3, #4
 8005eba:	6113      	str	r3, [r2, #16]
 8005ebc:	e000      	b.n	8005ec0 <HAL_FLASHEx_Erase+0x88>
          *SectorError = index;
 8005ebe:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();    
 8005ec0:	f7ff ff8a 	bl	8005dd8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <HAL_FLASHEx_Erase+0xa0>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	761a      	strb	r2, [r3, #24]
}
 8005eca:	4648      	mov	r0, r9
 8005ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8005ed0:	f04f 0902 	mov.w	r9, #2
 8005ed4:	e7f9      	b.n	8005eca <HAL_FLASHEx_Erase+0x92>
 8005ed6:	bf00      	nop
 8005ed8:	200034dc 	.word	0x200034dc
 8005edc:	40023c00 	.word	0x40023c00

08005ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ee6:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ee8:	4e73      	ldr	r6, [pc, #460]	; (80060b8 <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eea:	4d74      	ldr	r5, [pc, #464]	; (80060bc <HAL_GPIO_Init+0x1dc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eec:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80060c4 <HAL_GPIO_Init+0x1e4>
 8005ef0:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80060c8 <HAL_GPIO_Init+0x1e8>
 8005ef4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80060cc <HAL_GPIO_Init+0x1ec>
 8005ef8:	e049      	b.n	8005f8e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR; 
 8005efa:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005efe:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8005f02:	2203      	movs	r2, #3
 8005f04:	fa02 f20b 	lsl.w	r2, r2, fp
 8005f08:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f0c:	68ca      	ldr	r2, [r1, #12]
 8005f0e:	fa02 f20b 	lsl.w	r2, r2, fp
 8005f12:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 8005f16:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8005f18:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f1a:	ea22 0a04 	bic.w	sl, r2, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f1e:	684a      	ldr	r2, [r1, #4]
 8005f20:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8005f24:	409c      	lsls	r4, r3
 8005f26:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 8005f2a:	6044      	str	r4, [r0, #4]
 8005f2c:	e03d      	b.n	8005faa <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f2e:	2400      	movs	r4, #0
 8005f30:	fa04 f40b 	lsl.w	r4, r4, fp
 8005f34:	ea44 040a 	orr.w	r4, r4, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f38:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR;
 8005f3a:	682c      	ldr	r4, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8005f3c:	ea6f 0208 	mvn.w	r2, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f40:	684f      	ldr	r7, [r1, #4]
 8005f42:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005f46:	bf0c      	ite	eq
 8005f48:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8005f4a:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->IMR = temp;
 8005f4e:	602c      	str	r4, [r5, #0]

        temp = EXTI->EMR;
 8005f50:	686c      	ldr	r4, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f52:	684f      	ldr	r7, [r1, #4]
 8005f54:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005f58:	bf0c      	ite	eq
 8005f5a:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8005f5c:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->EMR = temp;
 8005f60:	606c      	str	r4, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f62:	68ac      	ldr	r4, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f64:	684f      	ldr	r7, [r1, #4]
 8005f66:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005f6a:	bf0c      	ite	eq
 8005f6c:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 8005f6e:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->RTSR = temp;
 8005f72:	60ac      	str	r4, [r5, #8]

        temp = EXTI->FTSR;
 8005f74:	68ec      	ldr	r4, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f76:	684f      	ldr	r7, [r1, #4]
 8005f78:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005f7c:	bf0c      	ite	eq
 8005f7e:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8005f80:	ea48 0204 	orrne.w	r2, r8, r4
        }
        EXTI->FTSR = temp;
 8005f84:	60ea      	str	r2, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f86:	3301      	adds	r3, #1
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	f000 8091 	beq.w	80060b0 <HAL_GPIO_Init+0x1d0>
    ioposition = 0x01U << position;
 8005f8e:	2401      	movs	r4, #1
 8005f90:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f92:	680a      	ldr	r2, [r1, #0]
 8005f94:	ea04 0802 	and.w	r8, r4, r2
    if(iocurrent == ioposition)
 8005f98:	ea34 0202 	bics.w	r2, r4, r2
 8005f9c:	d1f3      	bne.n	8005f86 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f9e:	684a      	ldr	r2, [r1, #4]
 8005fa0:	f002 0203 	and.w	r2, r2, #3
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	2a01      	cmp	r2, #1
 8005fa8:	d9a7      	bls.n	8005efa <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005faa:	684a      	ldr	r2, [r1, #4]
 8005fac:	f002 0203 	and.w	r2, r2, #3
 8005fb0:	2a03      	cmp	r2, #3
 8005fb2:	d025      	beq.n	8006000 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8005fb4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fb6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8005fba:	2203      	movs	r2, #3
 8005fbc:	fa02 f20a 	lsl.w	r2, r2, sl
 8005fc0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fc4:	688a      	ldr	r2, [r1, #8]
 8005fc6:	fa02 f20a 	lsl.w	r2, r2, sl
 8005fca:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005fcc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fce:	684a      	ldr	r2, [r1, #4]
 8005fd0:	f002 0203 	and.w	r2, r2, #3
 8005fd4:	2a02      	cmp	r2, #2
 8005fd6:	d113      	bne.n	8006000 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8005fd8:	08dc      	lsrs	r4, r3, #3
 8005fda:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005fde:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fe2:	f003 0207 	and.w	r2, r3, #7
 8005fe6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8005fea:	220f      	movs	r2, #15
 8005fec:	fa02 f20b 	lsl.w	r2, r2, fp
 8005ff0:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ff4:	690a      	ldr	r2, [r1, #16]
 8005ff6:	fa02 f20b 	lsl.w	r2, r2, fp
 8005ffa:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005ffe:	6222      	str	r2, [r4, #32]
      temp = GPIOx->MODER;
 8006000:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006002:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8006006:	2203      	movs	r2, #3
 8006008:	fa02 f20a 	lsl.w	r2, r2, sl
 800600c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006010:	684a      	ldr	r2, [r1, #4]
 8006012:	f002 0203 	and.w	r2, r2, #3
 8006016:	fa02 f20a 	lsl.w	r2, r2, sl
 800601a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800601c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800601e:	684a      	ldr	r2, [r1, #4]
 8006020:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8006024:	d0af      	beq.n	8005f86 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006026:	2200      	movs	r2, #0
 8006028:	9201      	str	r2, [sp, #4]
 800602a:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800602c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006030:	6472      	str	r2, [r6, #68]	; 0x44
 8006032:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006034:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006038:	9201      	str	r2, [sp, #4]
 800603a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800603c:	f023 0203 	bic.w	r2, r3, #3
 8006040:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006044:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8006048:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800604c:	f003 0403 	and.w	r4, r3, #3
 8006050:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006054:	240f      	movs	r4, #15
 8006056:	fa04 f40b 	lsl.w	r4, r4, fp
 800605a:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800605e:	4c18      	ldr	r4, [pc, #96]	; (80060c0 <HAL_GPIO_Init+0x1e0>)
 8006060:	42a0      	cmp	r0, r4
 8006062:	f43f af64 	beq.w	8005f2e <HAL_GPIO_Init+0x4e>
 8006066:	4560      	cmp	r0, ip
 8006068:	d016      	beq.n	8006098 <HAL_GPIO_Init+0x1b8>
 800606a:	4570      	cmp	r0, lr
 800606c:	d016      	beq.n	800609c <HAL_GPIO_Init+0x1bc>
 800606e:	4548      	cmp	r0, r9
 8006070:	d016      	beq.n	80060a0 <HAL_GPIO_Init+0x1c0>
 8006072:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8006076:	42a0      	cmp	r0, r4
 8006078:	d014      	beq.n	80060a4 <HAL_GPIO_Init+0x1c4>
 800607a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800607e:	42a0      	cmp	r0, r4
 8006080:	d012      	beq.n	80060a8 <HAL_GPIO_Init+0x1c8>
 8006082:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006086:	42a0      	cmp	r0, r4
 8006088:	d010      	beq.n	80060ac <HAL_GPIO_Init+0x1cc>
 800608a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800608e:	42a0      	cmp	r0, r4
 8006090:	bf0c      	ite	eq
 8006092:	2407      	moveq	r4, #7
 8006094:	2408      	movne	r4, #8
 8006096:	e74b      	b.n	8005f30 <HAL_GPIO_Init+0x50>
 8006098:	2401      	movs	r4, #1
 800609a:	e749      	b.n	8005f30 <HAL_GPIO_Init+0x50>
 800609c:	2402      	movs	r4, #2
 800609e:	e747      	b.n	8005f30 <HAL_GPIO_Init+0x50>
 80060a0:	2403      	movs	r4, #3
 80060a2:	e745      	b.n	8005f30 <HAL_GPIO_Init+0x50>
 80060a4:	2404      	movs	r4, #4
 80060a6:	e743      	b.n	8005f30 <HAL_GPIO_Init+0x50>
 80060a8:	2405      	movs	r4, #5
 80060aa:	e741      	b.n	8005f30 <HAL_GPIO_Init+0x50>
 80060ac:	2406      	movs	r4, #6
 80060ae:	e73f      	b.n	8005f30 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 80060b0:	b003      	add	sp, #12
 80060b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800
 80060bc:	40013c00 	.word	0x40013c00
 80060c0:	40020000 	.word	0x40020000
 80060c4:	40020400 	.word	0x40020400
 80060c8:	40020800 	.word	0x40020800
 80060cc:	40020c00 	.word	0x40020c00

080060d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060d0:	b10a      	cbz	r2, 80060d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060d2:	6181      	str	r1, [r0, #24]
 80060d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060d6:	0409      	lsls	r1, r1, #16
 80060d8:	6181      	str	r1, [r0, #24]
  }
}
 80060da:	4770      	bx	lr

080060dc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80060dc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060de:	ea01 0203 	and.w	r2, r1, r3
 80060e2:	ea21 0103 	bic.w	r1, r1, r3
 80060e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060ea:	6181      	str	r1, [r0, #24]
}
 80060ec:	4770      	bx	lr
	...

080060f0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f000 81e2 	beq.w	80064ba <HAL_RCC_OscConfig+0x3ca>
{
 80060f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060fe:	6803      	ldr	r3, [r0, #0]
 8006100:	f013 0f01 	tst.w	r3, #1
 8006104:	d03b      	beq.n	800617e <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006106:	4ba7      	ldr	r3, [pc, #668]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b04      	cmp	r3, #4
 8006110:	d02c      	beq.n	800616c <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006112:	4ba4      	ldr	r3, [pc, #656]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800611a:	2b08      	cmp	r3, #8
 800611c:	d021      	beq.n	8006162 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006124:	d04f      	beq.n	80061c6 <HAL_RCC_OscConfig+0xd6>
 8006126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800612a:	d052      	beq.n	80061d2 <HAL_RCC_OscConfig+0xe2>
 800612c:	4b9d      	ldr	r3, [pc, #628]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800613c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d050      	beq.n	80061e6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fe feec 	bl	8004f20 <HAL_GetTick>
 8006148:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	4e96      	ldr	r6, [pc, #600]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006152:	d114      	bne.n	800617e <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006154:	f7fe fee4 	bl	8004f20 <HAL_GetTick>
 8006158:	1b40      	subs	r0, r0, r5
 800615a:	2864      	cmp	r0, #100	; 0x64
 800615c:	d9f6      	bls.n	800614c <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 800615e:	2003      	movs	r0, #3
 8006160:	e1b2      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006162:	4b90      	ldr	r3, [pc, #576]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800616a:	d0d8      	beq.n	800611e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800616c:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006174:	d003      	beq.n	800617e <HAL_RCC_OscConfig+0x8e>
 8006176:	6863      	ldr	r3, [r4, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 81a0 	beq.w	80064be <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	f013 0f02 	tst.w	r3, #2
 8006184:	d054      	beq.n	8006230 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006186:	4b87      	ldr	r3, [pc, #540]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f013 0f0c 	tst.w	r3, #12
 800618e:	d03e      	beq.n	800620e <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006190:	4b84      	ldr	r3, [pc, #528]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006198:	2b08      	cmp	r3, #8
 800619a:	d033      	beq.n	8006204 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800619c:	68e3      	ldr	r3, [r4, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d067      	beq.n	8006272 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061a2:	4b81      	ldr	r3, [pc, #516]	; (80063a8 <HAL_RCC_OscConfig+0x2b8>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fe feba 	bl	8004f20 <HAL_GetTick>
 80061ac:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ae:	4e7d      	ldr	r6, [pc, #500]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80061b0:	6833      	ldr	r3, [r6, #0]
 80061b2:	f013 0f02 	tst.w	r3, #2
 80061b6:	d153      	bne.n	8006260 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fe feb2 	bl	8004f20 <HAL_GetTick>
 80061bc:	1b40      	subs	r0, r0, r5
 80061be:	2802      	cmp	r0, #2
 80061c0:	d9f6      	bls.n	80061b0 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80061c2:	2003      	movs	r0, #3
 80061c4:	e180      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c6:	4a77      	ldr	r2, [pc, #476]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e7b5      	b.n	800613e <HAL_RCC_OscConfig+0x4e>
 80061d2:	4b74      	ldr	r3, [pc, #464]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e7ab      	b.n	800613e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80061e6:	f7fe fe9b 	bl	8004f20 <HAL_GetTick>
 80061ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ec:	4e6d      	ldr	r6, [pc, #436]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80061ee:	6833      	ldr	r3, [r6, #0]
 80061f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80061f4:	d0c3      	beq.n	800617e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f6:	f7fe fe93 	bl	8004f20 <HAL_GetTick>
 80061fa:	1b40      	subs	r0, r0, r5
 80061fc:	2864      	cmp	r0, #100	; 0x64
 80061fe:	d9f6      	bls.n	80061ee <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8006200:	2003      	movs	r0, #3
 8006202:	e161      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006204:	4b67      	ldr	r3, [pc, #412]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800620c:	d1c6      	bne.n	800619c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800620e:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f013 0f02 	tst.w	r3, #2
 8006216:	d003      	beq.n	8006220 <HAL_RCC_OscConfig+0x130>
 8006218:	68e3      	ldr	r3, [r4, #12]
 800621a:	2b01      	cmp	r3, #1
 800621c:	f040 8151 	bne.w	80064c2 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006220:	4a60      	ldr	r2, [pc, #384]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	6921      	ldr	r1, [r4, #16]
 8006226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800622a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800622e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	f013 0f08 	tst.w	r3, #8
 8006236:	d040      	beq.n	80062ba <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006238:	6963      	ldr	r3, [r4, #20]
 800623a:	b363      	cbz	r3, 8006296 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800623c:	4b5b      	ldr	r3, [pc, #364]	; (80063ac <HAL_RCC_OscConfig+0x2bc>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006242:	f7fe fe6d 	bl	8004f20 <HAL_GetTick>
 8006246:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006248:	4e56      	ldr	r6, [pc, #344]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 800624a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800624c:	f013 0f02 	tst.w	r3, #2
 8006250:	d133      	bne.n	80062ba <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006252:	f7fe fe65 	bl	8004f20 <HAL_GetTick>
 8006256:	1b40      	subs	r0, r0, r5
 8006258:	2802      	cmp	r0, #2
 800625a:	d9f6      	bls.n	800624a <HAL_RCC_OscConfig+0x15a>
        {
          return HAL_TIMEOUT;
 800625c:	2003      	movs	r0, #3
 800625e:	e133      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006260:	4a50      	ldr	r2, [pc, #320]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	6921      	ldr	r1, [r4, #16]
 8006266:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800626a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e7de      	b.n	8006230 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006272:	4b4d      	ldr	r3, [pc, #308]	; (80063a8 <HAL_RCC_OscConfig+0x2b8>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006278:	f7fe fe52 	bl	8004f20 <HAL_GetTick>
 800627c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800627e:	4e49      	ldr	r6, [pc, #292]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	f013 0f02 	tst.w	r3, #2
 8006286:	d0d3      	beq.n	8006230 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006288:	f7fe fe4a 	bl	8004f20 <HAL_GetTick>
 800628c:	1b40      	subs	r0, r0, r5
 800628e:	2802      	cmp	r0, #2
 8006290:	d9f6      	bls.n	8006280 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8006292:	2003      	movs	r0, #3
 8006294:	e118      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006296:	4b45      	ldr	r3, [pc, #276]	; (80063ac <HAL_RCC_OscConfig+0x2bc>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629c:	f7fe fe40 	bl	8004f20 <HAL_GetTick>
 80062a0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062a2:	4e40      	ldr	r6, [pc, #256]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80062a4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80062a6:	f013 0f02 	tst.w	r3, #2
 80062aa:	d006      	beq.n	80062ba <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ac:	f7fe fe38 	bl	8004f20 <HAL_GetTick>
 80062b0:	1b40      	subs	r0, r0, r5
 80062b2:	2802      	cmp	r0, #2
 80062b4:	d9f6      	bls.n	80062a4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80062b6:	2003      	movs	r0, #3
 80062b8:	e106      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	f013 0f04 	tst.w	r3, #4
 80062c0:	d079      	beq.n	80063b6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c2:	4b38      	ldr	r3, [pc, #224]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062cc:	2300      	movs	r3, #0
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	4b34      	ldr	r3, [pc, #208]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80062e4:	2501      	movs	r5, #1
 80062e6:	e000      	b.n	80062ea <HAL_RCC_OscConfig+0x1fa>
    FlagStatus       pwrclkchanged = RESET;
 80062e8:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ea:	4b31      	ldr	r3, [pc, #196]	; (80063b0 <HAL_RCC_OscConfig+0x2c0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80062f2:	d021      	beq.n	8006338 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062f4:	68a3      	ldr	r3, [r4, #8]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d032      	beq.n	8006360 <HAL_RCC_OscConfig+0x270>
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d036      	beq.n	800636c <HAL_RCC_OscConfig+0x27c>
 80062fe:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	671a      	str	r2, [r3, #112]	; 0x70
 8006308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006310:	68a3      	ldr	r3, [r4, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d034      	beq.n	8006380 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006316:	f7fe fe03 	bl	8004f20 <HAL_GetTick>
 800631a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631c:	4f21      	ldr	r7, [pc, #132]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006324:	f013 0f02 	tst.w	r3, #2
 8006328:	d144      	bne.n	80063b4 <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632a:	f7fe fdf9 	bl	8004f20 <HAL_GetTick>
 800632e:	1b80      	subs	r0, r0, r6
 8006330:	4540      	cmp	r0, r8
 8006332:	d9f6      	bls.n	8006322 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8006334:	2003      	movs	r0, #3
 8006336:	e0c7      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006338:	4a1d      	ldr	r2, [pc, #116]	; (80063b0 <HAL_RCC_OscConfig+0x2c0>)
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006340:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006342:	f7fe fded 	bl	8004f20 <HAL_GetTick>
 8006346:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006348:	4f19      	ldr	r7, [pc, #100]	; (80063b0 <HAL_RCC_OscConfig+0x2c0>)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006350:	d1d0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006352:	f7fe fde5 	bl	8004f20 <HAL_GetTick>
 8006356:	1b80      	subs	r0, r0, r6
 8006358:	2802      	cmp	r0, #2
 800635a:	d9f6      	bls.n	800634a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800635c:	2003      	movs	r0, #3
 800635e:	e0b3      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006360:	4a10      	ldr	r2, [pc, #64]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 8006362:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	6713      	str	r3, [r2, #112]	; 0x70
 800636a:	e7d1      	b.n	8006310 <HAL_RCC_OscConfig+0x220>
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
 800636e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006370:	f042 0204 	orr.w	r2, r2, #4
 8006374:	671a      	str	r2, [r3, #112]	; 0x70
 8006376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006378:	f042 0201 	orr.w	r2, r2, #1
 800637c:	671a      	str	r2, [r3, #112]	; 0x70
 800637e:	e7c7      	b.n	8006310 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006380:	f7fe fdce 	bl	8004f20 <HAL_GetTick>
 8006384:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006386:	4f07      	ldr	r7, [pc, #28]	; (80063a4 <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006388:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800638e:	f013 0f02 	tst.w	r3, #2
 8006392:	d00f      	beq.n	80063b4 <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fe fdc4 	bl	8004f20 <HAL_GetTick>
 8006398:	1b80      	subs	r0, r0, r6
 800639a:	4540      	cmp	r0, r8
 800639c:	d9f6      	bls.n	800638c <HAL_RCC_OscConfig+0x29c>
        {
          return HAL_TIMEOUT;
 800639e:	2003      	movs	r0, #3
 80063a0:	e092      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800
 80063a8:	42470000 	.word	0x42470000
 80063ac:	42470e80 	.word	0x42470e80
 80063b0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b4:	b9ed      	cbnz	r5, 80063f2 <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b6:	69a3      	ldr	r3, [r4, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8084 	beq.w	80064c6 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063be:	4a49      	ldr	r2, [pc, #292]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 80063c0:	6892      	ldr	r2, [r2, #8]
 80063c2:	f002 020c 	and.w	r2, r2, #12
 80063c6:	2a08      	cmp	r2, #8
 80063c8:	d051      	beq.n	800646e <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d017      	beq.n	80063fe <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ce:	4b46      	ldr	r3, [pc, #280]	; (80064e8 <HAL_RCC_OscConfig+0x3f8>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fe fda4 	bl	8004f20 <HAL_GetTick>
 80063d8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063da:	4d42      	ldr	r5, [pc, #264]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80063e2:	d042      	beq.n	800646a <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e4:	f7fe fd9c 	bl	8004f20 <HAL_GetTick>
 80063e8:	1b00      	subs	r0, r0, r4
 80063ea:	2802      	cmp	r0, #2
 80063ec:	d9f6      	bls.n	80063dc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80063ee:	2003      	movs	r0, #3
 80063f0:	e06a      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80063f2:	4a3c      	ldr	r2, [pc, #240]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 80063f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80063f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063fa:	6413      	str	r3, [r2, #64]	; 0x40
 80063fc:	e7db      	b.n	80063b6 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <HAL_RCC_OscConfig+0x3f8>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006404:	f7fe fd8c 	bl	8004f20 <HAL_GetTick>
 8006408:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	4e36      	ldr	r6, [pc, #216]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 800640c:	6833      	ldr	r3, [r6, #0]
 800640e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006412:	d006      	beq.n	8006422 <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006414:	f7fe fd84 	bl	8004f20 <HAL_GetTick>
 8006418:	1b40      	subs	r0, r0, r5
 800641a:	2802      	cmp	r0, #2
 800641c:	d9f6      	bls.n	800640c <HAL_RCC_OscConfig+0x31c>
            return HAL_TIMEOUT;
 800641e:	2003      	movs	r0, #3
 8006420:	e052      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006422:	69e3      	ldr	r3, [r4, #28]
 8006424:	6a22      	ldr	r2, [r4, #32]
 8006426:	4313      	orrs	r3, r2
 8006428:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800642a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800642e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006436:	0852      	lsrs	r2, r2, #1
 8006438:	3a01      	subs	r2, #1
 800643a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643e:	4a29      	ldr	r2, [pc, #164]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 8006440:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <HAL_RCC_OscConfig+0x3f8>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006448:	f7fe fd6a 	bl	8004f20 <HAL_GetTick>
 800644c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644e:	4d25      	ldr	r5, [pc, #148]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006458:	f7fe fd62 	bl	8004f20 <HAL_GetTick>
 800645c:	1b00      	subs	r0, r0, r4
 800645e:	2802      	cmp	r0, #2
 8006460:	d9f6      	bls.n	8006450 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8006462:	2003      	movs	r0, #3
 8006464:	e030      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006466:	2000      	movs	r0, #0
 8006468:	e02e      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
 800646a:	2000      	movs	r0, #0
 800646c:	e02c      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800646e:	2b01      	cmp	r3, #1
 8006470:	d02d      	beq.n	80064ce <HAL_RCC_OscConfig+0x3de>
        pll_config = RCC->PLLCFGR;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <HAL_RCC_OscConfig+0x3f4>)
 8006474:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006476:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647a:	69e2      	ldr	r2, [r4, #28]
 800647c:	4291      	cmp	r1, r2
 800647e:	d128      	bne.n	80064d2 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006480:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006484:	6a21      	ldr	r1, [r4, #32]
 8006486:	428a      	cmp	r2, r1
 8006488:	d125      	bne.n	80064d6 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800648a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800648c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006490:	401a      	ands	r2, r3
 8006492:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006496:	d120      	bne.n	80064da <HAL_RCC_OscConfig+0x3ea>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006498:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800649c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800649e:	0852      	lsrs	r2, r2, #1
 80064a0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064a2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80064a6:	d11a      	bne.n	80064de <HAL_RCC_OscConfig+0x3ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ae:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 80064b2:	bf14      	ite	ne
 80064b4:	2001      	movne	r0, #1
 80064b6:	2000      	moveq	r0, #0
 80064b8:	e006      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 80064ba:	2001      	movs	r0, #1
}
 80064bc:	4770      	bx	lr
        return HAL_ERROR;
 80064be:	2001      	movs	r0, #1
 80064c0:	e002      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
        return HAL_ERROR;
 80064c2:	2001      	movs	r0, #1
 80064c4:	e000      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 80064c6:	2000      	movs	r0, #0
}
 80064c8:	b002      	add	sp, #8
 80064ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80064ce:	2001      	movs	r0, #1
 80064d0:	e7fa      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 80064d2:	2001      	movs	r0, #1
 80064d4:	e7f8      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
 80064d6:	2001      	movs	r0, #1
 80064d8:	e7f6      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
 80064da:	2001      	movs	r0, #1
 80064dc:	e7f4      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
 80064de:	2001      	movs	r0, #1
 80064e0:	e7f2      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d8>
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	42470060 	.word	0x42470060

080064ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ee:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d053      	beq.n	80065a2 <HAL_RCC_GetSysClockFreq+0xb6>
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d153      	bne.n	80065a6 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064fe:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800650c:	d028      	beq.n	8006560 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800650e:	4b27      	ldr	r3, [pc, #156]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006516:	0158      	lsls	r0, r3, #5
 8006518:	2100      	movs	r1, #0
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	f161 0100 	sbc.w	r1, r1, #0
 8006520:	018e      	lsls	r6, r1, #6
 8006522:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8006526:	0187      	lsls	r7, r0, #6
 8006528:	1a3c      	subs	r4, r7, r0
 800652a:	eb66 0501 	sbc.w	r5, r6, r1
 800652e:	00e9      	lsls	r1, r5, #3
 8006530:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8006534:	00e0      	lsls	r0, r4, #3
 8006536:	18c0      	adds	r0, r0, r3
 8006538:	f141 0100 	adc.w	r1, r1, #0
 800653c:	024b      	lsls	r3, r1, #9
 800653e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8006542:	0244      	lsls	r4, r0, #9
 8006544:	4620      	mov	r0, r4
 8006546:	4619      	mov	r1, r3
 8006548:	2300      	movs	r3, #0
 800654a:	f7fa fb25 	bl	8000b98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006556:	3301      	adds	r3, #1
 8006558:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800655a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800655e:	e023      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006568:	015c      	lsls	r4, r3, #5
 800656a:	2500      	movs	r5, #0
 800656c:	1ae4      	subs	r4, r4, r3
 800656e:	f165 0500 	sbc.w	r5, r5, #0
 8006572:	01ae      	lsls	r6, r5, #6
 8006574:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8006578:	01a7      	lsls	r7, r4, #6
 800657a:	1b38      	subs	r0, r7, r4
 800657c:	eb66 0105 	sbc.w	r1, r6, r5
 8006580:	00cc      	lsls	r4, r1, #3
 8006582:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8006586:	00c5      	lsls	r5, r0, #3
 8006588:	18e8      	adds	r0, r5, r3
 800658a:	f144 0100 	adc.w	r1, r4, #0
 800658e:	028b      	lsls	r3, r1, #10
 8006590:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006594:	0284      	lsls	r4, r0, #10
 8006596:	4620      	mov	r0, r4
 8006598:	4619      	mov	r1, r3
 800659a:	2300      	movs	r3, #0
 800659c:	f7fa fafc 	bl	8000b98 <__aeabi_uldivmod>
 80065a0:	e7d5      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x62>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065a2:	4803      	ldr	r0, [pc, #12]	; (80065b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80065a4:	e000      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0xbc>
      sysclockfreq = HSI_VALUE;
 80065a6:	4803      	ldr	r0, [pc, #12]	; (80065b4 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80065a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800
 80065b0:	007a1200 	.word	0x007a1200
 80065b4:	00f42400 	.word	0x00f42400

080065b8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80065b8:	2800      	cmp	r0, #0
 80065ba:	f000 809d 	beq.w	80066f8 <HAL_RCC_ClockConfig+0x140>
{
 80065be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	460d      	mov	r5, r1
 80065c4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065c6:	4b50      	ldr	r3, [pc, #320]	; (8006708 <HAL_RCC_ClockConfig+0x150>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	428b      	cmp	r3, r1
 80065d0:	d208      	bcs.n	80065e4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d2:	b2cb      	uxtb	r3, r1
 80065d4:	4a4c      	ldr	r2, [pc, #304]	; (8006708 <HAL_RCC_ClockConfig+0x150>)
 80065d6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d8:	6813      	ldr	r3, [r2, #0]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	428b      	cmp	r3, r1
 80065e0:	f040 808c 	bne.w	80066fc <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	f013 0f02 	tst.w	r3, #2
 80065ea:	d017      	beq.n	800661c <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ec:	f013 0f04 	tst.w	r3, #4
 80065f0:	d004      	beq.n	80065fc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065f2:	4a46      	ldr	r2, [pc, #280]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 80065f4:	6893      	ldr	r3, [r2, #8]
 80065f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065fa:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	f013 0f08 	tst.w	r3, #8
 8006602:	d004      	beq.n	800660e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006604:	4a41      	ldr	r2, [pc, #260]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 8006606:	6893      	ldr	r3, [r2, #8]
 8006608:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800660c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800660e:	4a3f      	ldr	r2, [pc, #252]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 8006610:	6893      	ldr	r3, [r2, #8]
 8006612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006616:	68a1      	ldr	r1, [r4, #8]
 8006618:	430b      	orrs	r3, r1
 800661a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	f013 0f01 	tst.w	r3, #1
 8006622:	d032      	beq.n	800668a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	2a01      	cmp	r2, #1
 8006628:	d021      	beq.n	800666e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800662a:	1e93      	subs	r3, r2, #2
 800662c:	2b01      	cmp	r3, #1
 800662e:	d925      	bls.n	800667c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f013 0f02 	tst.w	r3, #2
 8006638:	d062      	beq.n	8006700 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800663a:	4934      	ldr	r1, [pc, #208]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 800663c:	688b      	ldr	r3, [r1, #8]
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006646:	f7fe fc6b 	bl	8004f20 <HAL_GetTick>
 800664a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664c:	4f2f      	ldr	r7, [pc, #188]	; (800670c <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	6862      	ldr	r2, [r4, #4]
 800665a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800665e:	d014      	beq.n	800668a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006660:	f7fe fc5e 	bl	8004f20 <HAL_GetTick>
 8006664:	1b80      	subs	r0, r0, r6
 8006666:	4540      	cmp	r0, r8
 8006668:	d9f3      	bls.n	8006652 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
 800666c:	e042      	b.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666e:	4b27      	ldr	r3, [pc, #156]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006676:	d1e0      	bne.n	800663a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006678:	2001      	movs	r0, #1
 800667a:	e03b      	b.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667c:	4b23      	ldr	r3, [pc, #140]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006684:	d1d9      	bne.n	800663a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006686:	2001      	movs	r0, #1
 8006688:	e034      	b.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800668a:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <HAL_RCC_ClockConfig+0x150>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	42ab      	cmp	r3, r5
 8006694:	d907      	bls.n	80066a6 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006696:	b2ea      	uxtb	r2, r5
 8006698:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <HAL_RCC_ClockConfig+0x150>)
 800669a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	42ab      	cmp	r3, r5
 80066a4:	d12e      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f013 0f04 	tst.w	r3, #4
 80066ac:	d006      	beq.n	80066bc <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 80066b0:	6893      	ldr	r3, [r2, #8]
 80066b2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80066b6:	68e1      	ldr	r1, [r4, #12]
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	f013 0f08 	tst.w	r3, #8
 80066c2:	d007      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066c4:	4a11      	ldr	r2, [pc, #68]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 80066c6:	6893      	ldr	r3, [r2, #8]
 80066c8:	6921      	ldr	r1, [r4, #16]
 80066ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80066ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80066d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066d4:	f7ff ff0a 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <HAL_RCC_ClockConfig+0x154>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80066e0:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <HAL_RCC_ClockConfig+0x158>)
 80066e2:	5cd3      	ldrb	r3, [r2, r3]
 80066e4:	40d8      	lsrs	r0, r3
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <HAL_RCC_ClockConfig+0x15c>)
 80066e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCC_ClockConfig+0x160>)
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f7fe fbcb 	bl	8004e88 <HAL_InitTick>
  return HAL_OK;
 80066f2:	2000      	movs	r0, #0
}
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80066f8:	2001      	movs	r0, #1
}
 80066fa:	4770      	bx	lr
      return HAL_ERROR;
 80066fc:	2001      	movs	r0, #1
 80066fe:	e7f9      	b.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8006700:	2001      	movs	r0, #1
 8006702:	e7f7      	b.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8006704:	2001      	movs	r0, #1
 8006706:	e7f5      	b.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
 8006708:	40023c00 	.word	0x40023c00
 800670c:	40023800 	.word	0x40023800
 8006710:	0800a284 	.word	0x0800a284
 8006714:	20002b10 	.word	0x20002b10
 8006718:	20002b18 	.word	0x20002b18

0800671c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <HAL_RCC_GetPCLK1Freq+0x14>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006724:	4a03      	ldr	r2, [pc, #12]	; (8006734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006726:	5cd3      	ldrb	r3, [r2, r3]
 8006728:	4a03      	ldr	r2, [pc, #12]	; (8006738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800672a:	6810      	ldr	r0, [r2, #0]
}
 800672c:	40d8      	lsrs	r0, r3
 800672e:	4770      	bx	lr
 8006730:	40023800 	.word	0x40023800
 8006734:	0800a294 	.word	0x0800a294
 8006738:	20002b10 	.word	0x20002b10

0800673c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <HAL_RCC_GetPCLK2Freq+0x14>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006744:	4a03      	ldr	r2, [pc, #12]	; (8006754 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006746:	5cd3      	ldrb	r3, [r2, r3]
 8006748:	4a03      	ldr	r2, [pc, #12]	; (8006758 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800674a:	6810      	ldr	r0, [r2, #0]
}
 800674c:	40d8      	lsrs	r0, r3
 800674e:	4770      	bx	lr
 8006750:	40023800 	.word	0x40023800
 8006754:	0800a294 	.word	0x0800a294
 8006758:	20002b10 	.word	0x20002b10

0800675c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800675c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675e:	6a03      	ldr	r3, [r0, #32]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006766:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800676c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006770:	680d      	ldr	r5, [r1, #0]
 8006772:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006774:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006778:	688d      	ldr	r5, [r1, #8]
 800677a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800677c:	4d10      	ldr	r5, [pc, #64]	; (80067c0 <TIM_OC1_SetConfig+0x64>)
 800677e:	42a8      	cmp	r0, r5
 8006780:	d00a      	beq.n	8006798 <TIM_OC1_SetConfig+0x3c>
 8006782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006786:	42a8      	cmp	r0, r5
 8006788:	d112      	bne.n	80067b0 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800678a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800678e:	68cd      	ldr	r5, [r1, #12]
 8006790:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006792:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006796:	e005      	b.n	80067a4 <TIM_OC1_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006798:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800679c:	68cd      	ldr	r5, [r1, #12]
 800679e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80067a0:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067a8:	694d      	ldr	r5, [r1, #20]
 80067aa:	698e      	ldr	r6, [r1, #24]
 80067ac:	4335      	orrs	r5, r6
 80067ae:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b2:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067b4:	684a      	ldr	r2, [r1, #4]
 80067b6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b8:	6203      	str	r3, [r0, #32]
}
 80067ba:	bc70      	pop	{r4, r5, r6}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40010000 	.word	0x40010000

080067c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067c6:	6a03      	ldr	r3, [r0, #32]
 80067c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	680d      	ldr	r5, [r1, #0]
 80067da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067e0:	688d      	ldr	r5, [r1, #8]
 80067e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067e6:	4d12      	ldr	r5, [pc, #72]	; (8006830 <TIM_OC3_SetConfig+0x6c>)
 80067e8:	42a8      	cmp	r0, r5
 80067ea:	d00b      	beq.n	8006804 <TIM_OC3_SetConfig+0x40>
 80067ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80067f0:	42a8      	cmp	r0, r5
 80067f2:	d115      	bne.n	8006820 <TIM_OC3_SetConfig+0x5c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067f8:	68cd      	ldr	r5, [r1, #12]
 80067fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006802:	e006      	b.n	8006812 <TIM_OC3_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006808:	68cd      	ldr	r5, [r1, #12]
 800680a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800680e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006812:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006816:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006818:	698e      	ldr	r6, [r1, #24]
 800681a:	4335      	orrs	r5, r6
 800681c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006820:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006822:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006824:	684a      	ldr	r2, [r1, #4]
 8006826:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	6203      	str	r3, [r0, #32]
}
 800682a:	bc70      	pop	{r4, r5, r6}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000

08006834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006836:	6a03      	ldr	r3, [r0, #32]
 8006838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800683c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006840:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006844:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006848:	680d      	ldr	r5, [r1, #0]
 800684a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800684e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006852:	688d      	ldr	r5, [r1, #8]
 8006854:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	4d09      	ldr	r5, [pc, #36]	; (8006880 <TIM_OC4_SetConfig+0x4c>)
 800685a:	42a8      	cmp	r0, r5
 800685c:	d003      	beq.n	8006866 <TIM_OC4_SetConfig+0x32>
 800685e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006862:	42a8      	cmp	r0, r5
 8006864:	d104      	bne.n	8006870 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006866:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800686a:	694d      	ldr	r5, [r1, #20]
 800686c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006870:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006872:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006874:	684a      	ldr	r2, [r1, #4]
 8006876:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006878:	6203      	str	r3, [r0, #32]
}
 800687a:	bc30      	pop	{r4, r5}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40010000 	.word	0x40010000

08006884 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006884:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	d137      	bne.n	80068fe <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800688e:	2302      	movs	r3, #2
 8006890:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006894:	6802      	ldr	r2, [r0, #0]
 8006896:	68d3      	ldr	r3, [r2, #12]
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	6803      	ldr	r3, [r0, #0]
 80068a0:	4a19      	ldr	r2, [pc, #100]	; (8006908 <HAL_TIM_Base_Start_IT+0x84>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d020      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068aa:	d01d      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068ac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d019      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d015      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d011      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068c4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00d      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068cc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
 80068d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80068d8:	4293      	cmp	r3, r2
 80068da:	d005      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80068e4:	2000      	movs	r0, #0
 80068e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ee:	2a06      	cmp	r2, #6
 80068f0:	d007      	beq.n	8006902 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80068fa:	2000      	movs	r0, #0
 80068fc:	4770      	bx	lr
    return HAL_ERROR;
 80068fe:	2001      	movs	r0, #1
 8006900:	4770      	bx	lr
  return HAL_OK;
 8006902:	2000      	movs	r0, #0
}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000

0800690c <HAL_TIM_PeriodElapsedCallback>:
}
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_IC_CaptureCallback>:
}
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_TriggerCallback>:
}
 8006912:	4770      	bx	lr

08006914 <HAL_TIM_IRQHandler>:
{
 8006914:	b510      	push	{r4, lr}
 8006916:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006918:	6803      	ldr	r3, [r0, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	f012 0f02 	tst.w	r2, #2
 8006920:	d011      	beq.n	8006946 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	f012 0f02 	tst.w	r2, #2
 8006928:	d00d      	beq.n	8006946 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800692a:	f06f 0202 	mvn.w	r2, #2
 800692e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006930:	2301      	movs	r3, #1
 8006932:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006934:	6803      	ldr	r3, [r0, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f013 0f03 	tst.w	r3, #3
 800693c:	d070      	beq.n	8006a20 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800693e:	f7ff ffe6 	bl	800690e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	2300      	movs	r3, #0
 8006944:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	f012 0f04 	tst.w	r2, #4
 800694e:	d012      	beq.n	8006976 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	f012 0f04 	tst.w	r2, #4
 8006956:	d00e      	beq.n	8006976 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006958:	f06f 0204 	mvn.w	r2, #4
 800695c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800695e:	2302      	movs	r3, #2
 8006960:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f413 7f40 	tst.w	r3, #768	; 0x300
 800696a:	d05f      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800696c:	4620      	mov	r0, r4
 800696e:	f7ff ffce 	bl	800690e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	2300      	movs	r3, #0
 8006974:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	f012 0f08 	tst.w	r2, #8
 800697e:	d012      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	f012 0f08 	tst.w	r2, #8
 8006986:	d00e      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006988:	f06f 0208 	mvn.w	r2, #8
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800698e:	2304      	movs	r3, #4
 8006990:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f013 0f03 	tst.w	r3, #3
 800699a:	d04e      	beq.n	8006a3a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff ffb6 	bl	800690e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	2300      	movs	r3, #0
 80069a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	f012 0f10 	tst.w	r2, #16
 80069ae:	d012      	beq.n	80069d6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	f012 0f10 	tst.w	r2, #16
 80069b6:	d00e      	beq.n	80069d6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069b8:	f06f 0210 	mvn.w	r2, #16
 80069bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069be:	2308      	movs	r3, #8
 80069c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80069ca:	d03d      	beq.n	8006a48 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80069cc:	4620      	mov	r0, r4
 80069ce:	f7ff ff9e 	bl	800690e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	2300      	movs	r3, #0
 80069d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	f012 0f01 	tst.w	r2, #1
 80069de:	d003      	beq.n	80069e8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	f012 0f01 	tst.w	r2, #1
 80069e6:	d136      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80069f0:	d003      	beq.n	80069fa <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80069f8:	d134      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a02:	d003      	beq.n	8006a0c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a0a:	d132      	bne.n	8006a72 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	f012 0f20 	tst.w	r2, #32
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	f012 0f20 	tst.w	r2, #32
 8006a1c:	d130      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x16c>
}
 8006a1e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a20:	f7fb fa1e 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff ff73 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a2a:	e78a      	b.n	8006942 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7fb fa17 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff ff6c 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a38:	e79b      	b.n	8006972 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7fb fa10 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7ff ff65 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a46:	e7ac      	b.n	80069a2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f7fb fa09 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff ff5e 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a54:	e7bd      	b.n	80069d2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a56:	f06f 0201 	mvn.w	r2, #1
 8006a5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7ff ff55 	bl	800690c <HAL_TIM_PeriodElapsedCallback>
 8006a62:	e7c1      	b.n	80069e8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fa50 	bl	8006f10 <HAL_TIMEx_BreakCallback>
 8006a70:	e7c3      	b.n	80069fa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff ff4a 	bl	8006912 <HAL_TIM_TriggerCallback>
 8006a7e:	e7c5      	b.n	8006a0c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a80:	f06f 0220 	mvn.w	r2, #32
 8006a84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fa41 	bl	8006f0e <HAL_TIMEx_CommutCallback>
}
 8006a8c:	e7c7      	b.n	8006a1e <HAL_TIM_IRQHandler+0x10a>
	...

08006a90 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006a90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a92:	4a40      	ldr	r2, [pc, #256]	; (8006b94 <TIM_Base_SetConfig+0x104>)
 8006a94:	4290      	cmp	r0, r2
 8006a96:	d05d      	beq.n	8006b54 <TIM_Base_SetConfig+0xc4>
 8006a98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006a9c:	d031      	beq.n	8006b02 <TIM_Base_SetConfig+0x72>
 8006a9e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006aa2:	4290      	cmp	r0, r2
 8006aa4:	d051      	beq.n	8006b4a <TIM_Base_SetConfig+0xba>
 8006aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aaa:	4290      	cmp	r0, r2
 8006aac:	d06d      	beq.n	8006b8a <TIM_Base_SetConfig+0xfa>
 8006aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ab2:	4290      	cmp	r0, r2
 8006ab4:	d064      	beq.n	8006b80 <TIM_Base_SetConfig+0xf0>
 8006ab6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006aba:	4290      	cmp	r0, r2
 8006abc:	d033      	beq.n	8006b26 <TIM_Base_SetConfig+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006abe:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006ac2:	4290      	cmp	r0, r2
 8006ac4:	d021      	beq.n	8006b0a <TIM_Base_SetConfig+0x7a>
 8006ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aca:	4290      	cmp	r0, r2
 8006acc:	d01d      	beq.n	8006b0a <TIM_Base_SetConfig+0x7a>
 8006ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ad2:	4290      	cmp	r0, r2
 8006ad4:	d019      	beq.n	8006b0a <TIM_Base_SetConfig+0x7a>
 8006ad6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006ada:	4290      	cmp	r0, r2
 8006adc:	d015      	beq.n	8006b0a <TIM_Base_SetConfig+0x7a>
 8006ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ae2:	4290      	cmp	r0, r2
 8006ae4:	d011      	beq.n	8006b0a <TIM_Base_SetConfig+0x7a>
 8006ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aea:	4290      	cmp	r0, r2
 8006aec:	d00d      	beq.n	8006b0a <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006af2:	694a      	ldr	r2, [r1, #20]
 8006af4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006af6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af8:	688b      	ldr	r3, [r1, #8]
 8006afa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006afc:	680b      	ldr	r3, [r1, #0]
 8006afe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b00:	e03b      	b.n	8006b7a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b06:	684a      	ldr	r2, [r1, #4]
 8006b08:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	68ca      	ldr	r2, [r1, #12]
 8006b10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b16:	694a      	ldr	r2, [r1, #20]
 8006b18:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b1a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b1c:	688b      	ldr	r3, [r1, #8]
 8006b1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b20:	680b      	ldr	r3, [r1, #0]
 8006b22:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b24:	e029      	b.n	8006b7a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b2a:	684a      	ldr	r2, [r1, #4]
 8006b2c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b32:	68ca      	ldr	r2, [r1, #12]
 8006b34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3a:	694a      	ldr	r2, [r1, #20]
 8006b3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b40:	688b      	ldr	r3, [r1, #8]
 8006b42:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b44:	680b      	ldr	r3, [r1, #0]
 8006b46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b48:	e015      	b.n	8006b76 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b4e:	684a      	ldr	r2, [r1, #4]
 8006b50:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b52:	e7da      	b.n	8006b0a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b58:	684a      	ldr	r2, [r1, #4]
 8006b5a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b60:	68ca      	ldr	r2, [r1, #12]
 8006b62:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b68:	694a      	ldr	r2, [r1, #20]
 8006b6a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b6e:	688b      	ldr	r3, [r1, #8]
 8006b70:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b72:	680b      	ldr	r3, [r1, #0]
 8006b74:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	6143      	str	r3, [r0, #20]
}
 8006b7e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b84:	684a      	ldr	r2, [r1, #4]
 8006b86:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b88:	e7bf      	b.n	8006b0a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b8e:	684a      	ldr	r2, [r1, #4]
 8006b90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b92:	e7ba      	b.n	8006b0a <TIM_Base_SetConfig+0x7a>
 8006b94:	40010000 	.word	0x40010000

08006b98 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8006b98:	b340      	cbz	r0, 8006bec <HAL_TIM_OC_Init+0x54>
{
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ba2:	b1f3      	cbz	r3, 8006be2 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006baa:	4621      	mov	r1, r4
 8006bac:	f851 0b04 	ldr.w	r0, [r1], #4
 8006bb0:	f7ff ff6e 	bl	8006a90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006bbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006bc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006bc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006bda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006bde:	2000      	movs	r0, #0
}
 8006be0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006be2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8006be6:	f7fd fffb 	bl	8004be0 <HAL_TIM_OC_MspInit>
 8006bea:	e7db      	b.n	8006ba4 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006bec:	2001      	movs	r0, #1
}
 8006bee:	4770      	bx	lr

08006bf0 <TIM_OC2_SetConfig>:
{
 8006bf0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf2:	6a03      	ldr	r3, [r0, #32]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006bfa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006bfc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006bfe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c00:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	680d      	ldr	r5, [r1, #0]
 8006c06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006c0a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c0e:	688d      	ldr	r5, [r1, #8]
 8006c10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c14:	4d11      	ldr	r5, [pc, #68]	; (8006c5c <TIM_OC2_SetConfig+0x6c>)
 8006c16:	42a8      	cmp	r0, r5
 8006c18:	d00b      	beq.n	8006c32 <TIM_OC2_SetConfig+0x42>
 8006c1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c1e:	42a8      	cmp	r0, r5
 8006c20:	d115      	bne.n	8006c4e <TIM_OC2_SetConfig+0x5e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c26:	68cd      	ldr	r5, [r1, #12]
 8006c28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c30:	e006      	b.n	8006c40 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c36:	68cd      	ldr	r5, [r1, #12]
 8006c38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c40:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c44:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c46:	698e      	ldr	r6, [r1, #24]
 8006c48:	4335      	orrs	r5, r6
 8006c4a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006c4e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c50:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006c52:	684a      	ldr	r2, [r1, #4]
 8006c54:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006c56:	6203      	str	r3, [r0, #32]
}
 8006c58:	bc70      	pop	{r4, r5, r6}
 8006c5a:	4770      	bx	lr
 8006c5c:	40010000 	.word	0x40010000

08006c60 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006c60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d022      	beq.n	8006cae <HAL_TIM_OC_ConfigChannel+0x4e>
{
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006c72:	2a0c      	cmp	r2, #12
 8006c74:	d80b      	bhi.n	8006c8e <HAL_TIM_OC_ConfigChannel+0x2e>
 8006c76:	e8df f002 	tbb	[pc, r2]
 8006c7a:	0a07      	.short	0x0a07
 8006c7c:	0a0e0a0a 	.word	0x0a0e0a0a
 8006c80:	0a120a0a 	.word	0x0a120a0a
 8006c84:	0a0a      	.short	0x0a0a
 8006c86:	16          	.byte	0x16
 8006c87:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c88:	6800      	ldr	r0, [r0, #0]
 8006c8a:	f7ff fd67 	bl	800675c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8006c8e:	2000      	movs	r0, #0
 8006c90:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006c94:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	f7ff ffaa 	bl	8006bf0 <TIM_OC2_SetConfig>
      break;
 8006c9c:	e7f7      	b.n	8006c8e <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c9e:	6800      	ldr	r0, [r0, #0]
 8006ca0:	f7ff fd90 	bl	80067c4 <TIM_OC3_SetConfig>
      break;
 8006ca4:	e7f3      	b.n	8006c8e <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	f7ff fdc4 	bl	8006834 <TIM_OC4_SetConfig>
      break;
 8006cac:	e7ef      	b.n	8006c8e <HAL_TIM_OC_ConfigChannel+0x2e>
  __HAL_LOCK(htim);
 8006cae:	2002      	movs	r0, #2
}
 8006cb0:	4770      	bx	lr

08006cb2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cb2:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb4:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cb8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cba:	2401      	movs	r4, #1
 8006cbc:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006cbe:	ea23 0304 	bic.w	r3, r3, r4
 8006cc2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc4:	6a03      	ldr	r3, [r0, #32]
 8006cc6:	408a      	lsls	r2, r1
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	6202      	str	r2, [r0, #32]
}
 8006ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIM_OC_Start_IT>:
{
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cd8:	460b      	mov	r3, r1
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	d13a      	bne.n	8006d54 <HAL_TIM_OC_Start_IT+0x80>
 8006cde:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	2a01      	cmp	r2, #1
 8006ce6:	f040 8096 	bne.w	8006e16 <HAL_TIM_OC_Start_IT+0x142>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	2202      	movs	r2, #2
 8006cec:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cf0:	6821      	ldr	r1, [r4, #0]
 8006cf2:	68ca      	ldr	r2, [r1, #12]
 8006cf4:	f042 0202 	orr.w	r2, r2, #2
 8006cf8:	60ca      	str	r2, [r1, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	f7ff ffd7 	bl	8006cb2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	4a49      	ldr	r2, [pc, #292]	; (8006e2c <HAL_TIM_OC_Start_IT+0x158>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d071      	beq.n	8006df0 <HAL_TIM_OC_Start_IT+0x11c>
 8006d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d06d      	beq.n	8006df0 <HAL_TIM_OC_Start_IT+0x11c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d072      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
 8006d1a:	4a45      	ldr	r2, [pc, #276]	; (8006e30 <HAL_TIM_OC_Start_IT+0x15c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d06f      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
 8006d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d06b      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
 8006d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d067      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
 8006d30:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d063      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
 8006d38:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d05f      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
 8006d40:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d05b      	beq.n	8006e00 <HAL_TIM_OC_Start_IT+0x12c>
    __HAL_TIM_ENABLE(htim);
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006d50:	2000      	movs	r0, #0
 8006d52:	e05f      	b.n	8006e14 <HAL_TIM_OC_Start_IT+0x140>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d54:	2904      	cmp	r1, #4
 8006d56:	d029      	beq.n	8006dac <HAL_TIM_OC_Start_IT+0xd8>
 8006d58:	2908      	cmp	r1, #8
 8006d5a:	d035      	beq.n	8006dc8 <HAL_TIM_OC_Start_IT+0xf4>
 8006d5c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	2a01      	cmp	r2, #1
 8006d64:	d15d      	bne.n	8006e22 <HAL_TIM_OC_Start_IT+0x14e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d66:	2202      	movs	r2, #2
 8006d68:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  switch (Channel)
 8006d6c:	290c      	cmp	r1, #12
 8006d6e:	d8c4      	bhi.n	8006cfa <HAL_TIM_OC_Start_IT+0x26>
 8006d70:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <HAL_TIM_OC_Start_IT+0xa4>)
 8006d72:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006cf1 	.word	0x08006cf1
 8006d7c:	08006cfb 	.word	0x08006cfb
 8006d80:	08006cfb 	.word	0x08006cfb
 8006d84:	08006cfb 	.word	0x08006cfb
 8006d88:	08006dbd 	.word	0x08006dbd
 8006d8c:	08006cfb 	.word	0x08006cfb
 8006d90:	08006cfb 	.word	0x08006cfb
 8006d94:	08006cfb 	.word	0x08006cfb
 8006d98:	08006dd9 	.word	0x08006dd9
 8006d9c:	08006cfb 	.word	0x08006cfb
 8006da0:	08006cfb 	.word	0x08006cfb
 8006da4:	08006cfb 	.word	0x08006cfb
 8006da8:	08006de5 	.word	0x08006de5
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dac:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	2a01      	cmp	r2, #1
 8006db4:	d131      	bne.n	8006e1a <HAL_TIM_OC_Start_IT+0x146>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db6:	2202      	movs	r2, #2
 8006db8:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dbc:	6821      	ldr	r1, [r4, #0]
 8006dbe:	68ca      	ldr	r2, [r1, #12]
 8006dc0:	f042 0204 	orr.w	r2, r2, #4
 8006dc4:	60ca      	str	r2, [r1, #12]
      break;
 8006dc6:	e798      	b.n	8006cfa <HAL_TIM_OC_Start_IT+0x26>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dc8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	2a01      	cmp	r2, #1
 8006dd0:	d125      	bne.n	8006e1e <HAL_TIM_OC_Start_IT+0x14a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006dd8:	6821      	ldr	r1, [r4, #0]
 8006dda:	68ca      	ldr	r2, [r1, #12]
 8006ddc:	f042 0208 	orr.w	r2, r2, #8
 8006de0:	60ca      	str	r2, [r1, #12]
      break;
 8006de2:	e78a      	b.n	8006cfa <HAL_TIM_OC_Start_IT+0x26>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006de4:	6801      	ldr	r1, [r0, #0]
 8006de6:	68ca      	ldr	r2, [r1, #12]
 8006de8:	f042 0210 	orr.w	r2, r2, #16
 8006dec:	60ca      	str	r2, [r1, #12]
      break;
 8006dee:	e784      	b.n	8006cfa <HAL_TIM_OC_Start_IT+0x26>
    __HAL_TIM_MOE_ENABLE(htim);
 8006df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <HAL_TIM_OC_Start_IT+0x158>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d189      	bne.n	8006d14 <HAL_TIM_OC_Start_IT+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e06:	2a06      	cmp	r2, #6
 8006e08:	d00d      	beq.n	8006e26 <HAL_TIM_OC_Start_IT+0x152>
      __HAL_TIM_ENABLE(htim);
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e12:	2000      	movs	r0, #0
}
 8006e14:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006e16:	2001      	movs	r0, #1
 8006e18:	e7fc      	b.n	8006e14 <HAL_TIM_OC_Start_IT+0x140>
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	e7fa      	b.n	8006e14 <HAL_TIM_OC_Start_IT+0x140>
 8006e1e:	2001      	movs	r0, #1
 8006e20:	e7f8      	b.n	8006e14 <HAL_TIM_OC_Start_IT+0x140>
 8006e22:	2001      	movs	r0, #1
 8006e24:	e7f6      	b.n	8006e14 <HAL_TIM_OC_Start_IT+0x140>
  return HAL_OK;
 8006e26:	2000      	movs	r0, #0
 8006e28:	e7f4      	b.n	8006e14 <HAL_TIM_OC_Start_IT+0x140>
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400

08006e34 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d03b      	beq.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8006e3c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e44:	2302      	movs	r3, #2
 8006e46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e4a:	6804      	ldr	r4, [r0, #0]
 8006e4c:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e4e:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e54:	680d      	ldr	r5, [r1, #0]
 8006e56:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e58:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5a:	6803      	ldr	r3, [r0, #0]
 8006e5c:	4c16      	ldr	r4, [pc, #88]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8006e5e:	42a3      	cmp	r3, r4
 8006e60:	d01a      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e66:	d017      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e68:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d013      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	d00f      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d00b      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e80:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d007      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e88:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d003      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006e90:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d104      	bne.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e9c:	6849      	ldr	r1, [r1, #4]
 8006e9e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006eae:	4618      	mov	r0, r3
}
 8006eb0:	bc30      	pop	{r4, r5}
 8006eb2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006eb4:	2002      	movs	r0, #2
}
 8006eb6:	4770      	bx	lr
 8006eb8:	40010000 	.word	0x40010000

08006ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ebc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d022      	beq.n	8006f0a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eca:	68cb      	ldr	r3, [r1, #12]
 8006ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed0:	688a      	ldr	r2, [r1, #8]
 8006ed2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed8:	684a      	ldr	r2, [r1, #4]
 8006eda:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee0:	680a      	ldr	r2, [r1, #0]
 8006ee2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee8:	690a      	ldr	r2, [r1, #16]
 8006eea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef0:	694a      	ldr	r2, [r1, #20]
 8006ef2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ef8:	69ca      	ldr	r2, [r1, #28]
 8006efa:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006efc:	6802      	ldr	r2, [r0, #0]
 8006efe:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f00:	2300      	movs	r3, #0
 8006f02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006f06:	4618      	mov	r0, r3
 8006f08:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006f0a:	2002      	movs	r0, #2
}
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f10:	4770      	bx	lr

08006f12 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f12:	6802      	ldr	r2, [r0, #0]
 8006f14:	68d3      	ldr	r3, [r2, #12]
 8006f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f1a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1c:	6802      	ldr	r2, [r0, #0]
 8006f1e:	6953      	ldr	r3, [r2, #20]
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d005      	beq.n	8006f38 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f32:	2300      	movs	r3, #0
 8006f34:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006f36:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	6802      	ldr	r2, [r0, #0]
 8006f3a:	68d3      	ldr	r3, [r2, #12]
 8006f3c:	f023 0310 	bic.w	r3, r3, #16
 8006f40:	60d3      	str	r3, [r2, #12]
 8006f42:	e7f3      	b.n	8006f2c <UART_EndRxTransfer+0x1a>

08006f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f48:	6802      	ldr	r2, [r0, #0]
 8006f4a:	6913      	ldr	r3, [r2, #16]
 8006f4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f50:	68c1      	ldr	r1, [r0, #12]
 8006f52:	430b      	orrs	r3, r1
 8006f54:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8006f56:	6801      	ldr	r1, [r0, #0]
 8006f58:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f5a:	6883      	ldr	r3, [r0, #8]
 8006f5c:	6900      	ldr	r0, [r0, #16]
 8006f5e:	4303      	orrs	r3, r0
 8006f60:	6960      	ldr	r0, [r4, #20]
 8006f62:	4303      	orrs	r3, r0
 8006f64:	69e0      	ldr	r0, [r4, #28]
 8006f66:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006f68:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8006f6c:	f022 020c 	bic.w	r2, r2, #12
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	6953      	ldr	r3, [r2, #20]
 8006f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7c:	69a1      	ldr	r1, [r4, #24]
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	4a31      	ldr	r2, [pc, #196]	; (800704c <UART_SetConfig+0x108>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d006      	beq.n	8006f98 <UART_SetConfig+0x54>
 8006f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d002      	beq.n	8006f98 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f92:	f7ff fbc3 	bl	800671c <HAL_RCC_GetPCLK1Freq>
 8006f96:	e001      	b.n	8006f9c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7ff fbd0 	bl	800673c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9c:	69e3      	ldr	r3, [r4, #28]
 8006f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa2:	d025      	beq.n	8006ff0 <UART_SetConfig+0xac>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	1805      	adds	r5, r0, r0
 8006fa8:	eb46 0106 	adc.w	r1, r6, r6
 8006fac:	182d      	adds	r5, r5, r0
 8006fae:	eb46 0101 	adc.w	r1, r6, r1
 8006fb2:	00cb      	lsls	r3, r1, #3
 8006fb4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006fb8:	00ea      	lsls	r2, r5, #3
 8006fba:	4615      	mov	r5, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	009a      	lsls	r2, r3, #2
 8006fc2:	0f9b      	lsrs	r3, r3, #30
 8006fc4:	1828      	adds	r0, r5, r0
 8006fc6:	eb46 0101 	adc.w	r1, r6, r1
 8006fca:	f7f9 fde5 	bl	8000b98 <__aeabi_uldivmod>
 8006fce:	6824      	ldr	r4, [r4, #0]
 8006fd0:	491f      	ldr	r1, [pc, #124]	; (8007050 <UART_SetConfig+0x10c>)
 8006fd2:	fba1 3200 	umull	r3, r2, r1, r0
 8006fd6:	0952      	lsrs	r2, r2, #5
 8006fd8:	2364      	movs	r3, #100	; 0x64
 8006fda:	fb03 0312 	mls	r3, r3, r2, r0
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	3332      	adds	r3, #50	; 0x32
 8006fe2:	fba1 1303 	umull	r1, r3, r1, r3
 8006fe6:	0112      	lsls	r2, r2, #4
 8006fe8:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8006fec:	60a3      	str	r3, [r4, #8]
  }
}
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	1805      	adds	r5, r0, r0
 8006ff4:	eb46 0106 	adc.w	r1, r6, r6
 8006ff8:	182d      	adds	r5, r5, r0
 8006ffa:	eb46 0101 	adc.w	r1, r6, r1
 8006ffe:	00cb      	lsls	r3, r1, #3
 8007000:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007004:	00ea      	lsls	r2, r5, #3
 8007006:	4615      	mov	r5, r2
 8007008:	4619      	mov	r1, r3
 800700a:	6862      	ldr	r2, [r4, #4]
 800700c:	4633      	mov	r3, r6
 800700e:	1892      	adds	r2, r2, r2
 8007010:	eb46 0303 	adc.w	r3, r6, r3
 8007014:	1828      	adds	r0, r5, r0
 8007016:	eb46 0101 	adc.w	r1, r6, r1
 800701a:	f7f9 fdbd 	bl	8000b98 <__aeabi_uldivmod>
 800701e:	4d0c      	ldr	r5, [pc, #48]	; (8007050 <UART_SetConfig+0x10c>)
 8007020:	fba5 3200 	umull	r3, r2, r5, r0
 8007024:	0951      	lsrs	r1, r2, #5
 8007026:	2364      	movs	r3, #100	; 0x64
 8007028:	fb03 0311 	mls	r3, r3, r1, r0
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	3332      	adds	r3, #50	; 0x32
 8007030:	fba5 2303 	umull	r2, r3, r5, r3
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800703a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007044:	4413      	add	r3, r2
 8007046:	6083      	str	r3, [r0, #8]
 8007048:	e7d1      	b.n	8006fee <UART_SetConfig+0xaa>
 800704a:	bf00      	nop
 800704c:	40011000 	.word	0x40011000
 8007050:	51eb851f 	.word	0x51eb851f

08007054 <HAL_UART_Init>:
  if (huart == NULL)
 8007054:	b358      	cbz	r0, 80070ae <HAL_UART_Init+0x5a>
{
 8007056:	b510      	push	{r4, lr}
 8007058:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800705a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800705e:	b30b      	cbz	r3, 80070a4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007060:	2324      	movs	r3, #36	; 0x24
 8007062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	68d3      	ldr	r3, [r2, #12]
 800706a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800706e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007070:	4620      	mov	r0, r4
 8007072:	f7ff ff67 	bl	8006f44 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	6913      	ldr	r3, [r2, #16]
 800707a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800707e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007080:	6822      	ldr	r2, [r4, #0]
 8007082:	6953      	ldr	r3, [r2, #20]
 8007084:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007088:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	68d3      	ldr	r3, [r2, #12]
 800708e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007092:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007094:	2000      	movs	r0, #0
 8007096:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007098:	2320      	movs	r3, #32
 800709a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800709e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80070a2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80070a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80070a8:	f7fd fdee 	bl	8004c88 <HAL_UART_MspInit>
 80070ac:	e7d8      	b.n	8007060 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80070ae:	2001      	movs	r0, #1
}
 80070b0:	4770      	bx	lr
	...

080070b4 <HAL_UART_Transmit_DMA>:
{
 80070b4:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80070b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d131      	bne.n	8007124 <HAL_UART_Transmit_DMA+0x70>
 80070c0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80070c2:	2900      	cmp	r1, #0
 80070c4:	d030      	beq.n	8007128 <HAL_UART_Transmit_DMA+0x74>
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	d030      	beq.n	800712c <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 80070ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d02e      	beq.n	8007130 <HAL_UART_Transmit_DMA+0x7c>
 80070d2:	2301      	movs	r3, #1
 80070d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 80070d8:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80070da:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80070dc:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070de:	2500      	movs	r5, #0
 80070e0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e2:	2321      	movs	r3, #33	; 0x21
 80070e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070ea:	4812      	ldr	r0, [pc, #72]	; (8007134 <HAL_UART_Transmit_DMA+0x80>)
 80070ec:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070f0:	4811      	ldr	r0, [pc, #68]	; (8007138 <HAL_UART_Transmit_DMA+0x84>)
 80070f2:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070f6:	4811      	ldr	r0, [pc, #68]	; (800713c <HAL_UART_Transmit_DMA+0x88>)
 80070f8:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80070fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070fc:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070fe:	6820      	ldr	r0, [r4, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	1d02      	adds	r2, r0, #4
 8007104:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007106:	f7fe fb83 	bl	8005810 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007110:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8007112:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	6953      	ldr	r3, [r2, #20]
 800711a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007120:	4628      	mov	r0, r5
 8007122:	e000      	b.n	8007126 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 8007124:	2002      	movs	r0, #2
}
 8007126:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007128:	2001      	movs	r0, #1
 800712a:	e7fc      	b.n	8007126 <HAL_UART_Transmit_DMA+0x72>
 800712c:	2001      	movs	r0, #1
 800712e:	e7fa      	b.n	8007126 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8007130:	2002      	movs	r0, #2
 8007132:	e7f8      	b.n	8007126 <HAL_UART_Transmit_DMA+0x72>
 8007134:	08007143 	.word	0x08007143
 8007138:	08007175 	.word	0x08007175
 800713c:	08007185 	.word	0x08007185

08007140 <HAL_UART_TxCpltCallback>:
}
 8007140:	4770      	bx	lr

08007142 <UART_DMATransmitCplt>:
{
 8007142:	b508      	push	{r3, lr}
 8007144:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007146:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007150:	d10c      	bne.n	800716c <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0x00U;
 8007152:	2300      	movs	r3, #0
 8007154:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007156:	6802      	ldr	r2, [r0, #0]
 8007158:	6953      	ldr	r3, [r2, #20]
 800715a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800715e:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007160:	6802      	ldr	r2, [r0, #0]
 8007162:	68d3      	ldr	r3, [r2, #12]
 8007164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007168:	60d3      	str	r3, [r2, #12]
}
 800716a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800716c:	f7ff ffe8 	bl	8007140 <HAL_UART_TxCpltCallback>
}
 8007170:	e7fb      	b.n	800716a <UART_DMATransmitCplt+0x28>

08007172 <HAL_UART_TxHalfCpltCallback>:
}
 8007172:	4770      	bx	lr

08007174 <UART_DMATxHalfCplt>:
{
 8007174:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007176:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007178:	f7ff fffb 	bl	8007172 <HAL_UART_TxHalfCpltCallback>
}
 800717c:	bd08      	pop	{r3, pc}

0800717e <HAL_UART_RxCpltCallback>:
}
 800717e:	4770      	bx	lr

08007180 <HAL_UART_RxHalfCpltCallback>:
}
 8007180:	4770      	bx	lr

08007182 <HAL_UART_ErrorCallback>:
}
 8007182:	4770      	bx	lr

08007184 <UART_DMAError>:
{
 8007184:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007186:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800718c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b21      	cmp	r3, #33	; 0x21
 8007194:	d00e      	beq.n	80071b4 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800719a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b22      	cmp	r3, #34	; 0x22
 80071a2:	d014      	beq.n	80071ce <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071a6:	f043 0310 	orr.w	r3, r3, #16
 80071aa:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80071ac:	4620      	mov	r0, r4
 80071ae:	f7ff ffe8 	bl	8007182 <HAL_UART_ErrorCallback>
}
 80071b2:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80071b8:	d0ed      	beq.n	8007196 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071be:	68d3      	ldr	r3, [r2, #12]
 80071c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071c4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80071c6:	2320      	movs	r3, #32
 80071c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80071cc:	e7e3      	b.n	8007196 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80071d2:	d0e7      	beq.n	80071a4 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80071d8:	4620      	mov	r0, r4
 80071da:	f7ff fe9a 	bl	8006f12 <UART_EndRxTransfer>
 80071de:	e7e1      	b.n	80071a4 <UART_DMAError+0x20>

080071e0 <UART_DMAAbortOnError>:
{
 80071e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071e8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80071ea:	f7ff ffca 	bl	8007182 <HAL_UART_ErrorCallback>
}
 80071ee:	bd08      	pop	{r3, pc}

080071f0 <HAL_UARTEx_RxEventCallback>:
}
 80071f0:	4770      	bx	lr

080071f2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b22      	cmp	r3, #34	; 0x22
 80071fa:	d126      	bne.n	800724a <UART_Receive_IT+0x58>
{
 80071fc:	b510      	push	{r4, lr}
 80071fe:	4604      	mov	r4, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007200:	6883      	ldr	r3, [r0, #8]
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007206:	d006      	beq.n	8007216 <UART_Receive_IT+0x24>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007208:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800720a:	b183      	cbz	r3, 800722e <UART_Receive_IT+0x3c>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007214:	e021      	b.n	800725a <UART_Receive_IT+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007216:	6903      	ldr	r3, [r0, #16]
 8007218:	b9db      	cbnz	r3, 8007252 <UART_Receive_IT+0x60>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800721a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800721c:	6803      	ldr	r3, [r0, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007224:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007226:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007228:	3302      	adds	r3, #2
 800722a:	6283      	str	r3, [r0, #40]	; 0x28
 800722c:	e019      	b.n	8007262 <UART_Receive_IT+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1eb      	bne.n	800720c <UART_Receive_IT+0x1a>
 8007234:	e00e      	b.n	8007254 <UART_Receive_IT+0x62>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	68d3      	ldr	r3, [r2, #12]
 800723a:	f023 0310 	bic.w	r3, r3, #16
 800723e:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007240:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff ffd4 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 8007248:	e029      	b.n	800729e <UART_Receive_IT+0xac>
    return HAL_BUSY;
 800724a:	2002      	movs	r0, #2
}
 800724c:	4770      	bx	lr
    return HAL_OK;
 800724e:	2000      	movs	r0, #0
}
 8007250:	bd10      	pop	{r4, pc}
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007252:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800725c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800725e:	3301      	adds	r3, #1
 8007260:	62a3      	str	r3, [r4, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007262:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007264:	3b01      	subs	r3, #1
 8007266:	b29b      	uxth	r3, r3
 8007268:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1ef      	bne.n	800724e <UART_Receive_IT+0x5c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	68d3      	ldr	r3, [r2, #12]
 8007272:	f023 0320 	bic.w	r3, r3, #32
 8007276:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	68d3      	ldr	r3, [r2, #12]
 800727c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007280:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	6953      	ldr	r3, [r2, #20]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800728c:	2320      	movs	r3, #32
 800728e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007294:	2b01      	cmp	r3, #1
 8007296:	d0ce      	beq.n	8007236 <UART_Receive_IT+0x44>
       HAL_UART_RxCpltCallback(huart);
 8007298:	4620      	mov	r0, r4
 800729a:	f7ff ff70 	bl	800717e <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	2000      	movs	r0, #0
 80072a0:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_OK;
 80072a2:	e7d5      	b.n	8007250 <UART_Receive_IT+0x5e>

080072a4 <HAL_UART_IRQHandler>:
{
 80072a4:	b530      	push	{r4, r5, lr}
 80072a6:	b083      	sub	sp, #12
 80072a8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072aa:	6802      	ldr	r2, [r0, #0]
 80072ac:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ae:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072b0:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 80072b2:	f013 0f0f 	tst.w	r3, #15
 80072b6:	d109      	bne.n	80072cc <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b8:	f013 0f20 	tst.w	r3, #32
 80072bc:	d00c      	beq.n	80072d8 <HAL_UART_IRQHandler+0x34>
 80072be:	f011 0f20 	tst.w	r1, #32
 80072c2:	d009      	beq.n	80072d8 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80072c4:	4620      	mov	r0, r4
 80072c6:	f7ff ff94 	bl	80071f2 <UART_Receive_IT>
      return;
 80072ca:	e016      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072cc:	f000 0001 	and.w	r0, r0, #1
 80072d0:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80072d4:	4305      	orrs	r5, r0
 80072d6:	d112      	bne.n	80072fe <HAL_UART_IRQHandler+0x5a>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80072da:	2801      	cmp	r0, #1
 80072dc:	d078      	beq.n	80073d0 <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072e2:	d003      	beq.n	80072ec <HAL_UART_IRQHandler+0x48>
 80072e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80072e8:	f040 80db 	bne.w	80074a2 <HAL_UART_IRQHandler+0x1fe>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072f0:	d003      	beq.n	80072fa <HAL_UART_IRQHandler+0x56>
 80072f2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80072f6:	f040 8101 	bne.w	80074fc <HAL_UART_IRQHandler+0x258>
}
 80072fa:	b003      	add	sp, #12
 80072fc:	bd30      	pop	{r4, r5, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072fe:	f013 0f01 	tst.w	r3, #1
 8007302:	d006      	beq.n	8007312 <HAL_UART_IRQHandler+0x6e>
 8007304:	f411 7f80 	tst.w	r1, #256	; 0x100
 8007308:	d003      	beq.n	8007312 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800730a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007312:	f013 0f04 	tst.w	r3, #4
 8007316:	d00b      	beq.n	8007330 <HAL_UART_IRQHandler+0x8c>
 8007318:	b190      	cbz	r0, 8007340 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800731a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800731c:	f042 0202 	orr.w	r2, r2, #2
 8007320:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007322:	f013 0f02 	tst.w	r3, #2
 8007326:	d107      	bne.n	8007338 <HAL_UART_IRQHandler+0x94>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007328:	f013 0f08 	tst.w	r3, #8
 800732c:	d10f      	bne.n	800734e <HAL_UART_IRQHandler+0xaa>
 800732e:	e012      	b.n	8007356 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007330:	f013 0f02 	tst.w	r3, #2
 8007334:	d004      	beq.n	8007340 <HAL_UART_IRQHandler+0x9c>
 8007336:	b118      	cbz	r0, 8007340 <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007338:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800733a:	f042 0204 	orr.w	r2, r2, #4
 800733e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007340:	f013 0f08 	tst.w	r3, #8
 8007344:	d007      	beq.n	8007356 <HAL_UART_IRQHandler+0xb2>
 8007346:	f001 0220 	and.w	r2, r1, #32
 800734a:	4302      	orrs	r2, r0
 800734c:	d003      	beq.n	8007356 <HAL_UART_IRQHandler+0xb2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800734e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007350:	f042 0208 	orr.w	r2, r2, #8
 8007354:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007356:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007358:	2a00      	cmp	r2, #0
 800735a:	d0ce      	beq.n	80072fa <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800735c:	f013 0f20 	tst.w	r3, #32
 8007360:	d002      	beq.n	8007368 <HAL_UART_IRQHandler+0xc4>
 8007362:	f011 0f20 	tst.w	r1, #32
 8007366:	d10e      	bne.n	8007386 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800736c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800736e:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	4313      	orrs	r3, r2
 8007378:	d109      	bne.n	800738e <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 800737a:	4620      	mov	r0, r4
 800737c:	f7ff ff01 	bl	8007182 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	2300      	movs	r3, #0
 8007382:	6423      	str	r3, [r4, #64]	; 0x40
 8007384:	e7b9      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff ff33 	bl	80071f2 <UART_Receive_IT>
 800738c:	e7ec      	b.n	8007368 <HAL_UART_IRQHandler+0xc4>
        UART_EndRxTransfer(huart);
 800738e:	4620      	mov	r0, r4
 8007390:	f7ff fdbf 	bl	8006f12 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	695a      	ldr	r2, [r3, #20]
 8007398:	f012 0f40 	tst.w	r2, #64	; 0x40
 800739c:	d014      	beq.n	80073c8 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80073a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073a8:	b153      	cbz	r3, 80073c0 <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073aa:	4a5a      	ldr	r2, [pc, #360]	; (8007514 <HAL_UART_IRQHandler+0x270>)
 80073ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80073b0:	f7fe fabd 	bl	800592e <HAL_DMA_Abort_IT>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0a0      	beq.n	80072fa <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80073ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80073bc:	4798      	blx	r3
 80073be:	e79c      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
            HAL_UART_ErrorCallback(huart);
 80073c0:	4620      	mov	r0, r4
 80073c2:	f7ff fede 	bl	8007182 <HAL_UART_ErrorCallback>
 80073c6:	e798      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80073c8:	4620      	mov	r0, r4
 80073ca:	f7ff feda 	bl	8007182 <HAL_UART_ErrorCallback>
 80073ce:	e794      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80073d0:	f013 0f10 	tst.w	r3, #16
 80073d4:	d083      	beq.n	80072de <HAL_UART_IRQHandler+0x3a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80073d6:	f011 0f10 	tst.w	r1, #16
 80073da:	d080      	beq.n	80072de <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073dc:	2300      	movs	r3, #0
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	6813      	ldr	r3, [r2, #0]
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	6853      	ldr	r3, [r2, #4]
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ea:	6953      	ldr	r3, [r2, #20]
 80073ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80073f0:	d033      	beq.n	800745a <HAL_UART_IRQHandler+0x1b6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80073f4:	680b      	ldr	r3, [r1, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f43f af7d 	beq.w	80072fa <HAL_UART_IRQHandler+0x56>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007400:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8007402:	4298      	cmp	r0, r3
 8007404:	f67f af79 	bls.w	80072fa <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8007408:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800740a:	69cb      	ldr	r3, [r1, #28]
 800740c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007410:	d107      	bne.n	8007422 <HAL_UART_IRQHandler+0x17e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007412:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007414:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007416:	1ac9      	subs	r1, r1, r3
 8007418:	b289      	uxth	r1, r1
 800741a:	4620      	mov	r0, r4
 800741c:	f7ff fee8 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 8007420:	e76b      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007422:	68d3      	ldr	r3, [r2, #12]
 8007424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007428:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	6953      	ldr	r3, [r2, #20]
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	6953      	ldr	r3, [r2, #20]
 8007438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800743c:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800743e:	2320      	movs	r3, #32
 8007440:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007444:	2300      	movs	r3, #0
 8007446:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	68d3      	ldr	r3, [r2, #12]
 800744c:	f023 0310 	bic.w	r3, r3, #16
 8007450:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007452:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007454:	f7fe fa21 	bl	800589a <HAL_DMA_Abort>
 8007458:	e7db      	b.n	8007412 <HAL_UART_IRQHandler+0x16e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800745a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800745c:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 800745e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	f43f af49 	beq.w	80072fa <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007468:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800746a:	1a59      	subs	r1, r3, r1
 800746c:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800746e:	2900      	cmp	r1, #0
 8007470:	f43f af43 	beq.w	80072fa <HAL_UART_IRQHandler+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007474:	68d3      	ldr	r3, [r2, #12]
 8007476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800747a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	6953      	ldr	r3, [r2, #20]
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007486:	2320      	movs	r3, #32
 8007488:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748c:	2300      	movs	r3, #0
 800748e:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	68d3      	ldr	r3, [r2, #12]
 8007494:	f023 0310 	bic.w	r3, r3, #16
 8007498:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800749a:	4620      	mov	r0, r4
 800749c:	f7ff fea8 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 80074a0:	e72b      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074a2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b21      	cmp	r3, #33	; 0x21
 80074aa:	f47f af26 	bne.w	80072fa <HAL_UART_IRQHandler+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ae:	68a3      	ldr	r3, [r4, #8]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b4:	d016      	beq.n	80074e4 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074b6:	6a23      	ldr	r3, [r4, #32]
 80074b8:	1c59      	adds	r1, r3, #1
 80074ba:	6221      	str	r1, [r4, #32]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 80074c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	84e3      	strh	r3, [r4, #38]	; 0x26
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f47f af16 	bne.w	80072fa <HAL_UART_IRQHandler+0x56>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074ce:	6822      	ldr	r2, [r4, #0]
 80074d0:	68d3      	ldr	r3, [r2, #12]
 80074d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	68d3      	ldr	r3, [r2, #12]
 80074dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e0:	60d3      	str	r3, [r2, #12]
 80074e2:	e70a      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e5      	bne.n	80074b6 <HAL_UART_IRQHandler+0x212>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074ea:	6a23      	ldr	r3, [r4, #32]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f2:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80074f4:	6a23      	ldr	r3, [r4, #32]
 80074f6:	3302      	adds	r3, #2
 80074f8:	6223      	str	r3, [r4, #32]
 80074fa:	e7e1      	b.n	80074c0 <HAL_UART_IRQHandler+0x21c>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074fc:	68d3      	ldr	r3, [r2, #12]
 80074fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007502:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007504:	2320      	movs	r3, #32
 8007506:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800750a:	4620      	mov	r0, r4
 800750c:	f7ff fe18 	bl	8007140 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007510:	e6f3      	b.n	80072fa <HAL_UART_IRQHandler+0x56>
 8007512:	bf00      	nop
 8007514:	080071e1 	.word	0x080071e1

08007518 <UART_DMARxHalfCplt>:
{
 8007518:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800751a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800751e:	2b01      	cmp	r3, #1
 8007520:	d002      	beq.n	8007528 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8007522:	f7ff fe2d 	bl	8007180 <HAL_UART_RxHalfCpltCallback>
}
 8007526:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007528:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800752a:	0849      	lsrs	r1, r1, #1
 800752c:	f7ff fe60 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 8007530:	e7f9      	b.n	8007526 <UART_DMARxHalfCplt+0xe>

08007532 <UART_DMAReceiveCplt>:
{
 8007532:	b508      	push	{r3, lr}
 8007534:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007536:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007540:	d116      	bne.n	8007570 <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007546:	6802      	ldr	r2, [r0, #0]
 8007548:	68d3      	ldr	r3, [r2, #12]
 800754a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800754e:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	6802      	ldr	r2, [r0, #0]
 8007552:	6953      	ldr	r3, [r2, #20]
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800755a:	6802      	ldr	r2, [r0, #0]
 800755c:	6953      	ldr	r3, [r2, #20]
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8007564:	2320      	movs	r3, #32
 8007566:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800756c:	2b01      	cmp	r3, #1
 800756e:	d005      	beq.n	800757c <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007570:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007572:	2b01      	cmp	r3, #1
 8007574:	d008      	beq.n	8007588 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 8007576:	f7ff fe02 	bl	800717e <HAL_UART_RxCpltCallback>
}
 800757a:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757c:	6802      	ldr	r2, [r0, #0]
 800757e:	68d3      	ldr	r3, [r2, #12]
 8007580:	f023 0310 	bic.w	r3, r3, #16
 8007584:	60d3      	str	r3, [r2, #12]
 8007586:	e7f3      	b.n	8007570 <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007588:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800758a:	f7ff fe31 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 800758e:	e7f4      	b.n	800757a <UART_DMAReceiveCplt+0x48>

08007590 <UART_Start_Receive_DMA>:
{
 8007590:	b530      	push	{r4, r5, lr}
 8007592:	b083      	sub	sp, #12
 8007594:	4604      	mov	r4, r0
 8007596:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8007598:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800759a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759c:	2500      	movs	r5, #0
 800759e:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a0:	2222      	movs	r2, #34	; 0x22
 80075a2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80075a8:	4814      	ldr	r0, [pc, #80]	; (80075fc <UART_Start_Receive_DMA+0x6c>)
 80075aa:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075ae:	4814      	ldr	r0, [pc, #80]	; (8007600 <UART_Start_Receive_DMA+0x70>)
 80075b0:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075b4:	4813      	ldr	r0, [pc, #76]	; (8007604 <UART_Start_Receive_DMA+0x74>)
 80075b6:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 80075b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075ba:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	460a      	mov	r2, r1
 80075c0:	1d01      	adds	r1, r0, #4
 80075c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80075c4:	f7fe f924 	bl	8005810 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80075c8:	9501      	str	r5, [sp, #4]
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	9201      	str	r2, [sp, #4]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 80075d6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075e0:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	6953      	ldr	r3, [r2, #20]
 80075e6:	f043 0301 	orr.w	r3, r3, #1
 80075ea:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	6953      	ldr	r3, [r2, #20]
 80075f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f4:	6153      	str	r3, [r2, #20]
}
 80075f6:	4628      	mov	r0, r5
 80075f8:	b003      	add	sp, #12
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	08007533 	.word	0x08007533
 8007600:	08007519 	.word	0x08007519
 8007604:	08007185 	.word	0x08007185

08007608 <HAL_UART_Receive_DMA>:
{
 8007608:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800760a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b20      	cmp	r3, #32
 8007612:	d10d      	bne.n	8007630 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8007614:	b171      	cbz	r1, 8007634 <HAL_UART_Receive_DMA+0x2c>
 8007616:	b17a      	cbz	r2, 8007638 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 8007618:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d00d      	beq.n	800763c <HAL_UART_Receive_DMA+0x34>
 8007620:	2301      	movs	r3, #1
 8007622:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	2300      	movs	r3, #0
 8007628:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800762a:	f7ff ffb1 	bl	8007590 <UART_Start_Receive_DMA>
 800762e:	e000      	b.n	8007632 <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8007630:	2002      	movs	r0, #2
}
 8007632:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8007634:	2001      	movs	r0, #1
 8007636:	e7fc      	b.n	8007632 <HAL_UART_Receive_DMA+0x2a>
 8007638:	2001      	movs	r0, #1
 800763a:	e7fa      	b.n	8007632 <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 800763c:	2002      	movs	r0, #2
 800763e:	e7f8      	b.n	8007632 <HAL_UART_Receive_DMA+0x2a>

08007640 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007640:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007642:	f000 fa75 	bl	8007b30 <vTaskStartScheduler>
  
  return osOK;
}
 8007646:	2000      	movs	r0, #0
 8007648:	bd08      	pop	{r3, pc}

0800764a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800764a:	b570      	push	{r4, r5, r6, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	4604      	mov	r4, r0
 8007650:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007652:	6945      	ldr	r5, [r0, #20]
 8007654:	b19d      	cbz	r5, 800767e <osThreadCreate+0x34>
 8007656:	6986      	ldr	r6, [r0, #24]
 8007658:	b18e      	cbz	r6, 800767e <osThreadCreate+0x34>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800765a:	6840      	ldr	r0, [r0, #4]
 800765c:	6821      	ldr	r1, [r4, #0]
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8007664:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8007666:	bf14      	ite	ne
 8007668:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800766a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800766c:	9602      	str	r6, [sp, #8]
 800766e:	9501      	str	r5, [sp, #4]
 8007670:	9400      	str	r4, [sp, #0]
 8007672:	f000 f9f1 	bl	8007a58 <xTaskCreateStatic>
 8007676:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007678:	9805      	ldr	r0, [sp, #20]
}
 800767a:	b006      	add	sp, #24
 800767c:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800767e:	6860      	ldr	r0, [r4, #4]
 8007680:	6821      	ldr	r1, [r4, #0]
 8007682:	8a22      	ldrh	r2, [r4, #16]
 8007684:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8007688:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800768a:	bf14      	ite	ne
 800768c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800768e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007690:	ad05      	add	r5, sp, #20
 8007692:	9501      	str	r5, [sp, #4]
 8007694:	9400      	str	r4, [sp, #0]
 8007696:	f000 fa19 	bl	8007acc <xTaskCreate>
 800769a:	2801      	cmp	r0, #1
 800769c:	d0ec      	beq.n	8007678 <osThreadCreate+0x2e>
      return NULL;
 800769e:	2000      	movs	r0, #0
 80076a0:	e7eb      	b.n	800767a <osThreadCreate+0x30>

080076a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076a2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076a4:	2801      	cmp	r0, #1
 80076a6:	bf38      	it	cc
 80076a8:	2001      	movcc	r0, #1
 80076aa:	f000 fb9d 	bl	8007de8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076ae:	2000      	movs	r0, #0
 80076b0:	bd08      	pop	{r3, pc}

080076b2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b2:	f100 0308 	add.w	r3, r0, #8
 80076b6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076be:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076c6:	4770      	bx	lr

080076c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076cc:	4770      	bx	lr

080076ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80076ce:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80076dc:	6803      	ldr	r3, [r0, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	6003      	str	r3, [r0, #0]
}
 80076e2:	4770      	bx	lr

080076e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80076ec:	d011      	beq.n	8007712 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076ee:	f100 0308 	add.w	r3, r0, #8
 80076f2:	461c      	mov	r4, r3
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	42aa      	cmp	r2, r5
 80076fa:	d9fa      	bls.n	80076f2 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007700:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007702:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007704:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007706:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	6003      	str	r3, [r0, #0]
}
 800770e:	bc30      	pop	{r4, r5}
 8007710:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007712:	6904      	ldr	r4, [r0, #16]
 8007714:	e7f2      	b.n	80076fc <vListInsert+0x18>

08007716 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007716:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007718:	6841      	ldr	r1, [r0, #4]
 800771a:	6882      	ldr	r2, [r0, #8]
 800771c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800771e:	6841      	ldr	r1, [r0, #4]
 8007720:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007726:	bf04      	itt	eq
 8007728:	6882      	ldreq	r2, [r0, #8]
 800772a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800772c:	2200      	movs	r2, #0
 800772e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	3a01      	subs	r2, #1
 8007734:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007736:	6818      	ldr	r0, [r3, #0]
}
 8007738:	4770      	bx	lr
	...

0800773c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800773c:	4b08      	ldr	r3, [pc, #32]	; (8007760 <prvResetNextTaskUnblockTime+0x24>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	b923      	cbnz	r3, 800774e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvResetNextTaskUnblockTime+0x28>)
 8007746:	f04f 32ff 	mov.w	r2, #4294967295
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800774e:	4b04      	ldr	r3, [pc, #16]	; (8007760 <prvResetNextTaskUnblockTime+0x24>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	4b02      	ldr	r3, [pc, #8]	; (8007764 <prvResetNextTaskUnblockTime+0x28>)
 800775a:	601a      	str	r2, [r3, #0]
	}
}
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20002f10 	.word	0x20002f10
 8007764:	20002fe0 	.word	0x20002fe0

08007768 <prvInitialiseNewTask>:
{
 8007768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	4607      	mov	r7, r0
 800776e:	4698      	mov	r8, r3
 8007770:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007776:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800777a:	3a01      	subs	r2, #1
 800777c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800777e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007782:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8007786:	b3a9      	cbz	r1, 80077f4 <prvInitialiseNewTask+0x8c>
 8007788:	460b      	mov	r3, r1
 800778a:	1e4a      	subs	r2, r1, #1
 800778c:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8007790:	330f      	adds	r3, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007792:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007796:	f805 1f01 	strb.w	r1, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800779a:	b109      	cbz	r1, 80077a0 <prvInitialiseNewTask+0x38>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800779c:	429a      	cmp	r2, r3
 800779e:	d1f8      	bne.n	8007792 <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077a0:	2300      	movs	r3, #0
 80077a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077a6:	9d08      	ldr	r5, [sp, #32]
 80077a8:	2d06      	cmp	r5, #6
 80077aa:	bf28      	it	cs
 80077ac:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80077ae:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80077b0:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077b2:	f04f 0a00 	mov.w	sl, #0
 80077b6:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ba:	1d20      	adds	r0, r4, #4
 80077bc:	f7ff ff84 	bl	80076c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077c0:	f104 0018 	add.w	r0, r4, #24
 80077c4:	f7ff ff80 	bl	80076c8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077c8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ca:	f1c5 0507 	rsb	r5, r5, #7
 80077ce:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077d0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80077d2:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077d6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077da:	4642      	mov	r2, r8
 80077dc:	4639      	mov	r1, r7
 80077de:	4630      	mov	r0, r6
 80077e0:	f000 fbc0 	bl	8007f64 <pxPortInitialiseStack>
 80077e4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80077e6:	f1b9 0f00 	cmp.w	r9, #0
 80077ea:	d001      	beq.n	80077f0 <prvInitialiseNewTask+0x88>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077ec:	f8c9 4000 	str.w	r4, [r9]
}
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80077fa:	e7d4      	b.n	80077a6 <prvInitialiseNewTask+0x3e>

080077fc <prvAddNewTaskToReadyList>:
{
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007800:	f000 fbd8 	bl	8007fb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007804:	4a38      	ldr	r2, [pc, #224]	; (80078e8 <prvAddNewTaskToReadyList+0xec>)
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800780c:	4b37      	ldr	r3, [pc, #220]	; (80078ec <prvAddNewTaskToReadyList+0xf0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d031      	beq.n	8007878 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8007814:	4b36      	ldr	r3, [pc, #216]	; (80078f0 <prvAddNewTaskToReadyList+0xf4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	b93b      	cbnz	r3, 800782a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800781a:	4b34      	ldr	r3, [pc, #208]	; (80078ec <prvAddNewTaskToReadyList+0xf0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007822:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007824:	bf9c      	itt	ls
 8007826:	4b31      	ldrls	r3, [pc, #196]	; (80078ec <prvAddNewTaskToReadyList+0xf0>)
 8007828:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 800782a:	4a32      	ldr	r2, [pc, #200]	; (80078f4 <prvAddNewTaskToReadyList+0xf8>)
 800782c:	6813      	ldr	r3, [r2, #0]
 800782e:	3301      	adds	r3, #1
 8007830:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007832:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007834:	4a30      	ldr	r2, [pc, #192]	; (80078f8 <prvAddNewTaskToReadyList+0xfc>)
 8007836:	6811      	ldr	r1, [r2, #0]
 8007838:	2301      	movs	r3, #1
 800783a:	4083      	lsls	r3, r0
 800783c:	430b      	orrs	r3, r1
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007844:	1d21      	adds	r1, r4, #4
 8007846:	4b2d      	ldr	r3, [pc, #180]	; (80078fc <prvAddNewTaskToReadyList+0x100>)
 8007848:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800784c:	f7ff ff3f 	bl	80076ce <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007850:	f000 fbd2 	bl	8007ff8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007854:	4b26      	ldr	r3, [pc, #152]	; (80078f0 <prvAddNewTaskToReadyList+0xf4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b16b      	cbz	r3, 8007876 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800785a:	4b24      	ldr	r3, [pc, #144]	; (80078ec <prvAddNewTaskToReadyList+0xf0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007862:	429a      	cmp	r2, r3
 8007864:	d207      	bcs.n	8007876 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <prvAddNewTaskToReadyList+0x104>)
 8007868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
}
 8007876:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8007878:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <prvAddNewTaskToReadyList+0xf0>)
 800787a:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d1d3      	bne.n	800782a <prvAddNewTaskToReadyList+0x2e>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007882:	4d1e      	ldr	r5, [pc, #120]	; (80078fc <prvAddNewTaskToReadyList+0x100>)
 8007884:	4628      	mov	r0, r5
 8007886:	f7ff ff14 	bl	80076b2 <vListInitialise>
 800788a:	f105 0014 	add.w	r0, r5, #20
 800788e:	f7ff ff10 	bl	80076b2 <vListInitialise>
 8007892:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8007896:	f7ff ff0c 	bl	80076b2 <vListInitialise>
 800789a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 800789e:	f7ff ff08 	bl	80076b2 <vListInitialise>
 80078a2:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80078a6:	f7ff ff04 	bl	80076b2 <vListInitialise>
 80078aa:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80078ae:	f7ff ff00 	bl	80076b2 <vListInitialise>
 80078b2:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80078b6:	f7ff fefc 	bl	80076b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 80078ba:	4e12      	ldr	r6, [pc, #72]	; (8007904 <prvAddNewTaskToReadyList+0x108>)
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff fef8 	bl	80076b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078c2:	4d11      	ldr	r5, [pc, #68]	; (8007908 <prvAddNewTaskToReadyList+0x10c>)
 80078c4:	4628      	mov	r0, r5
 80078c6:	f7ff fef4 	bl	80076b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078ca:	4810      	ldr	r0, [pc, #64]	; (800790c <prvAddNewTaskToReadyList+0x110>)
 80078cc:	f7ff fef1 	bl	80076b2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80078d0:	480f      	ldr	r0, [pc, #60]	; (8007910 <prvAddNewTaskToReadyList+0x114>)
 80078d2:	f7ff feee 	bl	80076b2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80078d6:	480f      	ldr	r0, [pc, #60]	; (8007914 <prvAddNewTaskToReadyList+0x118>)
 80078d8:	f7ff feeb 	bl	80076b2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <prvAddNewTaskToReadyList+0x11c>)
 80078de:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078e0:	4b0e      	ldr	r3, [pc, #56]	; (800791c <prvAddNewTaskToReadyList+0x120>)
 80078e2:	601d      	str	r5, [r3, #0]
}
 80078e4:	e7a1      	b.n	800782a <prvAddNewTaskToReadyList+0x2e>
 80078e6:	bf00      	nop
 80078e8:	20002fa4 	.word	0x20002fa4
 80078ec:	20002f0c 	.word	0x20002f0c
 80078f0:	20003000 	.word	0x20003000
 80078f4:	20002fb0 	.word	0x20002fb0
 80078f8:	20002fb4 	.word	0x20002fb4
 80078fc:	20002f18 	.word	0x20002f18
 8007900:	e000ed04 	.word	0xe000ed04
 8007904:	20002fb8 	.word	0x20002fb8
 8007908:	20002fcc 	.word	0x20002fcc
 800790c:	20002fec 	.word	0x20002fec
 8007910:	20003018 	.word	0x20003018
 8007914:	20003004 	.word	0x20003004
 8007918:	20002f10 	.word	0x20002f10
 800791c:	20002f14 	.word	0x20002f14

08007920 <prvDeleteTCB>:
	{
 8007920:	b510      	push	{r4, lr}
 8007922:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007924:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8007928:	b163      	cbz	r3, 8007944 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800792a:	2b01      	cmp	r3, #1
 800792c:	d011      	beq.n	8007952 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800792e:	2b02      	cmp	r3, #2
 8007930:	d00e      	beq.n	8007950 <prvDeleteTCB+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	e7fe      	b.n	8007942 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8007944:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007946:	f000 fc6d 	bl	8008224 <vPortFree>
				vPortFree( pxTCB );
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fc6a 	bl	8008224 <vPortFree>
	}
 8007950:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007952:	f000 fc67 	bl	8008224 <vPortFree>
 8007956:	e7fb      	b.n	8007950 <prvDeleteTCB+0x30>

08007958 <prvIdleTask>:
{
 8007958:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800795a:	4c14      	ldr	r4, [pc, #80]	; (80079ac <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	4f14      	ldr	r7, [pc, #80]	; (80079b0 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800795e:	4e15      	ldr	r6, [pc, #84]	; (80079b4 <prvIdleTask+0x5c>)
				taskYIELD();
 8007960:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80079bc <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	b1a3      	cbz	r3, 8007992 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8007968:	f000 fb24 	bl	8007fb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007970:	1d28      	adds	r0, r5, #4
 8007972:	f7ff fed0 	bl	8007716 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007976:	6833      	ldr	r3, [r6, #0]
 8007978:	3b01      	subs	r3, #1
 800797a:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	3b01      	subs	r3, #1
 8007980:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007982:	f000 fb39 	bl	8007ff8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff ffca 	bl	8007920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1ea      	bne.n	8007968 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007992:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <prvIdleTask+0x60>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d9e4      	bls.n	8007964 <prvIdleTask+0xc>
				taskYIELD();
 800799a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800799e:	f8c8 3000 	str.w	r3, [r8]
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	e7db      	b.n	8007964 <prvIdleTask+0xc>
 80079ac:	20002fa8 	.word	0x20002fa8
 80079b0:	20003018 	.word	0x20003018
 80079b4:	20002fa4 	.word	0x20002fa4
 80079b8:	20002f18 	.word	0x20002f18
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	4604      	mov	r4, r0
 80079c4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <prvAddCurrentTaskToDelayedList+0x7c>)
 80079c8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ca:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x80>)
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	3004      	adds	r0, #4
 80079d0:	f7ff fea1 	bl	8007716 <uxListRemove>
 80079d4:	b948      	cbnz	r0, 80079ea <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x80>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	491a      	ldr	r1, [pc, #104]	; (8007a44 <prvAddCurrentTaskToDelayedList+0x84>)
 80079dc:	680b      	ldr	r3, [r1, #0]
 80079de:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80079e0:	2201      	movs	r2, #1
 80079e2:	4082      	lsls	r2, r0
 80079e4:	ea23 0302 	bic.w	r3, r3, r2
 80079e8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80079ee:	d00d      	beq.n	8007a0c <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079f0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079f2:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x80>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d910      	bls.n	8007a1e <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvAddCurrentTaskToDelayedList+0x88>)
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x80>)
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	3104      	adds	r1, #4
 8007a06:	f7ff fe6d 	bl	80076e4 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	d0ef      	beq.n	80079f0 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x80>)
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	3104      	adds	r1, #4
 8007a16:	480d      	ldr	r0, [pc, #52]	; (8007a4c <prvAddCurrentTaskToDelayedList+0x8c>)
 8007a18:	f7ff fe59 	bl	80076ce <vListInsertEnd>
 8007a1c:	e7f5      	b.n	8007a0a <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x80>)
 8007a24:	6819      	ldr	r1, [r3, #0]
 8007a26:	3104      	adds	r1, #4
 8007a28:	f7ff fe5c 	bl	80076e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007a32:	bf84      	itt	hi
 8007a34:	4b07      	ldrhi	r3, [pc, #28]	; (8007a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a36:	601c      	strhi	r4, [r3, #0]
}
 8007a38:	e7e7      	b.n	8007a0a <prvAddCurrentTaskToDelayedList+0x4a>
 8007a3a:	bf00      	nop
 8007a3c:	2000302c 	.word	0x2000302c
 8007a40:	20002f0c 	.word	0x20002f0c
 8007a44:	20002fb4 	.word	0x20002fb4
 8007a48:	20002f14 	.word	0x20002f14
 8007a4c:	20003004 	.word	0x20003004
 8007a50:	20002f10 	.word	0x20002f10
 8007a54:	20002fe0 	.word	0x20002fe0

08007a58 <xTaskCreateStatic>:
	{
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007a5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8007a60:	b175      	cbz	r5, 8007a80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a62:	b1b4      	cbz	r4, 8007a92 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a64:	2654      	movs	r6, #84	; 0x54
 8007a66:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a68:	9e04      	ldr	r6, [sp, #16]
 8007a6a:	2e54      	cmp	r6, #84	; 0x54
 8007a6c:	d01a      	beq.n	8007aa4 <xTaskCreateStatic+0x4c>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	e7fe      	b.n	8007a7e <xTaskCreateStatic+0x26>
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007a90:	e7fe      	b.n	8007a90 <xTaskCreateStatic+0x38>
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007aa2:	e7fe      	b.n	8007aa2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007aa4:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007aa6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007aa8:	2502      	movs	r5, #2
 8007aaa:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007aae:	2500      	movs	r5, #0
 8007ab0:	9503      	str	r5, [sp, #12]
 8007ab2:	9402      	str	r4, [sp, #8]
 8007ab4:	ad05      	add	r5, sp, #20
 8007ab6:	9501      	str	r5, [sp, #4]
 8007ab8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007aba:	9500      	str	r5, [sp, #0]
 8007abc:	f7ff fe54 	bl	8007768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7ff fe9b 	bl	80077fc <prvAddNewTaskToReadyList>
	}
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	b006      	add	sp, #24
 8007aca:	bd70      	pop	{r4, r5, r6, pc}

08007acc <xTaskCreate>:
	{
 8007acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	4688      	mov	r8, r1
 8007ad6:	4614      	mov	r4, r2
 8007ad8:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ada:	0090      	lsls	r0, r2, #2
 8007adc:	f000 fb96 	bl	800820c <pvPortMalloc>
			if( pxStack != NULL )
 8007ae0:	b308      	cbz	r0, 8007b26 <xTaskCreate+0x5a>
 8007ae2:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ae4:	2054      	movs	r0, #84	; 0x54
 8007ae6:	f000 fb91 	bl	800820c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007aea:	4605      	mov	r5, r0
 8007aec:	b1a8      	cbz	r0, 8007b1a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007aee:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	9002      	str	r0, [sp, #8]
 8007afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	4633      	mov	r3, r6
 8007b06:	4622      	mov	r2, r4
 8007b08:	4641      	mov	r1, r8
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	f7ff fe2c 	bl	8007768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7ff fe73 	bl	80077fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b16:	2001      	movs	r0, #1
 8007b18:	e007      	b.n	8007b2a <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8007b1a:	4648      	mov	r0, r9
 8007b1c:	f000 fb82 	bl	8008224 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	e001      	b.n	8007b2a <xTaskCreate+0x5e>
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007b2a:	b005      	add	sp, #20
 8007b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007b30 <vTaskStartScheduler>:
{
 8007b30:	b510      	push	{r4, lr}
 8007b32:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b34:	2400      	movs	r4, #0
 8007b36:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b38:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b3a:	aa07      	add	r2, sp, #28
 8007b3c:	a906      	add	r1, sp, #24
 8007b3e:	a805      	add	r0, sp, #20
 8007b40:	f7f9 ffc8 	bl	8001ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b44:	9b05      	ldr	r3, [sp, #20]
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	9400      	str	r4, [sp, #0]
 8007b4e:	4623      	mov	r3, r4
 8007b50:	9a07      	ldr	r2, [sp, #28]
 8007b52:	490d      	ldr	r1, [pc, #52]	; (8007b88 <vTaskStartScheduler+0x58>)
 8007b54:	480d      	ldr	r0, [pc, #52]	; (8007b8c <vTaskStartScheduler+0x5c>)
 8007b56:	f7ff ff7f 	bl	8007a58 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007b5a:	b190      	cbz	r0, 8007b82 <vTaskStartScheduler+0x52>
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b6c:	4b08      	ldr	r3, [pc, #32]	; (8007b90 <vTaskStartScheduler+0x60>)
 8007b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <vTaskStartScheduler+0x64>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <vTaskStartScheduler+0x68>)
 8007b7c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007b7e:	f000 fabb 	bl	80080f8 <xPortStartScheduler>
}
 8007b82:	b008      	add	sp, #32
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	0800a2a4 	.word	0x0800a2a4
 8007b8c:	08007959 	.word	0x08007959
 8007b90:	20002fe0 	.word	0x20002fe0
 8007b94:	20003000 	.word	0x20003000
 8007b98:	2000302c 	.word	0x2000302c

08007b9c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007b9c:	4a02      	ldr	r2, [pc, #8]	; (8007ba8 <vTaskSuspendAll+0xc>)
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	6013      	str	r3, [r2, #0]
}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20002fac 	.word	0x20002fac

08007bac <xTaskIncrementTick>:
{
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bb0:	4b40      	ldr	r3, [pc, #256]	; (8007cb4 <xTaskIncrementTick+0x108>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d174      	bne.n	8007ca2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bb8:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <xTaskIncrementTick+0x10c>)
 8007bba:	681d      	ldr	r5, [r3, #0]
 8007bbc:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007bbe:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bc0:	b9c5      	cbnz	r5, 8007bf4 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8007bc2:	4b3e      	ldr	r3, [pc, #248]	; (8007cbc <xTaskIncrementTick+0x110>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	b143      	cbz	r3, 8007bdc <xTaskIncrementTick+0x30>
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	e7fe      	b.n	8007bda <xTaskIncrementTick+0x2e>
 8007bdc:	4a37      	ldr	r2, [pc, #220]	; (8007cbc <xTaskIncrementTick+0x110>)
 8007bde:	6811      	ldr	r1, [r2, #0]
 8007be0:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <xTaskIncrementTick+0x114>)
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	6010      	str	r0, [r2, #0]
 8007be6:	6019      	str	r1, [r3, #0]
 8007be8:	4a36      	ldr	r2, [pc, #216]	; (8007cc4 <xTaskIncrementTick+0x118>)
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	f7ff fda4 	bl	800773c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bf4:	4b34      	ldr	r3, [pc, #208]	; (8007cc8 <xTaskIncrementTick+0x11c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	42ab      	cmp	r3, r5
 8007bfa:	d840      	bhi.n	8007c7e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <xTaskIncrementTick+0x110>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	b133      	cbz	r3, 8007c12 <xTaskIncrementTick+0x66>
BaseType_t xSwitchRequired = pdFALSE;
 8007c04:	2400      	movs	r4, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c06:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8007cbc <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8007c0a:	4f30      	ldr	r7, [pc, #192]	; (8007ccc <xTaskIncrementTick+0x120>)
 8007c0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cd4 <xTaskIncrementTick+0x128>
 8007c10:	e021      	b.n	8007c56 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 8007c12:	2400      	movs	r4, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <xTaskIncrementTick+0x11c>)
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	601a      	str	r2, [r3, #0]
					break;
 8007c1c:	e030      	b.n	8007c80 <xTaskIncrementTick+0xd4>
						xNextTaskUnblockTime = xItemValue;
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <xTaskIncrementTick+0x11c>)
 8007c20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c22:	e02d      	b.n	8007c80 <xTaskIncrementTick+0xd4>
					prvAddTaskToReadyList( pxTCB );
 8007c24:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4083      	lsls	r3, r0
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007c34:	4649      	mov	r1, r9
 8007c36:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8007c3a:	f7ff fd48 	bl	80076ce <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <xTaskIncrementTick+0x124>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007c46:	429a      	cmp	r2, r3
 8007c48:	bf28      	it	cs
 8007c4a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0de      	beq.n	8007c14 <xTaskIncrementTick+0x68>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c56:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c5e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007c60:	429d      	cmp	r5, r3
 8007c62:	d3dc      	bcc.n	8007c1e <xTaskIncrementTick+0x72>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c64:	f106 0904 	add.w	r9, r6, #4
 8007c68:	4648      	mov	r0, r9
 8007c6a:	f7ff fd54 	bl	8007716 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0d7      	beq.n	8007c24 <xTaskIncrementTick+0x78>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c74:	f106 0018 	add.w	r0, r6, #24
 8007c78:	f7ff fd4d 	bl	8007716 <uxListRemove>
 8007c7c:	e7d2      	b.n	8007c24 <xTaskIncrementTick+0x78>
BaseType_t xSwitchRequired = pdFALSE;
 8007c7e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c80:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <xTaskIncrementTick+0x124>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4a11      	ldr	r2, [pc, #68]	; (8007cd4 <xTaskIncrementTick+0x128>)
 8007c8e:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	bf28      	it	cs
 8007c94:	2401      	movcs	r4, #1
			if( xYieldPending != pdFALSE )
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <xTaskIncrementTick+0x12c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf18      	it	ne
 8007c9e:	2401      	movne	r4, #1
 8007ca0:	e004      	b.n	8007cac <xTaskIncrementTick+0x100>
		++xPendedTicks;
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	; (8007cdc <xTaskIncrementTick+0x130>)
 8007ca4:	6813      	ldr	r3, [r2, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007caa:	2400      	movs	r4, #0
}
 8007cac:	4620      	mov	r0, r4
 8007cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20002fac 	.word	0x20002fac
 8007cb8:	2000302c 	.word	0x2000302c
 8007cbc:	20002f10 	.word	0x20002f10
 8007cc0:	20002f14 	.word	0x20002f14
 8007cc4:	20002fe4 	.word	0x20002fe4
 8007cc8:	20002fe0 	.word	0x20002fe0
 8007ccc:	20002fb4 	.word	0x20002fb4
 8007cd0:	20002f0c 	.word	0x20002f0c
 8007cd4:	20002f18 	.word	0x20002f18
 8007cd8:	20003030 	.word	0x20003030
 8007cdc:	20002fe8 	.word	0x20002fe8

08007ce0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8007ce0:	4b38      	ldr	r3, [pc, #224]	; (8007dc4 <xTaskResumeAll+0xe4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	b943      	cbnz	r3, 8007cf8 <xTaskResumeAll+0x18>
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskResumeAll+0x16>
{
 8007cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8007cfc:	f000 f95a 	bl	8007fb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007d00:	4b30      	ldr	r3, [pc, #192]	; (8007dc4 <xTaskResumeAll+0xe4>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	3a01      	subs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d148      	bne.n	8007da0 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d0e:	4b2e      	ldr	r3, [pc, #184]	; (8007dc8 <xTaskResumeAll+0xe8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d04a      	beq.n	8007dac <xTaskResumeAll+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d16:	4b2d      	ldr	r3, [pc, #180]	; (8007dcc <xTaskResumeAll+0xec>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d04a      	beq.n	8007db4 <xTaskResumeAll+0xd4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1e:	4e2b      	ldr	r6, [pc, #172]	; (8007dcc <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8007d20:	4d2b      	ldr	r5, [pc, #172]	; (8007dd0 <xTaskResumeAll+0xf0>)
 8007d22:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007de4 <xTaskResumeAll+0x104>
 8007d26:	e002      	b.n	8007d2e <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d28:	6833      	ldr	r3, [r6, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d040      	beq.n	8007db0 <xTaskResumeAll+0xd0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2e:	68f3      	ldr	r3, [r6, #12]
 8007d30:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d32:	f104 0018 	add.w	r0, r4, #24
 8007d36:	f7ff fcee 	bl	8007716 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d3a:	1d27      	adds	r7, r4, #4
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f7ff fcea 	bl	8007716 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007d44:	682a      	ldr	r2, [r5, #0]
 8007d46:	2301      	movs	r3, #1
 8007d48:	4083      	lsls	r3, r0
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007d52:	4639      	mov	r1, r7
 8007d54:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8007d58:	f7ff fcb9 	bl	80076ce <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d5c:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <xTaskResumeAll+0xf4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d3df      	bcc.n	8007d28 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8007d68:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <xTaskResumeAll+0xf8>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e7db      	b.n	8007d28 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d70:	3c01      	subs	r4, #1
 8007d72:	d005      	beq.n	8007d80 <xTaskResumeAll+0xa0>
							if( xTaskIncrementTick() != pdFALSE )
 8007d74:	f7ff ff1a 	bl	8007bac <xTaskIncrementTick>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d0f9      	beq.n	8007d70 <xTaskResumeAll+0x90>
								xYieldPending = pdTRUE;
 8007d7c:	6035      	str	r5, [r6, #0]
 8007d7e:	e7f7      	b.n	8007d70 <xTaskResumeAll+0x90>
						xPendedTicks = 0;
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <xTaskResumeAll+0xfc>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <xTaskResumeAll+0xf8>)
 8007d88:	681c      	ldr	r4, [r3, #0]
 8007d8a:	b154      	cbz	r4, 8007da2 <xTaskResumeAll+0xc2>
					taskYIELD_IF_USING_PREEMPTION();
 8007d8c:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <xTaskResumeAll+0x100>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007d9c:	2401      	movs	r4, #1
 8007d9e:	e000      	b.n	8007da2 <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 8007da0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007da2:	f000 f929 	bl	8007ff8 <vPortExitCritical>
}
 8007da6:	4620      	mov	r0, r4
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8007dac:	2400      	movs	r4, #0
 8007dae:	e7f8      	b.n	8007da2 <xTaskResumeAll+0xc2>
					prvResetNextTaskUnblockTime();
 8007db0:	f7ff fcc4 	bl	800773c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007db4:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <xTaskResumeAll+0xfc>)
 8007db6:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007db8:	2c00      	cmp	r4, #0
 8007dba:	d0e4      	beq.n	8007d86 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007dbc:	4e06      	ldr	r6, [pc, #24]	; (8007dd8 <xTaskResumeAll+0xf8>)
 8007dbe:	2501      	movs	r5, #1
 8007dc0:	e7d8      	b.n	8007d74 <xTaskResumeAll+0x94>
 8007dc2:	bf00      	nop
 8007dc4:	20002fac 	.word	0x20002fac
 8007dc8:	20002fa4 	.word	0x20002fa4
 8007dcc:	20002fec 	.word	0x20002fec
 8007dd0:	20002fb4 	.word	0x20002fb4
 8007dd4:	20002f0c 	.word	0x20002f0c
 8007dd8:	20003030 	.word	0x20003030
 8007ddc:	20002fe8 	.word	0x20002fe8
 8007de0:	e000ed04 	.word	0xe000ed04
 8007de4:	20002f18 	.word	0x20002f18

08007de8 <vTaskDelay>:
	{
 8007de8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dea:	b1a8      	cbz	r0, 8007e18 <vTaskDelay+0x30>
 8007dec:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <vTaskDelay+0x44>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	b143      	cbz	r3, 8007e06 <vTaskDelay+0x1e>
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	e7fe      	b.n	8007e04 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007e06:	f7ff fec9 	bl	8007b9c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f7ff fdd7 	bl	80079c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007e12:	f7ff ff65 	bl	8007ce0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007e16:	b938      	cbnz	r0, 8007e28 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <vTaskDelay+0x48>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
	}
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20002fac 	.word	0x20002fac
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e34:	4b1f      	ldr	r3, [pc, #124]	; (8007eb4 <vTaskSwitchContext+0x80>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	b11b      	cbz	r3, 8007e42 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007e3a:	4b1f      	ldr	r3, [pc, #124]	; (8007eb8 <vTaskSwitchContext+0x84>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007e42:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <vTaskSwitchContext+0x84>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e48:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <vTaskSwitchContext+0x88>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e4c:	fab3 f383 	clz	r3, r3
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f1c3 031f 	rsb	r3, r3, #31
 8007e56:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007e5a:	0092      	lsls	r2, r2, #2
 8007e5c:	4918      	ldr	r1, [pc, #96]	; (8007ec0 <vTaskSwitchContext+0x8c>)
 8007e5e:	588a      	ldr	r2, [r1, r2]
 8007e60:	b942      	cbnz	r2, 8007e74 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	e7fe      	b.n	8007e72 <vTaskSwitchContext+0x3e>
 8007e74:	4a12      	ldr	r2, [pc, #72]	; (8007ec0 <vTaskSwitchContext+0x8c>)
 8007e76:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007e7a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007e7e:	6848      	ldr	r0, [r1, #4]
 8007e80:	6840      	ldr	r0, [r0, #4]
 8007e82:	6048      	str	r0, [r1, #4]
 8007e84:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007e88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007e8c:	3208      	adds	r2, #8
 8007e8e:	4290      	cmp	r0, r2
 8007e90:	d009      	beq.n	8007ea6 <vTaskSwitchContext+0x72>
 8007e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e96:	4a0a      	ldr	r2, [pc, #40]	; (8007ec0 <vTaskSwitchContext+0x8c>)
 8007e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <vTaskSwitchContext+0x90>)
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea6:	6840      	ldr	r0, [r0, #4]
 8007ea8:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <vTaskSwitchContext+0x8c>)
 8007eaa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007eae:	6050      	str	r0, [r2, #4]
 8007eb0:	e7ef      	b.n	8007e92 <vTaskSwitchContext+0x5e>
 8007eb2:	bf00      	nop
 8007eb4:	20002fac 	.word	0x20002fac
 8007eb8:	20003030 	.word	0x20003030
 8007ebc:	20002fb4 	.word	0x20002fb4
 8007ec0:	20002f18 	.word	0x20002f18
 8007ec4:	20002f0c 	.word	0x20002f0c

08007ec8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <xTaskGetSchedulerState+0x18>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	b133      	cbz	r3, 8007edc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <xTaskGetSchedulerState+0x1c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2002      	moveq	r0, #2
 8007ed8:	2000      	movne	r0, #0
 8007eda:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007edc:	2001      	movs	r0, #1
	}
 8007ede:	4770      	bx	lr
 8007ee0:	20003000 	.word	0x20003000
 8007ee4:	20002fac 	.word	0x20002fac

08007ee8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ee8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <prvTaskExitError+0x3c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d008      	beq.n	8007f0a <prvTaskExitError+0x22>
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	e7fe      	b.n	8007f08 <prvTaskExitError+0x20>
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0fc      	beq.n	8007f1a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f20:	b002      	add	sp, #8
 8007f22:	4770      	bx	lr
 8007f24:	20002b1c 	.word	0x20002b1c

08007f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f28:	4808      	ldr	r0, [pc, #32]	; (8007f4c <prvPortStartFirstTask+0x24>)
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f380 8808 	msr	MSP, r0
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8814 	msr	CONTROL, r0
 8007f3a:	b662      	cpsie	i
 8007f3c:	b661      	cpsie	f
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	df00      	svc	0
 8007f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f4a:	0000      	.short	0x0000
 8007f4c:	e000ed08 	.word	0xe000ed08

08007f50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f60 <vPortEnableVFP+0x10>
 8007f54:	6801      	ldr	r1, [r0, #0]
 8007f56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f5a:	6001      	str	r1, [r0, #0]
 8007f5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f5e:	0000      	.short	0x0000
 8007f60:	e000ed88 	.word	0xe000ed88

08007f64 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f68:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f6c:	f021 0101 	bic.w	r1, r1, #1
 8007f70:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <pxPortInitialiseStack+0x28>)
 8007f76:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f7a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f7e:	f06f 0302 	mvn.w	r3, #2
 8007f82:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007f86:	3844      	subs	r0, #68	; 0x44
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	08007ee9 	.word	0x08007ee9

08007f90 <SVC_Handler>:
	__asm volatile (
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <pxCurrentTCBConst2>)
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	6808      	ldr	r0, [r1, #0]
 8007f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	f380 8809 	msr	PSP, r0
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	4770      	bx	lr
 8007fac:	f3af 8000 	nop.w

08007fb0 <pxCurrentTCBConst2>:
 8007fb0:	20002f0c 	.word	0x20002f0c

08007fb4 <vPortEnterCritical>:
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007fc4:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <vPortEnterCritical+0x3c>)
 8007fc6:	6813      	ldr	r3, [r2, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d000      	beq.n	8007fd2 <vPortEnterCritical+0x1e>
}
 8007fd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fd2:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <vPortEnterCritical+0x40>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007fda:	d0f9      	beq.n	8007fd0 <vPortEnterCritical+0x1c>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	e7fe      	b.n	8007fec <vPortEnterCritical+0x38>
 8007fee:	bf00      	nop
 8007ff0:	20002b1c 	.word	0x20002b1c
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <vPortExitCritical+0x28>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	b943      	cbnz	r3, 8008010 <vPortExitCritical+0x18>
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	e7fe      	b.n	800800e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008010:	3b01      	subs	r3, #1
 8008012:	4a03      	ldr	r2, [pc, #12]	; (8008020 <vPortExitCritical+0x28>)
 8008014:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008016:	b90b      	cbnz	r3, 800801c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008018:	f383 8811 	msr	BASEPRI, r3
}
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20002b1c 	.word	0x20002b1c
	...

08008030 <PendSV_Handler>:
	__asm volatile
 8008030:	f3ef 8009 	mrs	r0, PSP
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <pxCurrentTCBConst>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f01e 0f10 	tst.w	lr, #16
 8008040:	bf08      	it	eq
 8008042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	6010      	str	r0, [r2, #0]
 800804c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008054:	f380 8811 	msr	BASEPRI, r0
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f7ff fee8 	bl	8007e34 <vTaskSwitchContext>
 8008064:	f04f 0000 	mov.w	r0, #0
 8008068:	f380 8811 	msr	BASEPRI, r0
 800806c:	bc09      	pop	{r0, r3}
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	6808      	ldr	r0, [r1, #0]
 8008072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008076:	f01e 0f10 	tst.w	lr, #16
 800807a:	bf08      	it	eq
 800807c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008080:	f380 8809 	msr	PSP, r0
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst>:
 8008090:	20002f0c 	.word	0x20002f0c

08008094 <xPortSysTickHandler>:
{
 8008094:	b508      	push	{r3, lr}
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80080a6:	f7ff fd81 	bl	8007bac <xTaskIncrementTick>
 80080aa:	b118      	cbz	r0, 80080b4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <xPortSysTickHandler+0x28>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80080b4:	2300      	movs	r3, #0
 80080b6:	f383 8811 	msr	BASEPRI, r3
}
 80080ba:	bd08      	pop	{r3, pc}
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080c0:	4a08      	ldr	r2, [pc, #32]	; (80080e4 <vPortSetupTimerInterrupt+0x24>)
 80080c2:	2300      	movs	r3, #0
 80080c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080c6:	4908      	ldr	r1, [pc, #32]	; (80080e8 <vPortSetupTimerInterrupt+0x28>)
 80080c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080ca:	4b08      	ldr	r3, [pc, #32]	; (80080ec <vPortSetupTimerInterrupt+0x2c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4908      	ldr	r1, [pc, #32]	; (80080f0 <vPortSetupTimerInterrupt+0x30>)
 80080d0:	fba1 1303 	umull	r1, r3, r1, r3
 80080d4:	099b      	lsrs	r3, r3, #6
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4906      	ldr	r1, [pc, #24]	; (80080f4 <vPortSetupTimerInterrupt+0x34>)
 80080da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080dc:	2307      	movs	r3, #7
 80080de:	6013      	str	r3, [r2, #0]
}
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	e000e010 	.word	0xe000e010
 80080e8:	e000e018 	.word	0xe000e018
 80080ec:	20002b10 	.word	0x20002b10
 80080f0:	10624dd3 	.word	0x10624dd3
 80080f4:	e000e014 	.word	0xe000e014

080080f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080f8:	4b3b      	ldr	r3, [pc, #236]	; (80081e8 <xPortStartScheduler+0xf0>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4b3b      	ldr	r3, [pc, #236]	; (80081ec <xPortStartScheduler+0xf4>)
 80080fe:	429a      	cmp	r2, r3
 8008100:	d039      	beq.n	8008176 <xPortStartScheduler+0x7e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008102:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <xPortStartScheduler+0xf0>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4b3a      	ldr	r3, [pc, #232]	; (80081f0 <xPortStartScheduler+0xf8>)
 8008108:	429a      	cmp	r2, r3
 800810a:	d03d      	beq.n	8008188 <xPortStartScheduler+0x90>
{
 800810c:	b510      	push	{r4, lr}
 800810e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008110:	4b38      	ldr	r3, [pc, #224]	; (80081f4 <xPortStartScheduler+0xfc>)
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008124:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008128:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800812c:	4a32      	ldr	r2, [pc, #200]	; (80081f8 <xPortStartScheduler+0x100>)
 800812e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008130:	4b32      	ldr	r3, [pc, #200]	; (80081fc <xPortStartScheduler+0x104>)
 8008132:	2207      	movs	r2, #7
 8008134:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008136:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800813a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800813e:	d011      	beq.n	8008164 <xPortStartScheduler+0x6c>
 8008140:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008142:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800814e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8008152:	4613      	mov	r3, r2
 8008154:	3a01      	subs	r2, #1
 8008156:	f011 0f80 	tst.w	r1, #128	; 0x80
 800815a:	d1f2      	bne.n	8008142 <xPortStartScheduler+0x4a>
 800815c:	4a27      	ldr	r2, [pc, #156]	; (80081fc <xPortStartScheduler+0x104>)
 800815e:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008160:	2b03      	cmp	r3, #3
 8008162:	d01a      	beq.n	800819a <xPortStartScheduler+0xa2>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	e7fe      	b.n	8008174 <xPortStartScheduler+0x7c>
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008186:	e7fe      	b.n	8008186 <xPortStartScheduler+0x8e>
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008198:	e7fe      	b.n	8008198 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800819a:	4b18      	ldr	r3, [pc, #96]	; (80081fc <xPortStartScheduler+0x104>)
 800819c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80081a0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081a2:	9b01      	ldr	r3, [sp, #4]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	4a13      	ldr	r2, [pc, #76]	; (80081f4 <xPortStartScheduler+0xfc>)
 80081a8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081aa:	4b15      	ldr	r3, [pc, #84]	; (8008200 <xPortStartScheduler+0x108>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80081b2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80081ba:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80081bc:	f7ff ff80 	bl	80080c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80081c0:	2400      	movs	r4, #0
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <xPortStartScheduler+0x10c>)
 80081c4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80081c6:	f7ff fec3 	bl	8007f50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081ca:	4a0f      	ldr	r2, [pc, #60]	; (8008208 <xPortStartScheduler+0x110>)
 80081cc:	6813      	ldr	r3, [r2, #0]
 80081ce:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081d2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80081d4:	f7ff fea8 	bl	8007f28 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80081d8:	f7ff fe2c 	bl	8007e34 <vTaskSwitchContext>
	prvTaskExitError();
 80081dc:	f7ff fe84 	bl	8007ee8 <prvTaskExitError>
}
 80081e0:	4620      	mov	r0, r4
 80081e2:	b002      	add	sp, #8
 80081e4:	bd10      	pop	{r4, pc}
 80081e6:	bf00      	nop
 80081e8:	e000ed00 	.word	0xe000ed00
 80081ec:	410fc271 	.word	0x410fc271
 80081f0:	410fc270 	.word	0x410fc270
 80081f4:	e000e400 	.word	0xe000e400
 80081f8:	20003034 	.word	0x20003034
 80081fc:	20003038 	.word	0x20003038
 8008200:	e000ed20 	.word	0xe000ed20
 8008204:	20002b1c 	.word	0x20002b1c
 8008208:	e000ef34 	.word	0xe000ef34

0800820c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800820c:	b510      	push	{r4, lr}
 800820e:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
 8008210:	f7ff fcc4 	bl	8007b9c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8008214:	4620      	mov	r0, r4
 8008216:	f000 f83b 	bl	8008290 <malloc>
 800821a:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800821c:	f7ff fd60 	bl	8007ce0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8008220:	4620      	mov	r0, r4
 8008222:	bd10      	pop	{r4, pc}

08008224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
 8008224:	b148      	cbz	r0, 800823a <vPortFree+0x16>
{
 8008226:	b510      	push	{r4, lr}
 8008228:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
 800822a:	f7ff fcb7 	bl	8007b9c <vTaskSuspendAll>
		{
			free( pv );
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f836 	bl	80082a0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8008234:	f7ff fd54 	bl	8007ce0 <xTaskResumeAll>
	}
}
 8008238:	bd10      	pop	{r4, pc}
 800823a:	4770      	bx	lr

0800823c <__errno>:
 800823c:	4b01      	ldr	r3, [pc, #4]	; (8008244 <__errno+0x8>)
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20002b20 	.word	0x20002b20

08008248 <__libc_init_array>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	4d0d      	ldr	r5, [pc, #52]	; (8008280 <__libc_init_array+0x38>)
 800824c:	4c0d      	ldr	r4, [pc, #52]	; (8008284 <__libc_init_array+0x3c>)
 800824e:	1b64      	subs	r4, r4, r5
 8008250:	10a4      	asrs	r4, r4, #2
 8008252:	2600      	movs	r6, #0
 8008254:	42a6      	cmp	r6, r4
 8008256:	d109      	bne.n	800826c <__libc_init_array+0x24>
 8008258:	4d0b      	ldr	r5, [pc, #44]	; (8008288 <__libc_init_array+0x40>)
 800825a:	4c0c      	ldr	r4, [pc, #48]	; (800828c <__libc_init_array+0x44>)
 800825c:	f001 ff7a 	bl	800a154 <_init>
 8008260:	1b64      	subs	r4, r4, r5
 8008262:	10a4      	asrs	r4, r4, #2
 8008264:	2600      	movs	r6, #0
 8008266:	42a6      	cmp	r6, r4
 8008268:	d105      	bne.n	8008276 <__libc_init_array+0x2e>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008270:	4798      	blx	r3
 8008272:	3601      	adds	r6, #1
 8008274:	e7ee      	b.n	8008254 <__libc_init_array+0xc>
 8008276:	f855 3b04 	ldr.w	r3, [r5], #4
 800827a:	4798      	blx	r3
 800827c:	3601      	adds	r6, #1
 800827e:	e7f2      	b.n	8008266 <__libc_init_array+0x1e>
 8008280:	0800a500 	.word	0x0800a500
 8008284:	0800a500 	.word	0x0800a500
 8008288:	0800a500 	.word	0x0800a500
 800828c:	0800a504 	.word	0x0800a504

08008290 <malloc>:
 8008290:	4b02      	ldr	r3, [pc, #8]	; (800829c <malloc+0xc>)
 8008292:	4601      	mov	r1, r0
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	f000 b863 	b.w	8008360 <_malloc_r>
 800829a:	bf00      	nop
 800829c:	20002b20 	.word	0x20002b20

080082a0 <free>:
 80082a0:	4b02      	ldr	r3, [pc, #8]	; (80082ac <free+0xc>)
 80082a2:	4601      	mov	r1, r0
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f000 b80b 	b.w	80082c0 <_free_r>
 80082aa:	bf00      	nop
 80082ac:	20002b20 	.word	0x20002b20

080082b0 <memset>:
 80082b0:	4402      	add	r2, r0
 80082b2:	4603      	mov	r3, r0
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d100      	bne.n	80082ba <memset+0xa>
 80082b8:	4770      	bx	lr
 80082ba:	f803 1b01 	strb.w	r1, [r3], #1
 80082be:	e7f9      	b.n	80082b4 <memset+0x4>

080082c0 <_free_r>:
 80082c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d048      	beq.n	8008358 <_free_r+0x98>
 80082c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ca:	9001      	str	r0, [sp, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f1a1 0404 	sub.w	r4, r1, #4
 80082d2:	bfb8      	it	lt
 80082d4:	18e4      	addlt	r4, r4, r3
 80082d6:	f000 f8ad 	bl	8008434 <__malloc_lock>
 80082da:	4a20      	ldr	r2, [pc, #128]	; (800835c <_free_r+0x9c>)
 80082dc:	9801      	ldr	r0, [sp, #4]
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	4615      	mov	r5, r2
 80082e2:	b933      	cbnz	r3, 80082f2 <_free_r+0x32>
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	6014      	str	r4, [r2, #0]
 80082e8:	b003      	add	sp, #12
 80082ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082ee:	f000 b8a7 	b.w	8008440 <__malloc_unlock>
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	d90b      	bls.n	800830e <_free_r+0x4e>
 80082f6:	6821      	ldr	r1, [r4, #0]
 80082f8:	1862      	adds	r2, r4, r1
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bf04      	itt	eq
 80082fe:	681a      	ldreq	r2, [r3, #0]
 8008300:	685b      	ldreq	r3, [r3, #4]
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	bf04      	itt	eq
 8008306:	1852      	addeq	r2, r2, r1
 8008308:	6022      	streq	r2, [r4, #0]
 800830a:	602c      	str	r4, [r5, #0]
 800830c:	e7ec      	b.n	80082e8 <_free_r+0x28>
 800830e:	461a      	mov	r2, r3
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	b10b      	cbz	r3, 8008318 <_free_r+0x58>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d9fa      	bls.n	800830e <_free_r+0x4e>
 8008318:	6811      	ldr	r1, [r2, #0]
 800831a:	1855      	adds	r5, r2, r1
 800831c:	42a5      	cmp	r5, r4
 800831e:	d10b      	bne.n	8008338 <_free_r+0x78>
 8008320:	6824      	ldr	r4, [r4, #0]
 8008322:	4421      	add	r1, r4
 8008324:	1854      	adds	r4, r2, r1
 8008326:	42a3      	cmp	r3, r4
 8008328:	6011      	str	r1, [r2, #0]
 800832a:	d1dd      	bne.n	80082e8 <_free_r+0x28>
 800832c:	681c      	ldr	r4, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	6053      	str	r3, [r2, #4]
 8008332:	4421      	add	r1, r4
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	e7d7      	b.n	80082e8 <_free_r+0x28>
 8008338:	d902      	bls.n	8008340 <_free_r+0x80>
 800833a:	230c      	movs	r3, #12
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	e7d3      	b.n	80082e8 <_free_r+0x28>
 8008340:	6825      	ldr	r5, [r4, #0]
 8008342:	1961      	adds	r1, r4, r5
 8008344:	428b      	cmp	r3, r1
 8008346:	bf04      	itt	eq
 8008348:	6819      	ldreq	r1, [r3, #0]
 800834a:	685b      	ldreq	r3, [r3, #4]
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	bf04      	itt	eq
 8008350:	1949      	addeq	r1, r1, r5
 8008352:	6021      	streq	r1, [r4, #0]
 8008354:	6054      	str	r4, [r2, #4]
 8008356:	e7c7      	b.n	80082e8 <_free_r+0x28>
 8008358:	b003      	add	sp, #12
 800835a:	bd30      	pop	{r4, r5, pc}
 800835c:	2000303c 	.word	0x2000303c

08008360 <_malloc_r>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	1ccd      	adds	r5, r1, #3
 8008364:	f025 0503 	bic.w	r5, r5, #3
 8008368:	3508      	adds	r5, #8
 800836a:	2d0c      	cmp	r5, #12
 800836c:	bf38      	it	cc
 800836e:	250c      	movcc	r5, #12
 8008370:	2d00      	cmp	r5, #0
 8008372:	4606      	mov	r6, r0
 8008374:	db01      	blt.n	800837a <_malloc_r+0x1a>
 8008376:	42a9      	cmp	r1, r5
 8008378:	d903      	bls.n	8008382 <_malloc_r+0x22>
 800837a:	230c      	movs	r3, #12
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	2000      	movs	r0, #0
 8008380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008382:	f000 f857 	bl	8008434 <__malloc_lock>
 8008386:	4921      	ldr	r1, [pc, #132]	; (800840c <_malloc_r+0xac>)
 8008388:	680a      	ldr	r2, [r1, #0]
 800838a:	4614      	mov	r4, r2
 800838c:	b99c      	cbnz	r4, 80083b6 <_malloc_r+0x56>
 800838e:	4f20      	ldr	r7, [pc, #128]	; (8008410 <_malloc_r+0xb0>)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	b923      	cbnz	r3, 800839e <_malloc_r+0x3e>
 8008394:	4621      	mov	r1, r4
 8008396:	4630      	mov	r0, r6
 8008398:	f000 f83c 	bl	8008414 <_sbrk_r>
 800839c:	6038      	str	r0, [r7, #0]
 800839e:	4629      	mov	r1, r5
 80083a0:	4630      	mov	r0, r6
 80083a2:	f000 f837 	bl	8008414 <_sbrk_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d123      	bne.n	80083f2 <_malloc_r+0x92>
 80083aa:	230c      	movs	r3, #12
 80083ac:	6033      	str	r3, [r6, #0]
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 f846 	bl	8008440 <__malloc_unlock>
 80083b4:	e7e3      	b.n	800837e <_malloc_r+0x1e>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	1b5b      	subs	r3, r3, r5
 80083ba:	d417      	bmi.n	80083ec <_malloc_r+0x8c>
 80083bc:	2b0b      	cmp	r3, #11
 80083be:	d903      	bls.n	80083c8 <_malloc_r+0x68>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	441c      	add	r4, r3
 80083c4:	6025      	str	r5, [r4, #0]
 80083c6:	e004      	b.n	80083d2 <_malloc_r+0x72>
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	42a2      	cmp	r2, r4
 80083cc:	bf0c      	ite	eq
 80083ce:	600b      	streq	r3, [r1, #0]
 80083d0:	6053      	strne	r3, [r2, #4]
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 f834 	bl	8008440 <__malloc_unlock>
 80083d8:	f104 000b 	add.w	r0, r4, #11
 80083dc:	1d23      	adds	r3, r4, #4
 80083de:	f020 0007 	bic.w	r0, r0, #7
 80083e2:	1ac2      	subs	r2, r0, r3
 80083e4:	d0cc      	beq.n	8008380 <_malloc_r+0x20>
 80083e6:	1a1b      	subs	r3, r3, r0
 80083e8:	50a3      	str	r3, [r4, r2]
 80083ea:	e7c9      	b.n	8008380 <_malloc_r+0x20>
 80083ec:	4622      	mov	r2, r4
 80083ee:	6864      	ldr	r4, [r4, #4]
 80083f0:	e7cc      	b.n	800838c <_malloc_r+0x2c>
 80083f2:	1cc4      	adds	r4, r0, #3
 80083f4:	f024 0403 	bic.w	r4, r4, #3
 80083f8:	42a0      	cmp	r0, r4
 80083fa:	d0e3      	beq.n	80083c4 <_malloc_r+0x64>
 80083fc:	1a21      	subs	r1, r4, r0
 80083fe:	4630      	mov	r0, r6
 8008400:	f000 f808 	bl	8008414 <_sbrk_r>
 8008404:	3001      	adds	r0, #1
 8008406:	d1dd      	bne.n	80083c4 <_malloc_r+0x64>
 8008408:	e7cf      	b.n	80083aa <_malloc_r+0x4a>
 800840a:	bf00      	nop
 800840c:	2000303c 	.word	0x2000303c
 8008410:	20003040 	.word	0x20003040

08008414 <_sbrk_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_sbrk_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7fc fb5a 	bl	8004ad8 <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_sbrk_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_sbrk_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200034fc 	.word	0x200034fc

08008434 <__malloc_lock>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__malloc_lock+0x8>)
 8008436:	f000 b809 	b.w	800844c <__retarget_lock_acquire_recursive>
 800843a:	bf00      	nop
 800843c:	20003504 	.word	0x20003504

08008440 <__malloc_unlock>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__malloc_unlock+0x8>)
 8008442:	f000 b804 	b.w	800844e <__retarget_lock_release_recursive>
 8008446:	bf00      	nop
 8008448:	20003504 	.word	0x20003504

0800844c <__retarget_lock_acquire_recursive>:
 800844c:	4770      	bx	lr

0800844e <__retarget_lock_release_recursive>:
 800844e:	4770      	bx	lr

08008450 <cos>:
 8008450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008452:	ec53 2b10 	vmov	r2, r3, d0
 8008456:	4824      	ldr	r0, [pc, #144]	; (80084e8 <cos+0x98>)
 8008458:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800845c:	4281      	cmp	r1, r0
 800845e:	dc06      	bgt.n	800846e <cos+0x1e>
 8008460:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80084e0 <cos+0x90>
 8008464:	f000 fef4 	bl	8009250 <__kernel_cos>
 8008468:	ec51 0b10 	vmov	r0, r1, d0
 800846c:	e007      	b.n	800847e <cos+0x2e>
 800846e:	481f      	ldr	r0, [pc, #124]	; (80084ec <cos+0x9c>)
 8008470:	4281      	cmp	r1, r0
 8008472:	dd09      	ble.n	8008488 <cos+0x38>
 8008474:	ee10 0a10 	vmov	r0, s0
 8008478:	4619      	mov	r1, r3
 800847a:	f7f7 fead 	bl	80001d8 <__aeabi_dsub>
 800847e:	ec41 0b10 	vmov	d0, r0, r1
 8008482:	b005      	add	sp, #20
 8008484:	f85d fb04 	ldr.w	pc, [sp], #4
 8008488:	4668      	mov	r0, sp
 800848a:	f000 fc21 	bl	8008cd0 <__ieee754_rem_pio2>
 800848e:	f000 0003 	and.w	r0, r0, #3
 8008492:	2801      	cmp	r0, #1
 8008494:	d007      	beq.n	80084a6 <cos+0x56>
 8008496:	2802      	cmp	r0, #2
 8008498:	d012      	beq.n	80084c0 <cos+0x70>
 800849a:	b9c0      	cbnz	r0, 80084ce <cos+0x7e>
 800849c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084a0:	ed9d 0b00 	vldr	d0, [sp]
 80084a4:	e7de      	b.n	8008464 <cos+0x14>
 80084a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084aa:	ed9d 0b00 	vldr	d0, [sp]
 80084ae:	f001 fad7 	bl	8009a60 <__kernel_sin>
 80084b2:	ec53 2b10 	vmov	r2, r3, d0
 80084b6:	ee10 0a10 	vmov	r0, s0
 80084ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084be:	e7de      	b.n	800847e <cos+0x2e>
 80084c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084c4:	ed9d 0b00 	vldr	d0, [sp]
 80084c8:	f000 fec2 	bl	8009250 <__kernel_cos>
 80084cc:	e7f1      	b.n	80084b2 <cos+0x62>
 80084ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084d2:	ed9d 0b00 	vldr	d0, [sp]
 80084d6:	2001      	movs	r0, #1
 80084d8:	f001 fac2 	bl	8009a60 <__kernel_sin>
 80084dc:	e7c4      	b.n	8008468 <cos+0x18>
 80084de:	bf00      	nop
	...
 80084e8:	3fe921fb 	.word	0x3fe921fb
 80084ec:	7fefffff 	.word	0x7fefffff

080084f0 <sin>:
 80084f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084f2:	ec53 2b10 	vmov	r2, r3, d0
 80084f6:	4826      	ldr	r0, [pc, #152]	; (8008590 <sin+0xa0>)
 80084f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084fc:	4281      	cmp	r1, r0
 80084fe:	dc07      	bgt.n	8008510 <sin+0x20>
 8008500:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008588 <sin+0x98>
 8008504:	2000      	movs	r0, #0
 8008506:	f001 faab 	bl	8009a60 <__kernel_sin>
 800850a:	ec51 0b10 	vmov	r0, r1, d0
 800850e:	e007      	b.n	8008520 <sin+0x30>
 8008510:	4820      	ldr	r0, [pc, #128]	; (8008594 <sin+0xa4>)
 8008512:	4281      	cmp	r1, r0
 8008514:	dd09      	ble.n	800852a <sin+0x3a>
 8008516:	ee10 0a10 	vmov	r0, s0
 800851a:	4619      	mov	r1, r3
 800851c:	f7f7 fe5c 	bl	80001d8 <__aeabi_dsub>
 8008520:	ec41 0b10 	vmov	d0, r0, r1
 8008524:	b005      	add	sp, #20
 8008526:	f85d fb04 	ldr.w	pc, [sp], #4
 800852a:	4668      	mov	r0, sp
 800852c:	f000 fbd0 	bl	8008cd0 <__ieee754_rem_pio2>
 8008530:	f000 0003 	and.w	r0, r0, #3
 8008534:	2801      	cmp	r0, #1
 8008536:	d008      	beq.n	800854a <sin+0x5a>
 8008538:	2802      	cmp	r0, #2
 800853a:	d00d      	beq.n	8008558 <sin+0x68>
 800853c:	b9d0      	cbnz	r0, 8008574 <sin+0x84>
 800853e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008542:	ed9d 0b00 	vldr	d0, [sp]
 8008546:	2001      	movs	r0, #1
 8008548:	e7dd      	b.n	8008506 <sin+0x16>
 800854a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800854e:	ed9d 0b00 	vldr	d0, [sp]
 8008552:	f000 fe7d 	bl	8009250 <__kernel_cos>
 8008556:	e7d8      	b.n	800850a <sin+0x1a>
 8008558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800855c:	ed9d 0b00 	vldr	d0, [sp]
 8008560:	2001      	movs	r0, #1
 8008562:	f001 fa7d 	bl	8009a60 <__kernel_sin>
 8008566:	ec53 2b10 	vmov	r2, r3, d0
 800856a:	ee10 0a10 	vmov	r0, s0
 800856e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008572:	e7d5      	b.n	8008520 <sin+0x30>
 8008574:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008578:	ed9d 0b00 	vldr	d0, [sp]
 800857c:	f000 fe68 	bl	8009250 <__kernel_cos>
 8008580:	e7f1      	b.n	8008566 <sin+0x76>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
	...
 8008590:	3fe921fb 	.word	0x3fe921fb
 8008594:	7fefffff 	.word	0x7fefffff

08008598 <acos>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	ed2d 8b02 	vpush	{d8}
 800859e:	ec55 4b10 	vmov	r4, r5, d0
 80085a2:	f000 f869 	bl	8008678 <__ieee754_acos>
 80085a6:	4b16      	ldr	r3, [pc, #88]	; (8008600 <acos+0x68>)
 80085a8:	eeb0 8a40 	vmov.f32	s16, s0
 80085ac:	eef0 8a60 	vmov.f32	s17, s1
 80085b0:	f993 3000 	ldrsb.w	r3, [r3]
 80085b4:	3301      	adds	r3, #1
 80085b6:	d01c      	beq.n	80085f2 <acos+0x5a>
 80085b8:	4622      	mov	r2, r4
 80085ba:	462b      	mov	r3, r5
 80085bc:	4620      	mov	r0, r4
 80085be:	4629      	mov	r1, r5
 80085c0:	f7f8 fa5c 	bl	8000a7c <__aeabi_dcmpun>
 80085c4:	b9a8      	cbnz	r0, 80085f2 <acos+0x5a>
 80085c6:	ec45 4b10 	vmov	d0, r4, r5
 80085ca:	f001 fca9 	bl	8009f20 <fabs>
 80085ce:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <acos+0x6c>)
 80085d0:	ec51 0b10 	vmov	r0, r1, d0
 80085d4:	2200      	movs	r2, #0
 80085d6:	f7f8 fa47 	bl	8000a68 <__aeabi_dcmpgt>
 80085da:	b150      	cbz	r0, 80085f2 <acos+0x5a>
 80085dc:	f7ff fe2e 	bl	800823c <__errno>
 80085e0:	ecbd 8b02 	vpop	{d8}
 80085e4:	2321      	movs	r3, #33	; 0x21
 80085e6:	6003      	str	r3, [r0, #0]
 80085e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ec:	4806      	ldr	r0, [pc, #24]	; (8008608 <acos+0x70>)
 80085ee:	f001 bd23 	b.w	800a038 <nan>
 80085f2:	eeb0 0a48 	vmov.f32	s0, s16
 80085f6:	eef0 0a68 	vmov.f32	s1, s17
 80085fa:	ecbd 8b02 	vpop	{d8}
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20002b84 	.word	0x20002b84
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	0800a2a9 	.word	0x0800a2a9

0800860c <atan2>:
 800860c:	f000 ba94 	b.w	8008b38 <__ieee754_atan2>

08008610 <sqrt>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	ed2d 8b02 	vpush	{d8}
 8008616:	ec55 4b10 	vmov	r4, r5, d0
 800861a:	f000 fd63 	bl	80090e4 <__ieee754_sqrt>
 800861e:	4b15      	ldr	r3, [pc, #84]	; (8008674 <sqrt+0x64>)
 8008620:	eeb0 8a40 	vmov.f32	s16, s0
 8008624:	eef0 8a60 	vmov.f32	s17, s1
 8008628:	f993 3000 	ldrsb.w	r3, [r3]
 800862c:	3301      	adds	r3, #1
 800862e:	d019      	beq.n	8008664 <sqrt+0x54>
 8008630:	4622      	mov	r2, r4
 8008632:	462b      	mov	r3, r5
 8008634:	4620      	mov	r0, r4
 8008636:	4629      	mov	r1, r5
 8008638:	f7f8 fa20 	bl	8000a7c <__aeabi_dcmpun>
 800863c:	b990      	cbnz	r0, 8008664 <sqrt+0x54>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f8 f9f1 	bl	8000a2c <__aeabi_dcmplt>
 800864a:	b158      	cbz	r0, 8008664 <sqrt+0x54>
 800864c:	f7ff fdf6 	bl	800823c <__errno>
 8008650:	2321      	movs	r3, #33	; 0x21
 8008652:	6003      	str	r3, [r0, #0]
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	4610      	mov	r0, r2
 800865a:	4619      	mov	r1, r3
 800865c:	f7f8 f89e 	bl	800079c <__aeabi_ddiv>
 8008660:	ec41 0b18 	vmov	d8, r0, r1
 8008664:	eeb0 0a48 	vmov.f32	s0, s16
 8008668:	eef0 0a68 	vmov.f32	s1, s17
 800866c:	ecbd 8b02 	vpop	{d8}
 8008670:	bd38      	pop	{r3, r4, r5, pc}
 8008672:	bf00      	nop
 8008674:	20002b84 	.word	0x20002b84

08008678 <__ieee754_acos>:
 8008678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	ec55 4b10 	vmov	r4, r5, d0
 8008680:	49b7      	ldr	r1, [pc, #732]	; (8008960 <__ieee754_acos+0x2e8>)
 8008682:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008686:	428b      	cmp	r3, r1
 8008688:	dd1b      	ble.n	80086c2 <__ieee754_acos+0x4a>
 800868a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800868e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008692:	4323      	orrs	r3, r4
 8008694:	d106      	bne.n	80086a4 <__ieee754_acos+0x2c>
 8008696:	2d00      	cmp	r5, #0
 8008698:	f300 8211 	bgt.w	8008abe <__ieee754_acos+0x446>
 800869c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80088f8 <__ieee754_acos+0x280>
 80086a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a4:	ee10 2a10 	vmov	r2, s0
 80086a8:	462b      	mov	r3, r5
 80086aa:	ee10 0a10 	vmov	r0, s0
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f7 fd92 	bl	80001d8 <__aeabi_dsub>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	f7f8 f870 	bl	800079c <__aeabi_ddiv>
 80086bc:	ec41 0b10 	vmov	d0, r0, r1
 80086c0:	e7ee      	b.n	80086a0 <__ieee754_acos+0x28>
 80086c2:	49a8      	ldr	r1, [pc, #672]	; (8008964 <__ieee754_acos+0x2ec>)
 80086c4:	428b      	cmp	r3, r1
 80086c6:	f300 8087 	bgt.w	80087d8 <__ieee754_acos+0x160>
 80086ca:	4aa7      	ldr	r2, [pc, #668]	; (8008968 <__ieee754_acos+0x2f0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	f340 81f9 	ble.w	8008ac4 <__ieee754_acos+0x44c>
 80086d2:	ee10 2a10 	vmov	r2, s0
 80086d6:	ee10 0a10 	vmov	r0, s0
 80086da:	462b      	mov	r3, r5
 80086dc:	4629      	mov	r1, r5
 80086de:	f7f7 ff33 	bl	8000548 <__aeabi_dmul>
 80086e2:	a387      	add	r3, pc, #540	; (adr r3, 8008900 <__ieee754_acos+0x288>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	4606      	mov	r6, r0
 80086ea:	460f      	mov	r7, r1
 80086ec:	f7f7 ff2c 	bl	8000548 <__aeabi_dmul>
 80086f0:	a385      	add	r3, pc, #532	; (adr r3, 8008908 <__ieee754_acos+0x290>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 fd71 	bl	80001dc <__adddf3>
 80086fa:	4632      	mov	r2, r6
 80086fc:	463b      	mov	r3, r7
 80086fe:	f7f7 ff23 	bl	8000548 <__aeabi_dmul>
 8008702:	a383      	add	r3, pc, #524	; (adr r3, 8008910 <__ieee754_acos+0x298>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f7f7 fd66 	bl	80001d8 <__aeabi_dsub>
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	f7f7 ff1a 	bl	8000548 <__aeabi_dmul>
 8008714:	a380      	add	r3, pc, #512	; (adr r3, 8008918 <__ieee754_acos+0x2a0>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 fd5f 	bl	80001dc <__adddf3>
 800871e:	4632      	mov	r2, r6
 8008720:	463b      	mov	r3, r7
 8008722:	f7f7 ff11 	bl	8000548 <__aeabi_dmul>
 8008726:	a37e      	add	r3, pc, #504	; (adr r3, 8008920 <__ieee754_acos+0x2a8>)
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f7f7 fd54 	bl	80001d8 <__aeabi_dsub>
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	f7f7 ff08 	bl	8000548 <__aeabi_dmul>
 8008738:	a37b      	add	r3, pc, #492	; (adr r3, 8008928 <__ieee754_acos+0x2b0>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 fd4d 	bl	80001dc <__adddf3>
 8008742:	4632      	mov	r2, r6
 8008744:	463b      	mov	r3, r7
 8008746:	f7f7 feff 	bl	8000548 <__aeabi_dmul>
 800874a:	a379      	add	r3, pc, #484	; (adr r3, 8008930 <__ieee754_acos+0x2b8>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	4680      	mov	r8, r0
 8008752:	4689      	mov	r9, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f7f7 fef6 	bl	8000548 <__aeabi_dmul>
 800875c:	a376      	add	r3, pc, #472	; (adr r3, 8008938 <__ieee754_acos+0x2c0>)
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 fd39 	bl	80001d8 <__aeabi_dsub>
 8008766:	4632      	mov	r2, r6
 8008768:	463b      	mov	r3, r7
 800876a:	f7f7 feed 	bl	8000548 <__aeabi_dmul>
 800876e:	a374      	add	r3, pc, #464	; (adr r3, 8008940 <__ieee754_acos+0x2c8>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fd32 	bl	80001dc <__adddf3>
 8008778:	4632      	mov	r2, r6
 800877a:	463b      	mov	r3, r7
 800877c:	f7f7 fee4 	bl	8000548 <__aeabi_dmul>
 8008780:	a371      	add	r3, pc, #452	; (adr r3, 8008948 <__ieee754_acos+0x2d0>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 fd27 	bl	80001d8 <__aeabi_dsub>
 800878a:	4632      	mov	r2, r6
 800878c:	463b      	mov	r3, r7
 800878e:	f7f7 fedb 	bl	8000548 <__aeabi_dmul>
 8008792:	4b76      	ldr	r3, [pc, #472]	; (800896c <__ieee754_acos+0x2f4>)
 8008794:	2200      	movs	r2, #0
 8008796:	f7f7 fd21 	bl	80001dc <__adddf3>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4640      	mov	r0, r8
 80087a0:	4649      	mov	r1, r9
 80087a2:	f7f7 fffb 	bl	800079c <__aeabi_ddiv>
 80087a6:	4622      	mov	r2, r4
 80087a8:	462b      	mov	r3, r5
 80087aa:	f7f7 fecd 	bl	8000548 <__aeabi_dmul>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	a167      	add	r1, pc, #412	; (adr r1, 8008950 <__ieee754_acos+0x2d8>)
 80087b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b8:	f7f7 fd0e 	bl	80001d8 <__aeabi_dsub>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4620      	mov	r0, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	f7f7 fd08 	bl	80001d8 <__aeabi_dsub>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	a162      	add	r1, pc, #392	; (adr r1, 8008958 <__ieee754_acos+0x2e0>)
 80087ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087d2:	f7f7 fd01 	bl	80001d8 <__aeabi_dsub>
 80087d6:	e771      	b.n	80086bc <__ieee754_acos+0x44>
 80087d8:	2d00      	cmp	r5, #0
 80087da:	f280 80cb 	bge.w	8008974 <__ieee754_acos+0x2fc>
 80087de:	ee10 0a10 	vmov	r0, s0
 80087e2:	4b62      	ldr	r3, [pc, #392]	; (800896c <__ieee754_acos+0x2f4>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f7 fcf8 	bl	80001dc <__adddf3>
 80087ec:	4b60      	ldr	r3, [pc, #384]	; (8008970 <__ieee754_acos+0x2f8>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	f7f7 feaa 	bl	8000548 <__aeabi_dmul>
 80087f4:	a342      	add	r3, pc, #264	; (adr r3, 8008900 <__ieee754_acos+0x288>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	4604      	mov	r4, r0
 80087fc:	460d      	mov	r5, r1
 80087fe:	f7f7 fea3 	bl	8000548 <__aeabi_dmul>
 8008802:	a341      	add	r3, pc, #260	; (adr r3, 8008908 <__ieee754_acos+0x290>)
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f7f7 fce8 	bl	80001dc <__adddf3>
 800880c:	4622      	mov	r2, r4
 800880e:	462b      	mov	r3, r5
 8008810:	f7f7 fe9a 	bl	8000548 <__aeabi_dmul>
 8008814:	a33e      	add	r3, pc, #248	; (adr r3, 8008910 <__ieee754_acos+0x298>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fcdd 	bl	80001d8 <__aeabi_dsub>
 800881e:	4622      	mov	r2, r4
 8008820:	462b      	mov	r3, r5
 8008822:	f7f7 fe91 	bl	8000548 <__aeabi_dmul>
 8008826:	a33c      	add	r3, pc, #240	; (adr r3, 8008918 <__ieee754_acos+0x2a0>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f7 fcd6 	bl	80001dc <__adddf3>
 8008830:	4622      	mov	r2, r4
 8008832:	462b      	mov	r3, r5
 8008834:	f7f7 fe88 	bl	8000548 <__aeabi_dmul>
 8008838:	a339      	add	r3, pc, #228	; (adr r3, 8008920 <__ieee754_acos+0x2a8>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f7 fccb 	bl	80001d8 <__aeabi_dsub>
 8008842:	4622      	mov	r2, r4
 8008844:	462b      	mov	r3, r5
 8008846:	f7f7 fe7f 	bl	8000548 <__aeabi_dmul>
 800884a:	a337      	add	r3, pc, #220	; (adr r3, 8008928 <__ieee754_acos+0x2b0>)
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	f7f7 fcc4 	bl	80001dc <__adddf3>
 8008854:	4622      	mov	r2, r4
 8008856:	462b      	mov	r3, r5
 8008858:	f7f7 fe76 	bl	8000548 <__aeabi_dmul>
 800885c:	ec45 4b10 	vmov	d0, r4, r5
 8008860:	4680      	mov	r8, r0
 8008862:	4689      	mov	r9, r1
 8008864:	f000 fc3e 	bl	80090e4 <__ieee754_sqrt>
 8008868:	a331      	add	r3, pc, #196	; (adr r3, 8008930 <__ieee754_acos+0x2b8>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	ec57 6b10 	vmov	r6, r7, d0
 8008876:	f7f7 fe67 	bl	8000548 <__aeabi_dmul>
 800887a:	a32f      	add	r3, pc, #188	; (adr r3, 8008938 <__ieee754_acos+0x2c0>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 fcaa 	bl	80001d8 <__aeabi_dsub>
 8008884:	4622      	mov	r2, r4
 8008886:	462b      	mov	r3, r5
 8008888:	f7f7 fe5e 	bl	8000548 <__aeabi_dmul>
 800888c:	a32c      	add	r3, pc, #176	; (adr r3, 8008940 <__ieee754_acos+0x2c8>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f7 fca3 	bl	80001dc <__adddf3>
 8008896:	4622      	mov	r2, r4
 8008898:	462b      	mov	r3, r5
 800889a:	f7f7 fe55 	bl	8000548 <__aeabi_dmul>
 800889e:	a32a      	add	r3, pc, #168	; (adr r3, 8008948 <__ieee754_acos+0x2d0>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f7f7 fc98 	bl	80001d8 <__aeabi_dsub>
 80088a8:	4622      	mov	r2, r4
 80088aa:	462b      	mov	r3, r5
 80088ac:	f7f7 fe4c 	bl	8000548 <__aeabi_dmul>
 80088b0:	4b2e      	ldr	r3, [pc, #184]	; (800896c <__ieee754_acos+0x2f4>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	f7f7 fc92 	bl	80001dc <__adddf3>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4640      	mov	r0, r8
 80088be:	4649      	mov	r1, r9
 80088c0:	f7f7 ff6c 	bl	800079c <__aeabi_ddiv>
 80088c4:	4632      	mov	r2, r6
 80088c6:	463b      	mov	r3, r7
 80088c8:	f7f7 fe3e 	bl	8000548 <__aeabi_dmul>
 80088cc:	a320      	add	r3, pc, #128	; (adr r3, 8008950 <__ieee754_acos+0x2d8>)
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fc81 	bl	80001d8 <__aeabi_dsub>
 80088d6:	4632      	mov	r2, r6
 80088d8:	463b      	mov	r3, r7
 80088da:	f7f7 fc7f 	bl	80001dc <__adddf3>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	f7f7 fc7b 	bl	80001dc <__adddf3>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	a103      	add	r1, pc, #12	; (adr r1, 80088f8 <__ieee754_acos+0x280>)
 80088ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f0:	e76f      	b.n	80087d2 <__ieee754_acos+0x15a>
 80088f2:	bf00      	nop
 80088f4:	f3af 8000 	nop.w
 80088f8:	54442d18 	.word	0x54442d18
 80088fc:	400921fb 	.word	0x400921fb
 8008900:	0dfdf709 	.word	0x0dfdf709
 8008904:	3f023de1 	.word	0x3f023de1
 8008908:	7501b288 	.word	0x7501b288
 800890c:	3f49efe0 	.word	0x3f49efe0
 8008910:	b5688f3b 	.word	0xb5688f3b
 8008914:	3fa48228 	.word	0x3fa48228
 8008918:	0e884455 	.word	0x0e884455
 800891c:	3fc9c155 	.word	0x3fc9c155
 8008920:	03eb6f7d 	.word	0x03eb6f7d
 8008924:	3fd4d612 	.word	0x3fd4d612
 8008928:	55555555 	.word	0x55555555
 800892c:	3fc55555 	.word	0x3fc55555
 8008930:	b12e9282 	.word	0xb12e9282
 8008934:	3fb3b8c5 	.word	0x3fb3b8c5
 8008938:	1b8d0159 	.word	0x1b8d0159
 800893c:	3fe6066c 	.word	0x3fe6066c
 8008940:	9c598ac8 	.word	0x9c598ac8
 8008944:	40002ae5 	.word	0x40002ae5
 8008948:	1c8a2d4b 	.word	0x1c8a2d4b
 800894c:	40033a27 	.word	0x40033a27
 8008950:	33145c07 	.word	0x33145c07
 8008954:	3c91a626 	.word	0x3c91a626
 8008958:	54442d18 	.word	0x54442d18
 800895c:	3ff921fb 	.word	0x3ff921fb
 8008960:	3fefffff 	.word	0x3fefffff
 8008964:	3fdfffff 	.word	0x3fdfffff
 8008968:	3c600000 	.word	0x3c600000
 800896c:	3ff00000 	.word	0x3ff00000
 8008970:	3fe00000 	.word	0x3fe00000
 8008974:	ee10 2a10 	vmov	r2, s0
 8008978:	462b      	mov	r3, r5
 800897a:	496d      	ldr	r1, [pc, #436]	; (8008b30 <__ieee754_acos+0x4b8>)
 800897c:	2000      	movs	r0, #0
 800897e:	f7f7 fc2b 	bl	80001d8 <__aeabi_dsub>
 8008982:	4b6c      	ldr	r3, [pc, #432]	; (8008b34 <__ieee754_acos+0x4bc>)
 8008984:	2200      	movs	r2, #0
 8008986:	f7f7 fddf 	bl	8000548 <__aeabi_dmul>
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	ec45 4b10 	vmov	d0, r4, r5
 8008992:	f000 fba7 	bl	80090e4 <__ieee754_sqrt>
 8008996:	a34e      	add	r3, pc, #312	; (adr r3, 8008ad0 <__ieee754_acos+0x458>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	4620      	mov	r0, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	ec59 8b10 	vmov	r8, r9, d0
 80089a4:	f7f7 fdd0 	bl	8000548 <__aeabi_dmul>
 80089a8:	a34b      	add	r3, pc, #300	; (adr r3, 8008ad8 <__ieee754_acos+0x460>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 fc15 	bl	80001dc <__adddf3>
 80089b2:	4622      	mov	r2, r4
 80089b4:	462b      	mov	r3, r5
 80089b6:	f7f7 fdc7 	bl	8000548 <__aeabi_dmul>
 80089ba:	a349      	add	r3, pc, #292	; (adr r3, 8008ae0 <__ieee754_acos+0x468>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fc0a 	bl	80001d8 <__aeabi_dsub>
 80089c4:	4622      	mov	r2, r4
 80089c6:	462b      	mov	r3, r5
 80089c8:	f7f7 fdbe 	bl	8000548 <__aeabi_dmul>
 80089cc:	a346      	add	r3, pc, #280	; (adr r3, 8008ae8 <__ieee754_acos+0x470>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f7f7 fc03 	bl	80001dc <__adddf3>
 80089d6:	4622      	mov	r2, r4
 80089d8:	462b      	mov	r3, r5
 80089da:	f7f7 fdb5 	bl	8000548 <__aeabi_dmul>
 80089de:	a344      	add	r3, pc, #272	; (adr r3, 8008af0 <__ieee754_acos+0x478>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f7f7 fbf8 	bl	80001d8 <__aeabi_dsub>
 80089e8:	4622      	mov	r2, r4
 80089ea:	462b      	mov	r3, r5
 80089ec:	f7f7 fdac 	bl	8000548 <__aeabi_dmul>
 80089f0:	a341      	add	r3, pc, #260	; (adr r3, 8008af8 <__ieee754_acos+0x480>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fbf1 	bl	80001dc <__adddf3>
 80089fa:	4622      	mov	r2, r4
 80089fc:	462b      	mov	r3, r5
 80089fe:	f7f7 fda3 	bl	8000548 <__aeabi_dmul>
 8008a02:	a33f      	add	r3, pc, #252	; (adr r3, 8008b00 <__ieee754_acos+0x488>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	4682      	mov	sl, r0
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fd9a 	bl	8000548 <__aeabi_dmul>
 8008a14:	a33c      	add	r3, pc, #240	; (adr r3, 8008b08 <__ieee754_acos+0x490>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fbdd 	bl	80001d8 <__aeabi_dsub>
 8008a1e:	4622      	mov	r2, r4
 8008a20:	462b      	mov	r3, r5
 8008a22:	f7f7 fd91 	bl	8000548 <__aeabi_dmul>
 8008a26:	a33a      	add	r3, pc, #232	; (adr r3, 8008b10 <__ieee754_acos+0x498>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fbd6 	bl	80001dc <__adddf3>
 8008a30:	4622      	mov	r2, r4
 8008a32:	462b      	mov	r3, r5
 8008a34:	f7f7 fd88 	bl	8000548 <__aeabi_dmul>
 8008a38:	a337      	add	r3, pc, #220	; (adr r3, 8008b18 <__ieee754_acos+0x4a0>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fbcb 	bl	80001d8 <__aeabi_dsub>
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	f7f7 fd7f 	bl	8000548 <__aeabi_dmul>
 8008a4a:	4b39      	ldr	r3, [pc, #228]	; (8008b30 <__ieee754_acos+0x4b8>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f7f7 fbc5 	bl	80001dc <__adddf3>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4650      	mov	r0, sl
 8008a58:	4659      	mov	r1, fp
 8008a5a:	f7f7 fe9f 	bl	800079c <__aeabi_ddiv>
 8008a5e:	4642      	mov	r2, r8
 8008a60:	464b      	mov	r3, r9
 8008a62:	f7f7 fd71 	bl	8000548 <__aeabi_dmul>
 8008a66:	2600      	movs	r6, #0
 8008a68:	4682      	mov	sl, r0
 8008a6a:	468b      	mov	fp, r1
 8008a6c:	4632      	mov	r2, r6
 8008a6e:	464b      	mov	r3, r9
 8008a70:	4630      	mov	r0, r6
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f7 fd68 	bl	8000548 <__aeabi_dmul>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f7f7 fbaa 	bl	80001d8 <__aeabi_dsub>
 8008a84:	4632      	mov	r2, r6
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f7 fba4 	bl	80001dc <__adddf3>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f7f7 fe7e 	bl	800079c <__aeabi_ddiv>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4650      	mov	r0, sl
 8008aa6:	4659      	mov	r1, fp
 8008aa8:	f7f7 fb98 	bl	80001dc <__adddf3>
 8008aac:	4632      	mov	r2, r6
 8008aae:	464b      	mov	r3, r9
 8008ab0:	f7f7 fb94 	bl	80001dc <__adddf3>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	f7f7 fb90 	bl	80001dc <__adddf3>
 8008abc:	e5fe      	b.n	80086bc <__ieee754_acos+0x44>
 8008abe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008b20 <__ieee754_acos+0x4a8>
 8008ac2:	e5ed      	b.n	80086a0 <__ieee754_acos+0x28>
 8008ac4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008b28 <__ieee754_acos+0x4b0>
 8008ac8:	e5ea      	b.n	80086a0 <__ieee754_acos+0x28>
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
 8008ad0:	0dfdf709 	.word	0x0dfdf709
 8008ad4:	3f023de1 	.word	0x3f023de1
 8008ad8:	7501b288 	.word	0x7501b288
 8008adc:	3f49efe0 	.word	0x3f49efe0
 8008ae0:	b5688f3b 	.word	0xb5688f3b
 8008ae4:	3fa48228 	.word	0x3fa48228
 8008ae8:	0e884455 	.word	0x0e884455
 8008aec:	3fc9c155 	.word	0x3fc9c155
 8008af0:	03eb6f7d 	.word	0x03eb6f7d
 8008af4:	3fd4d612 	.word	0x3fd4d612
 8008af8:	55555555 	.word	0x55555555
 8008afc:	3fc55555 	.word	0x3fc55555
 8008b00:	b12e9282 	.word	0xb12e9282
 8008b04:	3fb3b8c5 	.word	0x3fb3b8c5
 8008b08:	1b8d0159 	.word	0x1b8d0159
 8008b0c:	3fe6066c 	.word	0x3fe6066c
 8008b10:	9c598ac8 	.word	0x9c598ac8
 8008b14:	40002ae5 	.word	0x40002ae5
 8008b18:	1c8a2d4b 	.word	0x1c8a2d4b
 8008b1c:	40033a27 	.word	0x40033a27
	...
 8008b28:	54442d18 	.word	0x54442d18
 8008b2c:	3ff921fb 	.word	0x3ff921fb
 8008b30:	3ff00000 	.word	0x3ff00000
 8008b34:	3fe00000 	.word	0x3fe00000

08008b38 <__ieee754_atan2>:
 8008b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	ec57 6b11 	vmov	r6, r7, d1
 8008b40:	4273      	negs	r3, r6
 8008b42:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008cc8 <__ieee754_atan2+0x190>
 8008b46:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008b4a:	4333      	orrs	r3, r6
 8008b4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008b50:	4573      	cmp	r3, lr
 8008b52:	ec51 0b10 	vmov	r0, r1, d0
 8008b56:	ee11 8a10 	vmov	r8, s2
 8008b5a:	d80a      	bhi.n	8008b72 <__ieee754_atan2+0x3a>
 8008b5c:	4244      	negs	r4, r0
 8008b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b62:	4304      	orrs	r4, r0
 8008b64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008b68:	4574      	cmp	r4, lr
 8008b6a:	ee10 9a10 	vmov	r9, s0
 8008b6e:	468c      	mov	ip, r1
 8008b70:	d907      	bls.n	8008b82 <__ieee754_atan2+0x4a>
 8008b72:	4632      	mov	r2, r6
 8008b74:	463b      	mov	r3, r7
 8008b76:	f7f7 fb31 	bl	80001dc <__adddf3>
 8008b7a:	ec41 0b10 	vmov	d0, r0, r1
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008b86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b8a:	4334      	orrs	r4, r6
 8008b8c:	d103      	bne.n	8008b96 <__ieee754_atan2+0x5e>
 8008b8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b92:	f001 b825 	b.w	8009be0 <atan>
 8008b96:	17bc      	asrs	r4, r7, #30
 8008b98:	f004 0402 	and.w	r4, r4, #2
 8008b9c:	ea53 0909 	orrs.w	r9, r3, r9
 8008ba0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008ba4:	d107      	bne.n	8008bb6 <__ieee754_atan2+0x7e>
 8008ba6:	2c02      	cmp	r4, #2
 8008ba8:	d060      	beq.n	8008c6c <__ieee754_atan2+0x134>
 8008baa:	2c03      	cmp	r4, #3
 8008bac:	d1e5      	bne.n	8008b7a <__ieee754_atan2+0x42>
 8008bae:	a142      	add	r1, pc, #264	; (adr r1, 8008cb8 <__ieee754_atan2+0x180>)
 8008bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb4:	e7e1      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008bb6:	ea52 0808 	orrs.w	r8, r2, r8
 8008bba:	d106      	bne.n	8008bca <__ieee754_atan2+0x92>
 8008bbc:	f1bc 0f00 	cmp.w	ip, #0
 8008bc0:	da5f      	bge.n	8008c82 <__ieee754_atan2+0x14a>
 8008bc2:	a13f      	add	r1, pc, #252	; (adr r1, 8008cc0 <__ieee754_atan2+0x188>)
 8008bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc8:	e7d7      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008bca:	4572      	cmp	r2, lr
 8008bcc:	d10f      	bne.n	8008bee <__ieee754_atan2+0xb6>
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bd4:	d107      	bne.n	8008be6 <__ieee754_atan2+0xae>
 8008bd6:	2c02      	cmp	r4, #2
 8008bd8:	d84c      	bhi.n	8008c74 <__ieee754_atan2+0x13c>
 8008bda:	4b35      	ldr	r3, [pc, #212]	; (8008cb0 <__ieee754_atan2+0x178>)
 8008bdc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008be0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008be4:	e7c9      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008be6:	2c02      	cmp	r4, #2
 8008be8:	d848      	bhi.n	8008c7c <__ieee754_atan2+0x144>
 8008bea:	4b32      	ldr	r3, [pc, #200]	; (8008cb4 <__ieee754_atan2+0x17c>)
 8008bec:	e7f6      	b.n	8008bdc <__ieee754_atan2+0xa4>
 8008bee:	4573      	cmp	r3, lr
 8008bf0:	d0e4      	beq.n	8008bbc <__ieee754_atan2+0x84>
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008bf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bfc:	da1e      	bge.n	8008c3c <__ieee754_atan2+0x104>
 8008bfe:	2f00      	cmp	r7, #0
 8008c00:	da01      	bge.n	8008c06 <__ieee754_atan2+0xce>
 8008c02:	323c      	adds	r2, #60	; 0x3c
 8008c04:	db1e      	blt.n	8008c44 <__ieee754_atan2+0x10c>
 8008c06:	4632      	mov	r2, r6
 8008c08:	463b      	mov	r3, r7
 8008c0a:	f7f7 fdc7 	bl	800079c <__aeabi_ddiv>
 8008c0e:	ec41 0b10 	vmov	d0, r0, r1
 8008c12:	f001 f985 	bl	8009f20 <fabs>
 8008c16:	f000 ffe3 	bl	8009be0 <atan>
 8008c1a:	ec51 0b10 	vmov	r0, r1, d0
 8008c1e:	2c01      	cmp	r4, #1
 8008c20:	d013      	beq.n	8008c4a <__ieee754_atan2+0x112>
 8008c22:	2c02      	cmp	r4, #2
 8008c24:	d015      	beq.n	8008c52 <__ieee754_atan2+0x11a>
 8008c26:	2c00      	cmp	r4, #0
 8008c28:	d0a7      	beq.n	8008b7a <__ieee754_atan2+0x42>
 8008c2a:	a319      	add	r3, pc, #100	; (adr r3, 8008c90 <__ieee754_atan2+0x158>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fad2 	bl	80001d8 <__aeabi_dsub>
 8008c34:	a318      	add	r3, pc, #96	; (adr r3, 8008c98 <__ieee754_atan2+0x160>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	e014      	b.n	8008c66 <__ieee754_atan2+0x12e>
 8008c3c:	a118      	add	r1, pc, #96	; (adr r1, 8008ca0 <__ieee754_atan2+0x168>)
 8008c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c42:	e7ec      	b.n	8008c1e <__ieee754_atan2+0xe6>
 8008c44:	2000      	movs	r0, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	e7e9      	b.n	8008c1e <__ieee754_atan2+0xe6>
 8008c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c4e:	4619      	mov	r1, r3
 8008c50:	e793      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008c52:	a30f      	add	r3, pc, #60	; (adr r3, 8008c90 <__ieee754_atan2+0x158>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fabe 	bl	80001d8 <__aeabi_dsub>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	a10d      	add	r1, pc, #52	; (adr r1, 8008c98 <__ieee754_atan2+0x160>)
 8008c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c66:	f7f7 fab7 	bl	80001d8 <__aeabi_dsub>
 8008c6a:	e786      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008c6c:	a10a      	add	r1, pc, #40	; (adr r1, 8008c98 <__ieee754_atan2+0x160>)
 8008c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c72:	e782      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008c74:	a10c      	add	r1, pc, #48	; (adr r1, 8008ca8 <__ieee754_atan2+0x170>)
 8008c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c7a:	e77e      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	2100      	movs	r1, #0
 8008c80:	e77b      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008c82:	a107      	add	r1, pc, #28	; (adr r1, 8008ca0 <__ieee754_atan2+0x168>)
 8008c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c88:	e777      	b.n	8008b7a <__ieee754_atan2+0x42>
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w
 8008c90:	33145c07 	.word	0x33145c07
 8008c94:	3ca1a626 	.word	0x3ca1a626
 8008c98:	54442d18 	.word	0x54442d18
 8008c9c:	400921fb 	.word	0x400921fb
 8008ca0:	54442d18 	.word	0x54442d18
 8008ca4:	3ff921fb 	.word	0x3ff921fb
 8008ca8:	54442d18 	.word	0x54442d18
 8008cac:	3fe921fb 	.word	0x3fe921fb
 8008cb0:	0800a2b0 	.word	0x0800a2b0
 8008cb4:	0800a2c8 	.word	0x0800a2c8
 8008cb8:	54442d18 	.word	0x54442d18
 8008cbc:	c00921fb 	.word	0xc00921fb
 8008cc0:	54442d18 	.word	0x54442d18
 8008cc4:	bff921fb 	.word	0xbff921fb
 8008cc8:	7ff00000 	.word	0x7ff00000
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <__ieee754_rem_pio2>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	ed2d 8b02 	vpush	{d8}
 8008cd8:	ec55 4b10 	vmov	r4, r5, d0
 8008cdc:	4bca      	ldr	r3, [pc, #808]	; (8009008 <__ieee754_rem_pio2+0x338>)
 8008cde:	b08b      	sub	sp, #44	; 0x2c
 8008ce0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008ce4:	4598      	cmp	r8, r3
 8008ce6:	4682      	mov	sl, r0
 8008ce8:	9502      	str	r5, [sp, #8]
 8008cea:	dc08      	bgt.n	8008cfe <__ieee754_rem_pio2+0x2e>
 8008cec:	2200      	movs	r2, #0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	ed80 0b00 	vstr	d0, [r0]
 8008cf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cf8:	f04f 0b00 	mov.w	fp, #0
 8008cfc:	e028      	b.n	8008d50 <__ieee754_rem_pio2+0x80>
 8008cfe:	4bc3      	ldr	r3, [pc, #780]	; (800900c <__ieee754_rem_pio2+0x33c>)
 8008d00:	4598      	cmp	r8, r3
 8008d02:	dc78      	bgt.n	8008df6 <__ieee754_rem_pio2+0x126>
 8008d04:	9b02      	ldr	r3, [sp, #8]
 8008d06:	4ec2      	ldr	r6, [pc, #776]	; (8009010 <__ieee754_rem_pio2+0x340>)
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	ee10 0a10 	vmov	r0, s0
 8008d0e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008fd0 <__ieee754_rem_pio2+0x300>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	4629      	mov	r1, r5
 8008d16:	dd39      	ble.n	8008d8c <__ieee754_rem_pio2+0xbc>
 8008d18:	f7f7 fa5e 	bl	80001d8 <__aeabi_dsub>
 8008d1c:	45b0      	cmp	r8, r6
 8008d1e:	4604      	mov	r4, r0
 8008d20:	460d      	mov	r5, r1
 8008d22:	d01b      	beq.n	8008d5c <__ieee754_rem_pio2+0x8c>
 8008d24:	a3ac      	add	r3, pc, #688	; (adr r3, 8008fd8 <__ieee754_rem_pio2+0x308>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fa55 	bl	80001d8 <__aeabi_dsub>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	e9ca 2300 	strd	r2, r3, [sl]
 8008d36:	4620      	mov	r0, r4
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7f7 fa4d 	bl	80001d8 <__aeabi_dsub>
 8008d3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008fd8 <__ieee754_rem_pio2+0x308>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fa48 	bl	80001d8 <__aeabi_dsub>
 8008d48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d4c:	f04f 0b01 	mov.w	fp, #1
 8008d50:	4658      	mov	r0, fp
 8008d52:	b00b      	add	sp, #44	; 0x2c
 8008d54:	ecbd 8b02 	vpop	{d8}
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008fe0 <__ieee754_rem_pio2+0x310>)
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	f7f7 fa39 	bl	80001d8 <__aeabi_dsub>
 8008d66:	a3a0      	add	r3, pc, #640	; (adr r3, 8008fe8 <__ieee754_rem_pio2+0x318>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	460d      	mov	r5, r1
 8008d70:	f7f7 fa32 	bl	80001d8 <__aeabi_dsub>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9ca 2300 	strd	r2, r3, [sl]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f7f7 fa2a 	bl	80001d8 <__aeabi_dsub>
 8008d84:	a398      	add	r3, pc, #608	; (adr r3, 8008fe8 <__ieee754_rem_pio2+0x318>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	e7db      	b.n	8008d44 <__ieee754_rem_pio2+0x74>
 8008d8c:	f7f7 fa26 	bl	80001dc <__adddf3>
 8008d90:	45b0      	cmp	r8, r6
 8008d92:	4604      	mov	r4, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	d016      	beq.n	8008dc6 <__ieee754_rem_pio2+0xf6>
 8008d98:	a38f      	add	r3, pc, #572	; (adr r3, 8008fd8 <__ieee754_rem_pio2+0x308>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fa1d 	bl	80001dc <__adddf3>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	e9ca 2300 	strd	r2, r3, [sl]
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fa13 	bl	80001d8 <__aeabi_dsub>
 8008db2:	a389      	add	r3, pc, #548	; (adr r3, 8008fd8 <__ieee754_rem_pio2+0x308>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fa10 	bl	80001dc <__adddf3>
 8008dbc:	f04f 3bff 	mov.w	fp, #4294967295
 8008dc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008dc4:	e7c4      	b.n	8008d50 <__ieee754_rem_pio2+0x80>
 8008dc6:	a386      	add	r3, pc, #536	; (adr r3, 8008fe0 <__ieee754_rem_pio2+0x310>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	f7f7 fa06 	bl	80001dc <__adddf3>
 8008dd0:	a385      	add	r3, pc, #532	; (adr r3, 8008fe8 <__ieee754_rem_pio2+0x318>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	460d      	mov	r5, r1
 8008dda:	f7f7 f9ff 	bl	80001dc <__adddf3>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	e9ca 2300 	strd	r2, r3, [sl]
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 f9f5 	bl	80001d8 <__aeabi_dsub>
 8008dee:	a37e      	add	r3, pc, #504	; (adr r3, 8008fe8 <__ieee754_rem_pio2+0x318>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	e7e0      	b.n	8008db8 <__ieee754_rem_pio2+0xe8>
 8008df6:	4b87      	ldr	r3, [pc, #540]	; (8009014 <__ieee754_rem_pio2+0x344>)
 8008df8:	4598      	cmp	r8, r3
 8008dfa:	f300 80d9 	bgt.w	8008fb0 <__ieee754_rem_pio2+0x2e0>
 8008dfe:	f001 f88f 	bl	8009f20 <fabs>
 8008e02:	ec55 4b10 	vmov	r4, r5, d0
 8008e06:	ee10 0a10 	vmov	r0, s0
 8008e0a:	a379      	add	r3, pc, #484	; (adr r3, 8008ff0 <__ieee754_rem_pio2+0x320>)
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fb99 	bl	8000548 <__aeabi_dmul>
 8008e16:	4b80      	ldr	r3, [pc, #512]	; (8009018 <__ieee754_rem_pio2+0x348>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f7f7 f9df 	bl	80001dc <__adddf3>
 8008e1e:	f7f7 fe43 	bl	8000aa8 <__aeabi_d2iz>
 8008e22:	4683      	mov	fp, r0
 8008e24:	f7f7 fb26 	bl	8000474 <__aeabi_i2d>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	ec43 2b18 	vmov	d8, r2, r3
 8008e30:	a367      	add	r3, pc, #412	; (adr r3, 8008fd0 <__ieee754_rem_pio2+0x300>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fb87 	bl	8000548 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7f7 f9c9 	bl	80001d8 <__aeabi_dsub>
 8008e46:	a364      	add	r3, pc, #400	; (adr r3, 8008fd8 <__ieee754_rem_pio2+0x308>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	460f      	mov	r7, r1
 8008e50:	ec51 0b18 	vmov	r0, r1, d8
 8008e54:	f7f7 fb78 	bl	8000548 <__aeabi_dmul>
 8008e58:	f1bb 0f1f 	cmp.w	fp, #31
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	dc0d      	bgt.n	8008e7e <__ieee754_rem_pio2+0x1ae>
 8008e62:	4b6e      	ldr	r3, [pc, #440]	; (800901c <__ieee754_rem_pio2+0x34c>)
 8008e64:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6c:	4543      	cmp	r3, r8
 8008e6e:	d006      	beq.n	8008e7e <__ieee754_rem_pio2+0x1ae>
 8008e70:	4622      	mov	r2, r4
 8008e72:	462b      	mov	r3, r5
 8008e74:	4630      	mov	r0, r6
 8008e76:	4639      	mov	r1, r7
 8008e78:	f7f7 f9ae 	bl	80001d8 <__aeabi_dsub>
 8008e7c:	e00f      	b.n	8008e9e <__ieee754_rem_pio2+0x1ce>
 8008e7e:	462b      	mov	r3, r5
 8008e80:	4622      	mov	r2, r4
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 f9a7 	bl	80001d8 <__aeabi_dsub>
 8008e8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e94:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008e98:	f1b8 0f10 	cmp.w	r8, #16
 8008e9c:	dc02      	bgt.n	8008ea4 <__ieee754_rem_pio2+0x1d4>
 8008e9e:	e9ca 0100 	strd	r0, r1, [sl]
 8008ea2:	e039      	b.n	8008f18 <__ieee754_rem_pio2+0x248>
 8008ea4:	a34e      	add	r3, pc, #312	; (adr r3, 8008fe0 <__ieee754_rem_pio2+0x310>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	ec51 0b18 	vmov	r0, r1, d8
 8008eae:	f7f7 fb4b 	bl	8000548 <__aeabi_dmul>
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4630      	mov	r0, r6
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	f7f7 f98b 	bl	80001d8 <__aeabi_dsub>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	4689      	mov	r9, r1
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7f7 f983 	bl	80001d8 <__aeabi_dsub>
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	f7f7 f97f 	bl	80001d8 <__aeabi_dsub>
 8008eda:	a343      	add	r3, pc, #268	; (adr r3, 8008fe8 <__ieee754_rem_pio2+0x318>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	ec51 0b18 	vmov	r0, r1, d8
 8008ee8:	f7f7 fb2e 	bl	8000548 <__aeabi_dmul>
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f7f7 f972 	bl	80001d8 <__aeabi_dsub>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4604      	mov	r4, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 f96a 	bl	80001d8 <__aeabi_dsub>
 8008f04:	9a03      	ldr	r2, [sp, #12]
 8008f06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b31      	cmp	r3, #49	; 0x31
 8008f0e:	dc24      	bgt.n	8008f5a <__ieee754_rem_pio2+0x28a>
 8008f10:	e9ca 0100 	strd	r0, r1, [sl]
 8008f14:	4646      	mov	r6, r8
 8008f16:	464f      	mov	r7, r9
 8008f18:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4642      	mov	r2, r8
 8008f20:	464b      	mov	r3, r9
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 f958 	bl	80001d8 <__aeabi_dsub>
 8008f28:	462b      	mov	r3, r5
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	f7f7 f954 	bl	80001d8 <__aeabi_dsub>
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f38:	f6bf af0a 	bge.w	8008d50 <__ieee754_rem_pio2+0x80>
 8008f3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f40:	f8ca 3004 	str.w	r3, [sl, #4]
 8008f44:	f8ca 8000 	str.w	r8, [sl]
 8008f48:	f8ca 0008 	str.w	r0, [sl, #8]
 8008f4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f50:	f8ca 300c 	str.w	r3, [sl, #12]
 8008f54:	f1cb 0b00 	rsb	fp, fp, #0
 8008f58:	e6fa      	b.n	8008d50 <__ieee754_rem_pio2+0x80>
 8008f5a:	a327      	add	r3, pc, #156	; (adr r3, 8008ff8 <__ieee754_rem_pio2+0x328>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	ec51 0b18 	vmov	r0, r1, d8
 8008f64:	f7f7 faf0 	bl	8000548 <__aeabi_dmul>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 f930 	bl	80001d8 <__aeabi_dsub>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	f7f7 f928 	bl	80001d8 <__aeabi_dsub>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	462b      	mov	r3, r5
 8008f8c:	f7f7 f924 	bl	80001d8 <__aeabi_dsub>
 8008f90:	a31b      	add	r3, pc, #108	; (adr r3, 8009000 <__ieee754_rem_pio2+0x330>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
 8008f9a:	ec51 0b18 	vmov	r0, r1, d8
 8008f9e:	f7f7 fad3 	bl	8000548 <__aeabi_dmul>
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	f7f7 f917 	bl	80001d8 <__aeabi_dsub>
 8008faa:	4604      	mov	r4, r0
 8008fac:	460d      	mov	r5, r1
 8008fae:	e75f      	b.n	8008e70 <__ieee754_rem_pio2+0x1a0>
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	; (8009020 <__ieee754_rem_pio2+0x350>)
 8008fb2:	4598      	cmp	r8, r3
 8008fb4:	dd36      	ble.n	8009024 <__ieee754_rem_pio2+0x354>
 8008fb6:	ee10 2a10 	vmov	r2, s0
 8008fba:	462b      	mov	r3, r5
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f90a 	bl	80001d8 <__aeabi_dsub>
 8008fc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008fc8:	e9ca 0100 	strd	r0, r1, [sl]
 8008fcc:	e694      	b.n	8008cf8 <__ieee754_rem_pio2+0x28>
 8008fce:	bf00      	nop
 8008fd0:	54400000 	.word	0x54400000
 8008fd4:	3ff921fb 	.word	0x3ff921fb
 8008fd8:	1a626331 	.word	0x1a626331
 8008fdc:	3dd0b461 	.word	0x3dd0b461
 8008fe0:	1a600000 	.word	0x1a600000
 8008fe4:	3dd0b461 	.word	0x3dd0b461
 8008fe8:	2e037073 	.word	0x2e037073
 8008fec:	3ba3198a 	.word	0x3ba3198a
 8008ff0:	6dc9c883 	.word	0x6dc9c883
 8008ff4:	3fe45f30 	.word	0x3fe45f30
 8008ff8:	2e000000 	.word	0x2e000000
 8008ffc:	3ba3198a 	.word	0x3ba3198a
 8009000:	252049c1 	.word	0x252049c1
 8009004:	397b839a 	.word	0x397b839a
 8009008:	3fe921fb 	.word	0x3fe921fb
 800900c:	4002d97b 	.word	0x4002d97b
 8009010:	3ff921fb 	.word	0x3ff921fb
 8009014:	413921fb 	.word	0x413921fb
 8009018:	3fe00000 	.word	0x3fe00000
 800901c:	0800a2e0 	.word	0x0800a2e0
 8009020:	7fefffff 	.word	0x7fefffff
 8009024:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009028:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800902c:	ee10 0a10 	vmov	r0, s0
 8009030:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009034:	ee10 6a10 	vmov	r6, s0
 8009038:	460f      	mov	r7, r1
 800903a:	f7f7 fd35 	bl	8000aa8 <__aeabi_d2iz>
 800903e:	f7f7 fa19 	bl	8000474 <__aeabi_i2d>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800904e:	f7f7 f8c3 	bl	80001d8 <__aeabi_dsub>
 8009052:	4b22      	ldr	r3, [pc, #136]	; (80090dc <__ieee754_rem_pio2+0x40c>)
 8009054:	2200      	movs	r2, #0
 8009056:	f7f7 fa77 	bl	8000548 <__aeabi_dmul>
 800905a:	460f      	mov	r7, r1
 800905c:	4606      	mov	r6, r0
 800905e:	f7f7 fd23 	bl	8000aa8 <__aeabi_d2iz>
 8009062:	f7f7 fa07 	bl	8000474 <__aeabi_i2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009072:	f7f7 f8b1 	bl	80001d8 <__aeabi_dsub>
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <__ieee754_rem_pio2+0x40c>)
 8009078:	2200      	movs	r2, #0
 800907a:	f7f7 fa65 	bl	8000548 <__aeabi_dmul>
 800907e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009082:	ad04      	add	r5, sp, #16
 8009084:	f04f 0803 	mov.w	r8, #3
 8009088:	46a9      	mov	r9, r5
 800908a:	2600      	movs	r6, #0
 800908c:	2700      	movs	r7, #0
 800908e:	4632      	mov	r2, r6
 8009090:	463b      	mov	r3, r7
 8009092:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009096:	46c3      	mov	fp, r8
 8009098:	3d08      	subs	r5, #8
 800909a:	f108 38ff 	add.w	r8, r8, #4294967295
 800909e:	f7f7 fcbb 	bl	8000a18 <__aeabi_dcmpeq>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d1f3      	bne.n	800908e <__ieee754_rem_pio2+0x3be>
 80090a6:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <__ieee754_rem_pio2+0x410>)
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	2302      	movs	r3, #2
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4622      	mov	r2, r4
 80090b0:	465b      	mov	r3, fp
 80090b2:	4651      	mov	r1, sl
 80090b4:	4648      	mov	r0, r9
 80090b6:	f000 f993 	bl	80093e0 <__kernel_rem_pio2>
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	4683      	mov	fp, r0
 80090c0:	f6bf ae46 	bge.w	8008d50 <__ieee754_rem_pio2+0x80>
 80090c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80090c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090cc:	f8ca 3004 	str.w	r3, [sl, #4]
 80090d0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80090d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090d8:	e73a      	b.n	8008f50 <__ieee754_rem_pio2+0x280>
 80090da:	bf00      	nop
 80090dc:	41700000 	.word	0x41700000
 80090e0:	0800a360 	.word	0x0800a360

080090e4 <__ieee754_sqrt>:
 80090e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e8:	ec55 4b10 	vmov	r4, r5, d0
 80090ec:	4e56      	ldr	r6, [pc, #344]	; (8009248 <__ieee754_sqrt+0x164>)
 80090ee:	43ae      	bics	r6, r5
 80090f0:	ee10 0a10 	vmov	r0, s0
 80090f4:	ee10 3a10 	vmov	r3, s0
 80090f8:	4629      	mov	r1, r5
 80090fa:	462a      	mov	r2, r5
 80090fc:	d110      	bne.n	8009120 <__ieee754_sqrt+0x3c>
 80090fe:	ee10 2a10 	vmov	r2, s0
 8009102:	462b      	mov	r3, r5
 8009104:	f7f7 fa20 	bl	8000548 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f864 	bl	80001dc <__adddf3>
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	ec45 4b10 	vmov	d0, r4, r5
 800911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009120:	2d00      	cmp	r5, #0
 8009122:	dc10      	bgt.n	8009146 <__ieee754_sqrt+0x62>
 8009124:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009128:	4330      	orrs	r0, r6
 800912a:	d0f5      	beq.n	8009118 <__ieee754_sqrt+0x34>
 800912c:	b15d      	cbz	r5, 8009146 <__ieee754_sqrt+0x62>
 800912e:	ee10 2a10 	vmov	r2, s0
 8009132:	462b      	mov	r3, r5
 8009134:	ee10 0a10 	vmov	r0, s0
 8009138:	f7f7 f84e 	bl	80001d8 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	f7f7 fb2c 	bl	800079c <__aeabi_ddiv>
 8009144:	e7e6      	b.n	8009114 <__ieee754_sqrt+0x30>
 8009146:	1509      	asrs	r1, r1, #20
 8009148:	d076      	beq.n	8009238 <__ieee754_sqrt+0x154>
 800914a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800914e:	07ce      	lsls	r6, r1, #31
 8009150:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009154:	bf5e      	ittt	pl
 8009156:	0fda      	lsrpl	r2, r3, #31
 8009158:	005b      	lslpl	r3, r3, #1
 800915a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800915e:	0fda      	lsrs	r2, r3, #31
 8009160:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009164:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009168:	2000      	movs	r0, #0
 800916a:	106d      	asrs	r5, r5, #1
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	f04f 0e16 	mov.w	lr, #22
 8009172:	4684      	mov	ip, r0
 8009174:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009178:	eb0c 0401 	add.w	r4, ip, r1
 800917c:	4294      	cmp	r4, r2
 800917e:	bfde      	ittt	le
 8009180:	1b12      	suble	r2, r2, r4
 8009182:	eb04 0c01 	addle.w	ip, r4, r1
 8009186:	1840      	addle	r0, r0, r1
 8009188:	0052      	lsls	r2, r2, #1
 800918a:	f1be 0e01 	subs.w	lr, lr, #1
 800918e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009192:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009196:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800919a:	d1ed      	bne.n	8009178 <__ieee754_sqrt+0x94>
 800919c:	4671      	mov	r1, lr
 800919e:	2720      	movs	r7, #32
 80091a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80091a4:	4562      	cmp	r2, ip
 80091a6:	eb04 060e 	add.w	r6, r4, lr
 80091aa:	dc02      	bgt.n	80091b2 <__ieee754_sqrt+0xce>
 80091ac:	d113      	bne.n	80091d6 <__ieee754_sqrt+0xf2>
 80091ae:	429e      	cmp	r6, r3
 80091b0:	d811      	bhi.n	80091d6 <__ieee754_sqrt+0xf2>
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	eb06 0e04 	add.w	lr, r6, r4
 80091b8:	da43      	bge.n	8009242 <__ieee754_sqrt+0x15e>
 80091ba:	f1be 0f00 	cmp.w	lr, #0
 80091be:	db40      	blt.n	8009242 <__ieee754_sqrt+0x15e>
 80091c0:	f10c 0801 	add.w	r8, ip, #1
 80091c4:	eba2 020c 	sub.w	r2, r2, ip
 80091c8:	429e      	cmp	r6, r3
 80091ca:	bf88      	it	hi
 80091cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80091d0:	1b9b      	subs	r3, r3, r6
 80091d2:	4421      	add	r1, r4
 80091d4:	46c4      	mov	ip, r8
 80091d6:	0052      	lsls	r2, r2, #1
 80091d8:	3f01      	subs	r7, #1
 80091da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80091de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80091e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091e6:	d1dd      	bne.n	80091a4 <__ieee754_sqrt+0xc0>
 80091e8:	4313      	orrs	r3, r2
 80091ea:	d006      	beq.n	80091fa <__ieee754_sqrt+0x116>
 80091ec:	1c4c      	adds	r4, r1, #1
 80091ee:	bf13      	iteet	ne
 80091f0:	3101      	addne	r1, #1
 80091f2:	3001      	addeq	r0, #1
 80091f4:	4639      	moveq	r1, r7
 80091f6:	f021 0101 	bicne.w	r1, r1, #1
 80091fa:	1043      	asrs	r3, r0, #1
 80091fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009200:	0849      	lsrs	r1, r1, #1
 8009202:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009206:	07c2      	lsls	r2, r0, #31
 8009208:	bf48      	it	mi
 800920a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800920e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009212:	460c      	mov	r4, r1
 8009214:	463d      	mov	r5, r7
 8009216:	e77f      	b.n	8009118 <__ieee754_sqrt+0x34>
 8009218:	0ada      	lsrs	r2, r3, #11
 800921a:	3815      	subs	r0, #21
 800921c:	055b      	lsls	r3, r3, #21
 800921e:	2a00      	cmp	r2, #0
 8009220:	d0fa      	beq.n	8009218 <__ieee754_sqrt+0x134>
 8009222:	02d7      	lsls	r7, r2, #11
 8009224:	d50a      	bpl.n	800923c <__ieee754_sqrt+0x158>
 8009226:	f1c1 0420 	rsb	r4, r1, #32
 800922a:	fa23 f404 	lsr.w	r4, r3, r4
 800922e:	1e4d      	subs	r5, r1, #1
 8009230:	408b      	lsls	r3, r1
 8009232:	4322      	orrs	r2, r4
 8009234:	1b41      	subs	r1, r0, r5
 8009236:	e788      	b.n	800914a <__ieee754_sqrt+0x66>
 8009238:	4608      	mov	r0, r1
 800923a:	e7f0      	b.n	800921e <__ieee754_sqrt+0x13a>
 800923c:	0052      	lsls	r2, r2, #1
 800923e:	3101      	adds	r1, #1
 8009240:	e7ef      	b.n	8009222 <__ieee754_sqrt+0x13e>
 8009242:	46e0      	mov	r8, ip
 8009244:	e7be      	b.n	80091c4 <__ieee754_sqrt+0xe0>
 8009246:	bf00      	nop
 8009248:	7ff00000 	.word	0x7ff00000
 800924c:	00000000 	.word	0x00000000

08009250 <__kernel_cos>:
 8009250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	ec57 6b10 	vmov	r6, r7, d0
 8009258:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800925c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009260:	ed8d 1b00 	vstr	d1, [sp]
 8009264:	da07      	bge.n	8009276 <__kernel_cos+0x26>
 8009266:	ee10 0a10 	vmov	r0, s0
 800926a:	4639      	mov	r1, r7
 800926c:	f7f7 fc1c 	bl	8000aa8 <__aeabi_d2iz>
 8009270:	2800      	cmp	r0, #0
 8009272:	f000 8088 	beq.w	8009386 <__kernel_cos+0x136>
 8009276:	4632      	mov	r2, r6
 8009278:	463b      	mov	r3, r7
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 f963 	bl	8000548 <__aeabi_dmul>
 8009282:	4b51      	ldr	r3, [pc, #324]	; (80093c8 <__kernel_cos+0x178>)
 8009284:	2200      	movs	r2, #0
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	f7f7 f95d 	bl	8000548 <__aeabi_dmul>
 800928e:	a340      	add	r3, pc, #256	; (adr r3, 8009390 <__kernel_cos+0x140>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	4682      	mov	sl, r0
 8009296:	468b      	mov	fp, r1
 8009298:	4620      	mov	r0, r4
 800929a:	4629      	mov	r1, r5
 800929c:	f7f7 f954 	bl	8000548 <__aeabi_dmul>
 80092a0:	a33d      	add	r3, pc, #244	; (adr r3, 8009398 <__kernel_cos+0x148>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f6 ff99 	bl	80001dc <__adddf3>
 80092aa:	4622      	mov	r2, r4
 80092ac:	462b      	mov	r3, r5
 80092ae:	f7f7 f94b 	bl	8000548 <__aeabi_dmul>
 80092b2:	a33b      	add	r3, pc, #236	; (adr r3, 80093a0 <__kernel_cos+0x150>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7f6 ff8e 	bl	80001d8 <__aeabi_dsub>
 80092bc:	4622      	mov	r2, r4
 80092be:	462b      	mov	r3, r5
 80092c0:	f7f7 f942 	bl	8000548 <__aeabi_dmul>
 80092c4:	a338      	add	r3, pc, #224	; (adr r3, 80093a8 <__kernel_cos+0x158>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f6 ff87 	bl	80001dc <__adddf3>
 80092ce:	4622      	mov	r2, r4
 80092d0:	462b      	mov	r3, r5
 80092d2:	f7f7 f939 	bl	8000548 <__aeabi_dmul>
 80092d6:	a336      	add	r3, pc, #216	; (adr r3, 80093b0 <__kernel_cos+0x160>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f6 ff7c 	bl	80001d8 <__aeabi_dsub>
 80092e0:	4622      	mov	r2, r4
 80092e2:	462b      	mov	r3, r5
 80092e4:	f7f7 f930 	bl	8000548 <__aeabi_dmul>
 80092e8:	a333      	add	r3, pc, #204	; (adr r3, 80093b8 <__kernel_cos+0x168>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f6 ff75 	bl	80001dc <__adddf3>
 80092f2:	4622      	mov	r2, r4
 80092f4:	462b      	mov	r3, r5
 80092f6:	f7f7 f927 	bl	8000548 <__aeabi_dmul>
 80092fa:	4622      	mov	r2, r4
 80092fc:	462b      	mov	r3, r5
 80092fe:	f7f7 f923 	bl	8000548 <__aeabi_dmul>
 8009302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009306:	4604      	mov	r4, r0
 8009308:	460d      	mov	r5, r1
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f7 f91b 	bl	8000548 <__aeabi_dmul>
 8009312:	460b      	mov	r3, r1
 8009314:	4602      	mov	r2, r0
 8009316:	4629      	mov	r1, r5
 8009318:	4620      	mov	r0, r4
 800931a:	f7f6 ff5d 	bl	80001d8 <__aeabi_dsub>
 800931e:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <__kernel_cos+0x17c>)
 8009320:	4598      	cmp	r8, r3
 8009322:	4606      	mov	r6, r0
 8009324:	460f      	mov	r7, r1
 8009326:	dc10      	bgt.n	800934a <__kernel_cos+0xfa>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4650      	mov	r0, sl
 800932e:	4659      	mov	r1, fp
 8009330:	f7f6 ff52 	bl	80001d8 <__aeabi_dsub>
 8009334:	460b      	mov	r3, r1
 8009336:	4926      	ldr	r1, [pc, #152]	; (80093d0 <__kernel_cos+0x180>)
 8009338:	4602      	mov	r2, r0
 800933a:	2000      	movs	r0, #0
 800933c:	f7f6 ff4c 	bl	80001d8 <__aeabi_dsub>
 8009340:	ec41 0b10 	vmov	d0, r0, r1
 8009344:	b003      	add	sp, #12
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <__kernel_cos+0x184>)
 800934c:	4920      	ldr	r1, [pc, #128]	; (80093d0 <__kernel_cos+0x180>)
 800934e:	4598      	cmp	r8, r3
 8009350:	bfcc      	ite	gt
 8009352:	4d21      	ldrgt	r5, [pc, #132]	; (80093d8 <__kernel_cos+0x188>)
 8009354:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009358:	2400      	movs	r4, #0
 800935a:	4622      	mov	r2, r4
 800935c:	462b      	mov	r3, r5
 800935e:	2000      	movs	r0, #0
 8009360:	f7f6 ff3a 	bl	80001d8 <__aeabi_dsub>
 8009364:	4622      	mov	r2, r4
 8009366:	4680      	mov	r8, r0
 8009368:	4689      	mov	r9, r1
 800936a:	462b      	mov	r3, r5
 800936c:	4650      	mov	r0, sl
 800936e:	4659      	mov	r1, fp
 8009370:	f7f6 ff32 	bl	80001d8 <__aeabi_dsub>
 8009374:	4632      	mov	r2, r6
 8009376:	463b      	mov	r3, r7
 8009378:	f7f6 ff2e 	bl	80001d8 <__aeabi_dsub>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4640      	mov	r0, r8
 8009382:	4649      	mov	r1, r9
 8009384:	e7da      	b.n	800933c <__kernel_cos+0xec>
 8009386:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80093c0 <__kernel_cos+0x170>
 800938a:	e7db      	b.n	8009344 <__kernel_cos+0xf4>
 800938c:	f3af 8000 	nop.w
 8009390:	be8838d4 	.word	0xbe8838d4
 8009394:	bda8fae9 	.word	0xbda8fae9
 8009398:	bdb4b1c4 	.word	0xbdb4b1c4
 800939c:	3e21ee9e 	.word	0x3e21ee9e
 80093a0:	809c52ad 	.word	0x809c52ad
 80093a4:	3e927e4f 	.word	0x3e927e4f
 80093a8:	19cb1590 	.word	0x19cb1590
 80093ac:	3efa01a0 	.word	0x3efa01a0
 80093b0:	16c15177 	.word	0x16c15177
 80093b4:	3f56c16c 	.word	0x3f56c16c
 80093b8:	5555554c 	.word	0x5555554c
 80093bc:	3fa55555 	.word	0x3fa55555
 80093c0:	00000000 	.word	0x00000000
 80093c4:	3ff00000 	.word	0x3ff00000
 80093c8:	3fe00000 	.word	0x3fe00000
 80093cc:	3fd33332 	.word	0x3fd33332
 80093d0:	3ff00000 	.word	0x3ff00000
 80093d4:	3fe90000 	.word	0x3fe90000
 80093d8:	3fd20000 	.word	0x3fd20000
 80093dc:	00000000 	.word	0x00000000

080093e0 <__kernel_rem_pio2>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	ed2d 8b02 	vpush	{d8}
 80093e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80093ec:	f112 0f14 	cmn.w	r2, #20
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	9101      	str	r1, [sp, #4]
 80093f4:	4bc6      	ldr	r3, [pc, #792]	; (8009710 <__kernel_rem_pio2+0x330>)
 80093f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80093f8:	9009      	str	r0, [sp, #36]	; 0x24
 80093fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	9b08      	ldr	r3, [sp, #32]
 8009402:	f103 33ff 	add.w	r3, r3, #4294967295
 8009406:	bfa8      	it	ge
 8009408:	1ed4      	subge	r4, r2, #3
 800940a:	9306      	str	r3, [sp, #24]
 800940c:	bfb2      	itee	lt
 800940e:	2400      	movlt	r4, #0
 8009410:	2318      	movge	r3, #24
 8009412:	fb94 f4f3 	sdivge	r4, r4, r3
 8009416:	f06f 0317 	mvn.w	r3, #23
 800941a:	fb04 3303 	mla	r3, r4, r3, r3
 800941e:	eb03 0a02 	add.w	sl, r3, r2
 8009422:	9b04      	ldr	r3, [sp, #16]
 8009424:	9a06      	ldr	r2, [sp, #24]
 8009426:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009700 <__kernel_rem_pio2+0x320>
 800942a:	eb03 0802 	add.w	r8, r3, r2
 800942e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009430:	1aa7      	subs	r7, r4, r2
 8009432:	ae20      	add	r6, sp, #128	; 0x80
 8009434:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009438:	2500      	movs	r5, #0
 800943a:	4545      	cmp	r5, r8
 800943c:	dd18      	ble.n	8009470 <__kernel_rem_pio2+0x90>
 800943e:	9b08      	ldr	r3, [sp, #32]
 8009440:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009444:	aa20      	add	r2, sp, #128	; 0x80
 8009446:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009700 <__kernel_rem_pio2+0x320>
 800944a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800944e:	f1c3 0301 	rsb	r3, r3, #1
 8009452:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009456:	9307      	str	r3, [sp, #28]
 8009458:	9b07      	ldr	r3, [sp, #28]
 800945a:	9a04      	ldr	r2, [sp, #16]
 800945c:	4443      	add	r3, r8
 800945e:	429a      	cmp	r2, r3
 8009460:	db2f      	blt.n	80094c2 <__kernel_rem_pio2+0xe2>
 8009462:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009466:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800946a:	462f      	mov	r7, r5
 800946c:	2600      	movs	r6, #0
 800946e:	e01b      	b.n	80094a8 <__kernel_rem_pio2+0xc8>
 8009470:	42ef      	cmn	r7, r5
 8009472:	d407      	bmi.n	8009484 <__kernel_rem_pio2+0xa4>
 8009474:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009478:	f7f6 fffc 	bl	8000474 <__aeabi_i2d>
 800947c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009480:	3501      	adds	r5, #1
 8009482:	e7da      	b.n	800943a <__kernel_rem_pio2+0x5a>
 8009484:	ec51 0b18 	vmov	r0, r1, d8
 8009488:	e7f8      	b.n	800947c <__kernel_rem_pio2+0x9c>
 800948a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800948e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009492:	f7f7 f859 	bl	8000548 <__aeabi_dmul>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800949e:	f7f6 fe9d 	bl	80001dc <__adddf3>
 80094a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a6:	3601      	adds	r6, #1
 80094a8:	9b06      	ldr	r3, [sp, #24]
 80094aa:	429e      	cmp	r6, r3
 80094ac:	f1a7 0708 	sub.w	r7, r7, #8
 80094b0:	ddeb      	ble.n	800948a <__kernel_rem_pio2+0xaa>
 80094b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094b6:	3508      	adds	r5, #8
 80094b8:	ecab 7b02 	vstmia	fp!, {d7}
 80094bc:	f108 0801 	add.w	r8, r8, #1
 80094c0:	e7ca      	b.n	8009458 <__kernel_rem_pio2+0x78>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	aa0c      	add	r2, sp, #48	; 0x30
 80094c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80094cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80094ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80094d2:	9c04      	ldr	r4, [sp, #16]
 80094d4:	930a      	str	r3, [sp, #40]	; 0x28
 80094d6:	ab98      	add	r3, sp, #608	; 0x260
 80094d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80094e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80094e4:	f8cd b008 	str.w	fp, [sp, #8]
 80094e8:	4625      	mov	r5, r4
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	dc78      	bgt.n	80095e0 <__kernel_rem_pio2+0x200>
 80094ee:	ec47 6b10 	vmov	d0, r6, r7
 80094f2:	4650      	mov	r0, sl
 80094f4:	f000 fda8 	bl	800a048 <scalbn>
 80094f8:	ec57 6b10 	vmov	r6, r7, d0
 80094fc:	2200      	movs	r2, #0
 80094fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009502:	ee10 0a10 	vmov	r0, s0
 8009506:	4639      	mov	r1, r7
 8009508:	f7f7 f81e 	bl	8000548 <__aeabi_dmul>
 800950c:	ec41 0b10 	vmov	d0, r0, r1
 8009510:	f000 fd12 	bl	8009f38 <floor>
 8009514:	4b7f      	ldr	r3, [pc, #508]	; (8009714 <__kernel_rem_pio2+0x334>)
 8009516:	ec51 0b10 	vmov	r0, r1, d0
 800951a:	2200      	movs	r2, #0
 800951c:	f7f7 f814 	bl	8000548 <__aeabi_dmul>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f6 fe56 	bl	80001d8 <__aeabi_dsub>
 800952c:	460f      	mov	r7, r1
 800952e:	4606      	mov	r6, r0
 8009530:	f7f7 faba 	bl	8000aa8 <__aeabi_d2iz>
 8009534:	9007      	str	r0, [sp, #28]
 8009536:	f7f6 ff9d 	bl	8000474 <__aeabi_i2d>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	f7f6 fe49 	bl	80001d8 <__aeabi_dsub>
 8009546:	f1ba 0f00 	cmp.w	sl, #0
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	dd70      	ble.n	8009632 <__kernel_rem_pio2+0x252>
 8009550:	1e62      	subs	r2, r4, #1
 8009552:	ab0c      	add	r3, sp, #48	; 0x30
 8009554:	9d07      	ldr	r5, [sp, #28]
 8009556:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800955a:	f1ca 0118 	rsb	r1, sl, #24
 800955e:	fa40 f301 	asr.w	r3, r0, r1
 8009562:	441d      	add	r5, r3
 8009564:	408b      	lsls	r3, r1
 8009566:	1ac0      	subs	r0, r0, r3
 8009568:	ab0c      	add	r3, sp, #48	; 0x30
 800956a:	9507      	str	r5, [sp, #28]
 800956c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009570:	f1ca 0317 	rsb	r3, sl, #23
 8009574:	fa40 f303 	asr.w	r3, r0, r3
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd66      	ble.n	800964e <__kernel_rem_pio2+0x26e>
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	2200      	movs	r2, #0
 8009584:	3301      	adds	r3, #1
 8009586:	9307      	str	r3, [sp, #28]
 8009588:	4615      	mov	r5, r2
 800958a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800958e:	4294      	cmp	r4, r2
 8009590:	f300 8099 	bgt.w	80096c6 <__kernel_rem_pio2+0x2e6>
 8009594:	f1ba 0f00 	cmp.w	sl, #0
 8009598:	dd07      	ble.n	80095aa <__kernel_rem_pio2+0x1ca>
 800959a:	f1ba 0f01 	cmp.w	sl, #1
 800959e:	f000 80a5 	beq.w	80096ec <__kernel_rem_pio2+0x30c>
 80095a2:	f1ba 0f02 	cmp.w	sl, #2
 80095a6:	f000 80c1 	beq.w	800972c <__kernel_rem_pio2+0x34c>
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d14e      	bne.n	800964e <__kernel_rem_pio2+0x26e>
 80095b0:	4632      	mov	r2, r6
 80095b2:	463b      	mov	r3, r7
 80095b4:	4958      	ldr	r1, [pc, #352]	; (8009718 <__kernel_rem_pio2+0x338>)
 80095b6:	2000      	movs	r0, #0
 80095b8:	f7f6 fe0e 	bl	80001d8 <__aeabi_dsub>
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	d044      	beq.n	800964e <__kernel_rem_pio2+0x26e>
 80095c4:	4650      	mov	r0, sl
 80095c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009708 <__kernel_rem_pio2+0x328>
 80095ca:	f000 fd3d 	bl	800a048 <scalbn>
 80095ce:	4630      	mov	r0, r6
 80095d0:	4639      	mov	r1, r7
 80095d2:	ec53 2b10 	vmov	r2, r3, d0
 80095d6:	f7f6 fdff 	bl	80001d8 <__aeabi_dsub>
 80095da:	4606      	mov	r6, r0
 80095dc:	460f      	mov	r7, r1
 80095de:	e036      	b.n	800964e <__kernel_rem_pio2+0x26e>
 80095e0:	4b4e      	ldr	r3, [pc, #312]	; (800971c <__kernel_rem_pio2+0x33c>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f6 ffae 	bl	8000548 <__aeabi_dmul>
 80095ec:	f7f7 fa5c 	bl	8000aa8 <__aeabi_d2iz>
 80095f0:	f7f6 ff40 	bl	8000474 <__aeabi_i2d>
 80095f4:	4b4a      	ldr	r3, [pc, #296]	; (8009720 <__kernel_rem_pio2+0x340>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	4680      	mov	r8, r0
 80095fa:	4689      	mov	r9, r1
 80095fc:	f7f6 ffa4 	bl	8000548 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	f7f6 fde6 	bl	80001d8 <__aeabi_dsub>
 800960c:	f7f7 fa4c 	bl	8000aa8 <__aeabi_d2iz>
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	f843 0b04 	str.w	r0, [r3], #4
 8009616:	3d01      	subs	r5, #1
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	ab70      	add	r3, sp, #448	; 0x1c0
 800961c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	4640      	mov	r0, r8
 8009626:	4649      	mov	r1, r9
 8009628:	f7f6 fdd8 	bl	80001dc <__adddf3>
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1
 8009630:	e75b      	b.n	80094ea <__kernel_rem_pio2+0x10a>
 8009632:	d105      	bne.n	8009640 <__kernel_rem_pio2+0x260>
 8009634:	1e63      	subs	r3, r4, #1
 8009636:	aa0c      	add	r2, sp, #48	; 0x30
 8009638:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800963c:	15c3      	asrs	r3, r0, #23
 800963e:	e79b      	b.n	8009578 <__kernel_rem_pio2+0x198>
 8009640:	4b38      	ldr	r3, [pc, #224]	; (8009724 <__kernel_rem_pio2+0x344>)
 8009642:	2200      	movs	r2, #0
 8009644:	f7f7 fa06 	bl	8000a54 <__aeabi_dcmpge>
 8009648:	2800      	cmp	r0, #0
 800964a:	d139      	bne.n	80096c0 <__kernel_rem_pio2+0x2e0>
 800964c:	9002      	str	r0, [sp, #8]
 800964e:	2200      	movs	r2, #0
 8009650:	2300      	movs	r3, #0
 8009652:	4630      	mov	r0, r6
 8009654:	4639      	mov	r1, r7
 8009656:	f7f7 f9df 	bl	8000a18 <__aeabi_dcmpeq>
 800965a:	2800      	cmp	r0, #0
 800965c:	f000 80b4 	beq.w	80097c8 <__kernel_rem_pio2+0x3e8>
 8009660:	f104 3bff 	add.w	fp, r4, #4294967295
 8009664:	465b      	mov	r3, fp
 8009666:	2200      	movs	r2, #0
 8009668:	9904      	ldr	r1, [sp, #16]
 800966a:	428b      	cmp	r3, r1
 800966c:	da65      	bge.n	800973a <__kernel_rem_pio2+0x35a>
 800966e:	2a00      	cmp	r2, #0
 8009670:	d07b      	beq.n	800976a <__kernel_rem_pio2+0x38a>
 8009672:	ab0c      	add	r3, sp, #48	; 0x30
 8009674:	f1aa 0a18 	sub.w	sl, sl, #24
 8009678:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 80a0 	beq.w	80097c2 <__kernel_rem_pio2+0x3e2>
 8009682:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009708 <__kernel_rem_pio2+0x328>
 8009686:	4650      	mov	r0, sl
 8009688:	f000 fcde 	bl	800a048 <scalbn>
 800968c:	4f23      	ldr	r7, [pc, #140]	; (800971c <__kernel_rem_pio2+0x33c>)
 800968e:	ec55 4b10 	vmov	r4, r5, d0
 8009692:	46d8      	mov	r8, fp
 8009694:	2600      	movs	r6, #0
 8009696:	f1b8 0f00 	cmp.w	r8, #0
 800969a:	f280 80cf 	bge.w	800983c <__kernel_rem_pio2+0x45c>
 800969e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009700 <__kernel_rem_pio2+0x320>
 80096a2:	465f      	mov	r7, fp
 80096a4:	f04f 0800 	mov.w	r8, #0
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	f2c0 80fd 	blt.w	80098a8 <__kernel_rem_pio2+0x4c8>
 80096ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80096b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009728 <__kernel_rem_pio2+0x348>
 80096b4:	ec55 4b18 	vmov	r4, r5, d8
 80096b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80096bc:	2600      	movs	r6, #0
 80096be:	e0e5      	b.n	800988c <__kernel_rem_pio2+0x4ac>
 80096c0:	2302      	movs	r3, #2
 80096c2:	9302      	str	r3, [sp, #8]
 80096c4:	e75c      	b.n	8009580 <__kernel_rem_pio2+0x1a0>
 80096c6:	f8db 3000 	ldr.w	r3, [fp]
 80096ca:	b955      	cbnz	r5, 80096e2 <__kernel_rem_pio2+0x302>
 80096cc:	b123      	cbz	r3, 80096d8 <__kernel_rem_pio2+0x2f8>
 80096ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80096d2:	f8cb 3000 	str.w	r3, [fp]
 80096d6:	2301      	movs	r3, #1
 80096d8:	3201      	adds	r2, #1
 80096da:	f10b 0b04 	add.w	fp, fp, #4
 80096de:	461d      	mov	r5, r3
 80096e0:	e755      	b.n	800958e <__kernel_rem_pio2+0x1ae>
 80096e2:	1acb      	subs	r3, r1, r3
 80096e4:	f8cb 3000 	str.w	r3, [fp]
 80096e8:	462b      	mov	r3, r5
 80096ea:	e7f5      	b.n	80096d8 <__kernel_rem_pio2+0x2f8>
 80096ec:	1e62      	subs	r2, r4, #1
 80096ee:	ab0c      	add	r3, sp, #48	; 0x30
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80096f8:	a90c      	add	r1, sp, #48	; 0x30
 80096fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80096fe:	e754      	b.n	80095aa <__kernel_rem_pio2+0x1ca>
	...
 800970c:	3ff00000 	.word	0x3ff00000
 8009710:	0800a4a8 	.word	0x0800a4a8
 8009714:	40200000 	.word	0x40200000
 8009718:	3ff00000 	.word	0x3ff00000
 800971c:	3e700000 	.word	0x3e700000
 8009720:	41700000 	.word	0x41700000
 8009724:	3fe00000 	.word	0x3fe00000
 8009728:	0800a468 	.word	0x0800a468
 800972c:	1e62      	subs	r2, r4, #1
 800972e:	ab0c      	add	r3, sp, #48	; 0x30
 8009730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009734:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009738:	e7de      	b.n	80096f8 <__kernel_rem_pio2+0x318>
 800973a:	a90c      	add	r1, sp, #48	; 0x30
 800973c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009740:	3b01      	subs	r3, #1
 8009742:	430a      	orrs	r2, r1
 8009744:	e790      	b.n	8009668 <__kernel_rem_pio2+0x288>
 8009746:	3301      	adds	r3, #1
 8009748:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800974c:	2900      	cmp	r1, #0
 800974e:	d0fa      	beq.n	8009746 <__kernel_rem_pio2+0x366>
 8009750:	9a08      	ldr	r2, [sp, #32]
 8009752:	18e3      	adds	r3, r4, r3
 8009754:	18a6      	adds	r6, r4, r2
 8009756:	aa20      	add	r2, sp, #128	; 0x80
 8009758:	1c65      	adds	r5, r4, #1
 800975a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	9b02      	ldr	r3, [sp, #8]
 8009762:	42ab      	cmp	r3, r5
 8009764:	da04      	bge.n	8009770 <__kernel_rem_pio2+0x390>
 8009766:	461c      	mov	r4, r3
 8009768:	e6b5      	b.n	80094d6 <__kernel_rem_pio2+0xf6>
 800976a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800976c:	2301      	movs	r3, #1
 800976e:	e7eb      	b.n	8009748 <__kernel_rem_pio2+0x368>
 8009770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009776:	f7f6 fe7d 	bl	8000474 <__aeabi_i2d>
 800977a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800977e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009780:	46b3      	mov	fp, r6
 8009782:	461c      	mov	r4, r3
 8009784:	2700      	movs	r7, #0
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	f04f 0900 	mov.w	r9, #0
 800978e:	9b06      	ldr	r3, [sp, #24]
 8009790:	429f      	cmp	r7, r3
 8009792:	dd06      	ble.n	80097a2 <__kernel_rem_pio2+0x3c2>
 8009794:	ab70      	add	r3, sp, #448	; 0x1c0
 8009796:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800979a:	e9c3 8900 	strd	r8, r9, [r3]
 800979e:	3501      	adds	r5, #1
 80097a0:	e7de      	b.n	8009760 <__kernel_rem_pio2+0x380>
 80097a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80097a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80097aa:	f7f6 fecd 	bl	8000548 <__aeabi_dmul>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4640      	mov	r0, r8
 80097b4:	4649      	mov	r1, r9
 80097b6:	f7f6 fd11 	bl	80001dc <__adddf3>
 80097ba:	3701      	adds	r7, #1
 80097bc:	4680      	mov	r8, r0
 80097be:	4689      	mov	r9, r1
 80097c0:	e7e5      	b.n	800978e <__kernel_rem_pio2+0x3ae>
 80097c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097c6:	e754      	b.n	8009672 <__kernel_rem_pio2+0x292>
 80097c8:	ec47 6b10 	vmov	d0, r6, r7
 80097cc:	f1ca 0000 	rsb	r0, sl, #0
 80097d0:	f000 fc3a 	bl	800a048 <scalbn>
 80097d4:	ec57 6b10 	vmov	r6, r7, d0
 80097d8:	4b9f      	ldr	r3, [pc, #636]	; (8009a58 <__kernel_rem_pio2+0x678>)
 80097da:	ee10 0a10 	vmov	r0, s0
 80097de:	2200      	movs	r2, #0
 80097e0:	4639      	mov	r1, r7
 80097e2:	f7f7 f937 	bl	8000a54 <__aeabi_dcmpge>
 80097e6:	b300      	cbz	r0, 800982a <__kernel_rem_pio2+0x44a>
 80097e8:	4b9c      	ldr	r3, [pc, #624]	; (8009a5c <__kernel_rem_pio2+0x67c>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f6 feaa 	bl	8000548 <__aeabi_dmul>
 80097f4:	f7f7 f958 	bl	8000aa8 <__aeabi_d2iz>
 80097f8:	4605      	mov	r5, r0
 80097fa:	f7f6 fe3b 	bl	8000474 <__aeabi_i2d>
 80097fe:	4b96      	ldr	r3, [pc, #600]	; (8009a58 <__kernel_rem_pio2+0x678>)
 8009800:	2200      	movs	r2, #0
 8009802:	f7f6 fea1 	bl	8000548 <__aeabi_dmul>
 8009806:	460b      	mov	r3, r1
 8009808:	4602      	mov	r2, r0
 800980a:	4639      	mov	r1, r7
 800980c:	4630      	mov	r0, r6
 800980e:	f7f6 fce3 	bl	80001d8 <__aeabi_dsub>
 8009812:	f7f7 f949 	bl	8000aa8 <__aeabi_d2iz>
 8009816:	f104 0b01 	add.w	fp, r4, #1
 800981a:	ab0c      	add	r3, sp, #48	; 0x30
 800981c:	f10a 0a18 	add.w	sl, sl, #24
 8009820:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009824:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009828:	e72b      	b.n	8009682 <__kernel_rem_pio2+0x2a2>
 800982a:	4630      	mov	r0, r6
 800982c:	4639      	mov	r1, r7
 800982e:	f7f7 f93b 	bl	8000aa8 <__aeabi_d2iz>
 8009832:	ab0c      	add	r3, sp, #48	; 0x30
 8009834:	46a3      	mov	fp, r4
 8009836:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800983a:	e722      	b.n	8009682 <__kernel_rem_pio2+0x2a2>
 800983c:	ab70      	add	r3, sp, #448	; 0x1c0
 800983e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009842:	ab0c      	add	r3, sp, #48	; 0x30
 8009844:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009848:	f7f6 fe14 	bl	8000474 <__aeabi_i2d>
 800984c:	4622      	mov	r2, r4
 800984e:	462b      	mov	r3, r5
 8009850:	f7f6 fe7a 	bl	8000548 <__aeabi_dmul>
 8009854:	4632      	mov	r2, r6
 8009856:	e9c9 0100 	strd	r0, r1, [r9]
 800985a:	463b      	mov	r3, r7
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f6 fe72 	bl	8000548 <__aeabi_dmul>
 8009864:	f108 38ff 	add.w	r8, r8, #4294967295
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	e713      	b.n	8009696 <__kernel_rem_pio2+0x2b6>
 800986e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009872:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009876:	f7f6 fe67 	bl	8000548 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f6 fcab 	bl	80001dc <__adddf3>
 8009886:	3601      	adds	r6, #1
 8009888:	4604      	mov	r4, r0
 800988a:	460d      	mov	r5, r1
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	429e      	cmp	r6, r3
 8009890:	dc01      	bgt.n	8009896 <__kernel_rem_pio2+0x4b6>
 8009892:	45b0      	cmp	r8, r6
 8009894:	daeb      	bge.n	800986e <__kernel_rem_pio2+0x48e>
 8009896:	ab48      	add	r3, sp, #288	; 0x120
 8009898:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800989c:	e9c3 4500 	strd	r4, r5, [r3]
 80098a0:	3f01      	subs	r7, #1
 80098a2:	f108 0801 	add.w	r8, r8, #1
 80098a6:	e6ff      	b.n	80096a8 <__kernel_rem_pio2+0x2c8>
 80098a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	dc0b      	bgt.n	80098c6 <__kernel_rem_pio2+0x4e6>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dc6e      	bgt.n	8009990 <__kernel_rem_pio2+0x5b0>
 80098b2:	d045      	beq.n	8009940 <__kernel_rem_pio2+0x560>
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	f003 0007 	and.w	r0, r3, #7
 80098ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80098be:	ecbd 8b02 	vpop	{d8}
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d1f3      	bne.n	80098b4 <__kernel_rem_pio2+0x4d4>
 80098cc:	ab48      	add	r3, sp, #288	; 0x120
 80098ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80098d2:	46d0      	mov	r8, sl
 80098d4:	46d9      	mov	r9, fp
 80098d6:	f1b9 0f00 	cmp.w	r9, #0
 80098da:	f1a8 0808 	sub.w	r8, r8, #8
 80098de:	dc64      	bgt.n	80099aa <__kernel_rem_pio2+0x5ca>
 80098e0:	465c      	mov	r4, fp
 80098e2:	2c01      	cmp	r4, #1
 80098e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80098e8:	dc7e      	bgt.n	80099e8 <__kernel_rem_pio2+0x608>
 80098ea:	2000      	movs	r0, #0
 80098ec:	2100      	movs	r1, #0
 80098ee:	f1bb 0f01 	cmp.w	fp, #1
 80098f2:	f300 8097 	bgt.w	8009a24 <__kernel_rem_pio2+0x644>
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80098fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009900:	2b00      	cmp	r3, #0
 8009902:	f040 8099 	bne.w	8009a38 <__kernel_rem_pio2+0x658>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	e9c3 5600 	strd	r5, r6, [r3]
 800990c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009910:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009914:	e7ce      	b.n	80098b4 <__kernel_rem_pio2+0x4d4>
 8009916:	ab48      	add	r3, sp, #288	; 0x120
 8009918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fc5c 	bl	80001dc <__adddf3>
 8009924:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009928:	f1bb 0f00 	cmp.w	fp, #0
 800992c:	daf3      	bge.n	8009916 <__kernel_rem_pio2+0x536>
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	b113      	cbz	r3, 8009938 <__kernel_rem_pio2+0x558>
 8009932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009936:	4619      	mov	r1, r3
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	e9c3 0100 	strd	r0, r1, [r3]
 800993e:	e7b9      	b.n	80098b4 <__kernel_rem_pio2+0x4d4>
 8009940:	2000      	movs	r0, #0
 8009942:	2100      	movs	r1, #0
 8009944:	e7f0      	b.n	8009928 <__kernel_rem_pio2+0x548>
 8009946:	ab48      	add	r3, sp, #288	; 0x120
 8009948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fc44 	bl	80001dc <__adddf3>
 8009954:	3c01      	subs	r4, #1
 8009956:	2c00      	cmp	r4, #0
 8009958:	daf5      	bge.n	8009946 <__kernel_rem_pio2+0x566>
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	b1e3      	cbz	r3, 8009998 <__kernel_rem_pio2+0x5b8>
 800995e:	4602      	mov	r2, r0
 8009960:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009964:	9c01      	ldr	r4, [sp, #4]
 8009966:	e9c4 2300 	strd	r2, r3, [r4]
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009972:	f7f6 fc31 	bl	80001d8 <__aeabi_dsub>
 8009976:	ad4a      	add	r5, sp, #296	; 0x128
 8009978:	2401      	movs	r4, #1
 800997a:	45a3      	cmp	fp, r4
 800997c:	da0f      	bge.n	800999e <__kernel_rem_pio2+0x5be>
 800997e:	9b02      	ldr	r3, [sp, #8]
 8009980:	b113      	cbz	r3, 8009988 <__kernel_rem_pio2+0x5a8>
 8009982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009986:	4619      	mov	r1, r3
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800998e:	e791      	b.n	80098b4 <__kernel_rem_pio2+0x4d4>
 8009990:	465c      	mov	r4, fp
 8009992:	2000      	movs	r0, #0
 8009994:	2100      	movs	r1, #0
 8009996:	e7de      	b.n	8009956 <__kernel_rem_pio2+0x576>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	e7e2      	b.n	8009964 <__kernel_rem_pio2+0x584>
 800999e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80099a2:	f7f6 fc1b 	bl	80001dc <__adddf3>
 80099a6:	3401      	adds	r4, #1
 80099a8:	e7e7      	b.n	800997a <__kernel_rem_pio2+0x59a>
 80099aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80099ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80099b2:	4620      	mov	r0, r4
 80099b4:	4632      	mov	r2, r6
 80099b6:	463b      	mov	r3, r7
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f6 fc0f 	bl	80001dc <__adddf3>
 80099be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f6 fc05 	bl	80001d8 <__aeabi_dsub>
 80099ce:	4632      	mov	r2, r6
 80099d0:	463b      	mov	r3, r7
 80099d2:	f7f6 fc03 	bl	80001dc <__adddf3>
 80099d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80099da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80099de:	ed88 7b00 	vstr	d7, [r8]
 80099e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80099e6:	e776      	b.n	80098d6 <__kernel_rem_pio2+0x4f6>
 80099e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80099ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80099f0:	4640      	mov	r0, r8
 80099f2:	4632      	mov	r2, r6
 80099f4:	463b      	mov	r3, r7
 80099f6:	4649      	mov	r1, r9
 80099f8:	f7f6 fbf0 	bl	80001dc <__adddf3>
 80099fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4640      	mov	r0, r8
 8009a06:	4649      	mov	r1, r9
 8009a08:	f7f6 fbe6 	bl	80001d8 <__aeabi_dsub>
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	463b      	mov	r3, r7
 8009a10:	f7f6 fbe4 	bl	80001dc <__adddf3>
 8009a14:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a1c:	ed8a 7b00 	vstr	d7, [sl]
 8009a20:	3c01      	subs	r4, #1
 8009a22:	e75e      	b.n	80098e2 <__kernel_rem_pio2+0x502>
 8009a24:	ab48      	add	r3, sp, #288	; 0x120
 8009a26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fbd5 	bl	80001dc <__adddf3>
 8009a32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a36:	e75a      	b.n	80098ee <__kernel_rem_pio2+0x50e>
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	9a01      	ldr	r2, [sp, #4]
 8009a3c:	601d      	str	r5, [r3, #0]
 8009a3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009a42:	605c      	str	r4, [r3, #4]
 8009a44:	609f      	str	r7, [r3, #8]
 8009a46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009a4a:	60d3      	str	r3, [r2, #12]
 8009a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a50:	6110      	str	r0, [r2, #16]
 8009a52:	6153      	str	r3, [r2, #20]
 8009a54:	e72e      	b.n	80098b4 <__kernel_rem_pio2+0x4d4>
 8009a56:	bf00      	nop
 8009a58:	41700000 	.word	0x41700000
 8009a5c:	3e700000 	.word	0x3e700000

08009a60 <__kernel_sin>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b04 	vpush	{d8-d9}
 8009a68:	eeb0 8a41 	vmov.f32	s16, s2
 8009a6c:	eef0 8a61 	vmov.f32	s17, s3
 8009a70:	ec55 4b10 	vmov	r4, r5, d0
 8009a74:	b083      	sub	sp, #12
 8009a76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009a7e:	9001      	str	r0, [sp, #4]
 8009a80:	da06      	bge.n	8009a90 <__kernel_sin+0x30>
 8009a82:	ee10 0a10 	vmov	r0, s0
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f7 f80e 	bl	8000aa8 <__aeabi_d2iz>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d051      	beq.n	8009b34 <__kernel_sin+0xd4>
 8009a90:	4622      	mov	r2, r4
 8009a92:	462b      	mov	r3, r5
 8009a94:	4620      	mov	r0, r4
 8009a96:	4629      	mov	r1, r5
 8009a98:	f7f6 fd56 	bl	8000548 <__aeabi_dmul>
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	468b      	mov	fp, r1
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fd4e 	bl	8000548 <__aeabi_dmul>
 8009aac:	a341      	add	r3, pc, #260	; (adr r3, 8009bb4 <__kernel_sin+0x154>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	4689      	mov	r9, r1
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	4659      	mov	r1, fp
 8009aba:	f7f6 fd45 	bl	8000548 <__aeabi_dmul>
 8009abe:	a33f      	add	r3, pc, #252	; (adr r3, 8009bbc <__kernel_sin+0x15c>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fb88 	bl	80001d8 <__aeabi_dsub>
 8009ac8:	4652      	mov	r2, sl
 8009aca:	465b      	mov	r3, fp
 8009acc:	f7f6 fd3c 	bl	8000548 <__aeabi_dmul>
 8009ad0:	a33c      	add	r3, pc, #240	; (adr r3, 8009bc4 <__kernel_sin+0x164>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fb81 	bl	80001dc <__adddf3>
 8009ada:	4652      	mov	r2, sl
 8009adc:	465b      	mov	r3, fp
 8009ade:	f7f6 fd33 	bl	8000548 <__aeabi_dmul>
 8009ae2:	a33a      	add	r3, pc, #232	; (adr r3, 8009bcc <__kernel_sin+0x16c>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fb76 	bl	80001d8 <__aeabi_dsub>
 8009aec:	4652      	mov	r2, sl
 8009aee:	465b      	mov	r3, fp
 8009af0:	f7f6 fd2a 	bl	8000548 <__aeabi_dmul>
 8009af4:	a337      	add	r3, pc, #220	; (adr r3, 8009bd4 <__kernel_sin+0x174>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fb6f 	bl	80001dc <__adddf3>
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	4606      	mov	r6, r0
 8009b02:	460f      	mov	r7, r1
 8009b04:	b9eb      	cbnz	r3, 8009b42 <__kernel_sin+0xe2>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	f7f6 fd1b 	bl	8000548 <__aeabi_dmul>
 8009b12:	a325      	add	r3, pc, #148	; (adr r3, 8009ba8 <__kernel_sin+0x148>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fb5e 	bl	80001d8 <__aeabi_dsub>
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	f7f6 fd12 	bl	8000548 <__aeabi_dmul>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	f7f6 fb56 	bl	80001dc <__adddf3>
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	ec45 4b10 	vmov	d0, r4, r5
 8009b38:	b003      	add	sp, #12
 8009b3a:	ecbd 8b04 	vpop	{d8-d9}
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	4b1b      	ldr	r3, [pc, #108]	; (8009bb0 <__kernel_sin+0x150>)
 8009b44:	ec51 0b18 	vmov	r0, r1, d8
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f7f6 fcfd 	bl	8000548 <__aeabi_dmul>
 8009b4e:	4632      	mov	r2, r6
 8009b50:	ec41 0b19 	vmov	d9, r0, r1
 8009b54:	463b      	mov	r3, r7
 8009b56:	4640      	mov	r0, r8
 8009b58:	4649      	mov	r1, r9
 8009b5a:	f7f6 fcf5 	bl	8000548 <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	ec51 0b19 	vmov	r0, r1, d9
 8009b66:	f7f6 fb37 	bl	80001d8 <__aeabi_dsub>
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	f7f6 fceb 	bl	8000548 <__aeabi_dmul>
 8009b72:	ec53 2b18 	vmov	r2, r3, d8
 8009b76:	f7f6 fb2f 	bl	80001d8 <__aeabi_dsub>
 8009b7a:	a30b      	add	r3, pc, #44	; (adr r3, 8009ba8 <__kernel_sin+0x148>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	4606      	mov	r6, r0
 8009b82:	460f      	mov	r7, r1
 8009b84:	4640      	mov	r0, r8
 8009b86:	4649      	mov	r1, r9
 8009b88:	f7f6 fcde 	bl	8000548 <__aeabi_dmul>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f6 fb22 	bl	80001dc <__adddf3>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 fb1a 	bl	80001d8 <__aeabi_dsub>
 8009ba4:	e7c4      	b.n	8009b30 <__kernel_sin+0xd0>
 8009ba6:	bf00      	nop
 8009ba8:	55555549 	.word	0x55555549
 8009bac:	3fc55555 	.word	0x3fc55555
 8009bb0:	3fe00000 	.word	0x3fe00000
 8009bb4:	5acfd57c 	.word	0x5acfd57c
 8009bb8:	3de5d93a 	.word	0x3de5d93a
 8009bbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009bc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8009bc4:	57b1fe7d 	.word	0x57b1fe7d
 8009bc8:	3ec71de3 	.word	0x3ec71de3
 8009bcc:	19c161d5 	.word	0x19c161d5
 8009bd0:	3f2a01a0 	.word	0x3f2a01a0
 8009bd4:	1110f8a6 	.word	0x1110f8a6
 8009bd8:	3f811111 	.word	0x3f811111
 8009bdc:	00000000 	.word	0x00000000

08009be0 <atan>:
 8009be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	ec55 4b10 	vmov	r4, r5, d0
 8009be8:	4bc3      	ldr	r3, [pc, #780]	; (8009ef8 <atan+0x318>)
 8009bea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	46ab      	mov	fp, r5
 8009bf2:	dd18      	ble.n	8009c26 <atan+0x46>
 8009bf4:	4bc1      	ldr	r3, [pc, #772]	; (8009efc <atan+0x31c>)
 8009bf6:	429e      	cmp	r6, r3
 8009bf8:	dc01      	bgt.n	8009bfe <atan+0x1e>
 8009bfa:	d109      	bne.n	8009c10 <atan+0x30>
 8009bfc:	b144      	cbz	r4, 8009c10 <atan+0x30>
 8009bfe:	4622      	mov	r2, r4
 8009c00:	462b      	mov	r3, r5
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7f6 fae9 	bl	80001dc <__adddf3>
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	e006      	b.n	8009c1e <atan+0x3e>
 8009c10:	f1bb 0f00 	cmp.w	fp, #0
 8009c14:	f300 8131 	bgt.w	8009e7a <atan+0x29a>
 8009c18:	a59b      	add	r5, pc, #620	; (adr r5, 8009e88 <atan+0x2a8>)
 8009c1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c1e:	ec45 4b10 	vmov	d0, r4, r5
 8009c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	4bb6      	ldr	r3, [pc, #728]	; (8009f00 <atan+0x320>)
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	dc14      	bgt.n	8009c56 <atan+0x76>
 8009c2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009c30:	429e      	cmp	r6, r3
 8009c32:	dc0d      	bgt.n	8009c50 <atan+0x70>
 8009c34:	a396      	add	r3, pc, #600	; (adr r3, 8009e90 <atan+0x2b0>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	ee10 0a10 	vmov	r0, s0
 8009c3e:	4629      	mov	r1, r5
 8009c40:	f7f6 facc 	bl	80001dc <__adddf3>
 8009c44:	4baf      	ldr	r3, [pc, #700]	; (8009f04 <atan+0x324>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	f7f6 ff0e 	bl	8000a68 <__aeabi_dcmpgt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d1e6      	bne.n	8009c1e <atan+0x3e>
 8009c50:	f04f 3aff 	mov.w	sl, #4294967295
 8009c54:	e02b      	b.n	8009cae <atan+0xce>
 8009c56:	f000 f963 	bl	8009f20 <fabs>
 8009c5a:	4bab      	ldr	r3, [pc, #684]	; (8009f08 <atan+0x328>)
 8009c5c:	429e      	cmp	r6, r3
 8009c5e:	ec55 4b10 	vmov	r4, r5, d0
 8009c62:	f300 80bf 	bgt.w	8009de4 <atan+0x204>
 8009c66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009c6a:	429e      	cmp	r6, r3
 8009c6c:	f300 80a0 	bgt.w	8009db0 <atan+0x1d0>
 8009c70:	ee10 2a10 	vmov	r2, s0
 8009c74:	ee10 0a10 	vmov	r0, s0
 8009c78:	462b      	mov	r3, r5
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	f7f6 faae 	bl	80001dc <__adddf3>
 8009c80:	4ba0      	ldr	r3, [pc, #640]	; (8009f04 <atan+0x324>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	f7f6 faa8 	bl	80001d8 <__aeabi_dsub>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	460f      	mov	r7, r1
 8009c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	f7f6 faa1 	bl	80001dc <__adddf3>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 fd7b 	bl	800079c <__aeabi_ddiv>
 8009ca6:	f04f 0a00 	mov.w	sl, #0
 8009caa:	4604      	mov	r4, r0
 8009cac:	460d      	mov	r5, r1
 8009cae:	4622      	mov	r2, r4
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	f7f6 fc47 	bl	8000548 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4680      	mov	r8, r0
 8009cc0:	4689      	mov	r9, r1
 8009cc2:	f7f6 fc41 	bl	8000548 <__aeabi_dmul>
 8009cc6:	a374      	add	r3, pc, #464	; (adr r3, 8009e98 <atan+0x2b8>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	4606      	mov	r6, r0
 8009cce:	460f      	mov	r7, r1
 8009cd0:	f7f6 fc3a 	bl	8000548 <__aeabi_dmul>
 8009cd4:	a372      	add	r3, pc, #456	; (adr r3, 8009ea0 <atan+0x2c0>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 fa7f 	bl	80001dc <__adddf3>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fc31 	bl	8000548 <__aeabi_dmul>
 8009ce6:	a370      	add	r3, pc, #448	; (adr r3, 8009ea8 <atan+0x2c8>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fa76 	bl	80001dc <__adddf3>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 fc28 	bl	8000548 <__aeabi_dmul>
 8009cf8:	a36d      	add	r3, pc, #436	; (adr r3, 8009eb0 <atan+0x2d0>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fa6d 	bl	80001dc <__adddf3>
 8009d02:	4632      	mov	r2, r6
 8009d04:	463b      	mov	r3, r7
 8009d06:	f7f6 fc1f 	bl	8000548 <__aeabi_dmul>
 8009d0a:	a36b      	add	r3, pc, #428	; (adr r3, 8009eb8 <atan+0x2d8>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fa64 	bl	80001dc <__adddf3>
 8009d14:	4632      	mov	r2, r6
 8009d16:	463b      	mov	r3, r7
 8009d18:	f7f6 fc16 	bl	8000548 <__aeabi_dmul>
 8009d1c:	a368      	add	r3, pc, #416	; (adr r3, 8009ec0 <atan+0x2e0>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fa5b 	bl	80001dc <__adddf3>
 8009d26:	4642      	mov	r2, r8
 8009d28:	464b      	mov	r3, r9
 8009d2a:	f7f6 fc0d 	bl	8000548 <__aeabi_dmul>
 8009d2e:	a366      	add	r3, pc, #408	; (adr r3, 8009ec8 <atan+0x2e8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	4680      	mov	r8, r0
 8009d36:	4689      	mov	r9, r1
 8009d38:	4630      	mov	r0, r6
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	f7f6 fc04 	bl	8000548 <__aeabi_dmul>
 8009d40:	a363      	add	r3, pc, #396	; (adr r3, 8009ed0 <atan+0x2f0>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fa47 	bl	80001d8 <__aeabi_dsub>
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	f7f6 fbfb 	bl	8000548 <__aeabi_dmul>
 8009d52:	a361      	add	r3, pc, #388	; (adr r3, 8009ed8 <atan+0x2f8>)
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f7f6 fa3e 	bl	80001d8 <__aeabi_dsub>
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	463b      	mov	r3, r7
 8009d60:	f7f6 fbf2 	bl	8000548 <__aeabi_dmul>
 8009d64:	a35e      	add	r3, pc, #376	; (adr r3, 8009ee0 <atan+0x300>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f7f6 fa35 	bl	80001d8 <__aeabi_dsub>
 8009d6e:	4632      	mov	r2, r6
 8009d70:	463b      	mov	r3, r7
 8009d72:	f7f6 fbe9 	bl	8000548 <__aeabi_dmul>
 8009d76:	a35c      	add	r3, pc, #368	; (adr r3, 8009ee8 <atan+0x308>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fa2c 	bl	80001d8 <__aeabi_dsub>
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	f7f6 fbe0 	bl	8000548 <__aeabi_dmul>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	f7f6 fa24 	bl	80001dc <__adddf3>
 8009d94:	4622      	mov	r2, r4
 8009d96:	462b      	mov	r3, r5
 8009d98:	f7f6 fbd6 	bl	8000548 <__aeabi_dmul>
 8009d9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	d14b      	bne.n	8009e3e <atan+0x25e>
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f7f6 fa15 	bl	80001d8 <__aeabi_dsub>
 8009dae:	e72c      	b.n	8009c0a <atan+0x2a>
 8009db0:	ee10 0a10 	vmov	r0, s0
 8009db4:	4b53      	ldr	r3, [pc, #332]	; (8009f04 <atan+0x324>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7f6 fa0d 	bl	80001d8 <__aeabi_dsub>
 8009dbe:	4b51      	ldr	r3, [pc, #324]	; (8009f04 <atan+0x324>)
 8009dc0:	4606      	mov	r6, r0
 8009dc2:	460f      	mov	r7, r1
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 fa07 	bl	80001dc <__adddf3>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	f7f6 fce1 	bl	800079c <__aeabi_ddiv>
 8009dda:	f04f 0a01 	mov.w	sl, #1
 8009dde:	4604      	mov	r4, r0
 8009de0:	460d      	mov	r5, r1
 8009de2:	e764      	b.n	8009cae <atan+0xce>
 8009de4:	4b49      	ldr	r3, [pc, #292]	; (8009f0c <atan+0x32c>)
 8009de6:	429e      	cmp	r6, r3
 8009de8:	da1d      	bge.n	8009e26 <atan+0x246>
 8009dea:	ee10 0a10 	vmov	r0, s0
 8009dee:	4b48      	ldr	r3, [pc, #288]	; (8009f10 <atan+0x330>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 f9f0 	bl	80001d8 <__aeabi_dsub>
 8009df8:	4b45      	ldr	r3, [pc, #276]	; (8009f10 <atan+0x330>)
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	2200      	movs	r2, #0
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 fba0 	bl	8000548 <__aeabi_dmul>
 8009e08:	4b3e      	ldr	r3, [pc, #248]	; (8009f04 <atan+0x324>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f7f6 f9e6 	bl	80001dc <__adddf3>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4630      	mov	r0, r6
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 fcc0 	bl	800079c <__aeabi_ddiv>
 8009e1c:	f04f 0a02 	mov.w	sl, #2
 8009e20:	4604      	mov	r4, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	e743      	b.n	8009cae <atan+0xce>
 8009e26:	462b      	mov	r3, r5
 8009e28:	ee10 2a10 	vmov	r2, s0
 8009e2c:	4939      	ldr	r1, [pc, #228]	; (8009f14 <atan+0x334>)
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f7f6 fcb4 	bl	800079c <__aeabi_ddiv>
 8009e34:	f04f 0a03 	mov.w	sl, #3
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	e737      	b.n	8009cae <atan+0xce>
 8009e3e:	4b36      	ldr	r3, [pc, #216]	; (8009f18 <atan+0x338>)
 8009e40:	4e36      	ldr	r6, [pc, #216]	; (8009f1c <atan+0x33c>)
 8009e42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009e46:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009e4a:	e9da 2300 	ldrd	r2, r3, [sl]
 8009e4e:	f7f6 f9c3 	bl	80001d8 <__aeabi_dsub>
 8009e52:	4622      	mov	r2, r4
 8009e54:	462b      	mov	r3, r5
 8009e56:	f7f6 f9bf 	bl	80001d8 <__aeabi_dsub>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e62:	f7f6 f9b9 	bl	80001d8 <__aeabi_dsub>
 8009e66:	f1bb 0f00 	cmp.w	fp, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f6bf aed6 	bge.w	8009c1e <atan+0x3e>
 8009e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e76:	461d      	mov	r5, r3
 8009e78:	e6d1      	b.n	8009c1e <atan+0x3e>
 8009e7a:	a51d      	add	r5, pc, #116	; (adr r5, 8009ef0 <atan+0x310>)
 8009e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e80:	e6cd      	b.n	8009c1e <atan+0x3e>
 8009e82:	bf00      	nop
 8009e84:	f3af 8000 	nop.w
 8009e88:	54442d18 	.word	0x54442d18
 8009e8c:	bff921fb 	.word	0xbff921fb
 8009e90:	8800759c 	.word	0x8800759c
 8009e94:	7e37e43c 	.word	0x7e37e43c
 8009e98:	e322da11 	.word	0xe322da11
 8009e9c:	3f90ad3a 	.word	0x3f90ad3a
 8009ea0:	24760deb 	.word	0x24760deb
 8009ea4:	3fa97b4b 	.word	0x3fa97b4b
 8009ea8:	a0d03d51 	.word	0xa0d03d51
 8009eac:	3fb10d66 	.word	0x3fb10d66
 8009eb0:	c54c206e 	.word	0xc54c206e
 8009eb4:	3fb745cd 	.word	0x3fb745cd
 8009eb8:	920083ff 	.word	0x920083ff
 8009ebc:	3fc24924 	.word	0x3fc24924
 8009ec0:	5555550d 	.word	0x5555550d
 8009ec4:	3fd55555 	.word	0x3fd55555
 8009ec8:	2c6a6c2f 	.word	0x2c6a6c2f
 8009ecc:	bfa2b444 	.word	0xbfa2b444
 8009ed0:	52defd9a 	.word	0x52defd9a
 8009ed4:	3fadde2d 	.word	0x3fadde2d
 8009ed8:	af749a6d 	.word	0xaf749a6d
 8009edc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ee0:	fe231671 	.word	0xfe231671
 8009ee4:	3fbc71c6 	.word	0x3fbc71c6
 8009ee8:	9998ebc4 	.word	0x9998ebc4
 8009eec:	3fc99999 	.word	0x3fc99999
 8009ef0:	54442d18 	.word	0x54442d18
 8009ef4:	3ff921fb 	.word	0x3ff921fb
 8009ef8:	440fffff 	.word	0x440fffff
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	3fdbffff 	.word	0x3fdbffff
 8009f04:	3ff00000 	.word	0x3ff00000
 8009f08:	3ff2ffff 	.word	0x3ff2ffff
 8009f0c:	40038000 	.word	0x40038000
 8009f10:	3ff80000 	.word	0x3ff80000
 8009f14:	bff00000 	.word	0xbff00000
 8009f18:	0800a4d8 	.word	0x0800a4d8
 8009f1c:	0800a4b8 	.word	0x0800a4b8

08009f20 <fabs>:
 8009f20:	ec51 0b10 	vmov	r0, r1, d0
 8009f24:	ee10 2a10 	vmov	r2, s0
 8009f28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f2c:	ec43 2b10 	vmov	d0, r2, r3
 8009f30:	4770      	bx	lr
 8009f32:	0000      	movs	r0, r0
 8009f34:	0000      	movs	r0, r0
	...

08009f38 <floor>:
 8009f38:	ec51 0b10 	vmov	r0, r1, d0
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009f48:	2e13      	cmp	r6, #19
 8009f4a:	ee10 5a10 	vmov	r5, s0
 8009f4e:	ee10 8a10 	vmov	r8, s0
 8009f52:	460c      	mov	r4, r1
 8009f54:	dc32      	bgt.n	8009fbc <floor+0x84>
 8009f56:	2e00      	cmp	r6, #0
 8009f58:	da14      	bge.n	8009f84 <floor+0x4c>
 8009f5a:	a333      	add	r3, pc, #204	; (adr r3, 800a028 <floor+0xf0>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f7f6 f93c 	bl	80001dc <__adddf3>
 8009f64:	2200      	movs	r2, #0
 8009f66:	2300      	movs	r3, #0
 8009f68:	f7f6 fd7e 	bl	8000a68 <__aeabi_dcmpgt>
 8009f6c:	b138      	cbz	r0, 8009f7e <floor+0x46>
 8009f6e:	2c00      	cmp	r4, #0
 8009f70:	da57      	bge.n	800a022 <floor+0xea>
 8009f72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009f76:	431d      	orrs	r5, r3
 8009f78:	d001      	beq.n	8009f7e <floor+0x46>
 8009f7a:	4c2d      	ldr	r4, [pc, #180]	; (800a030 <floor+0xf8>)
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	e025      	b.n	8009fd0 <floor+0x98>
 8009f84:	4f2b      	ldr	r7, [pc, #172]	; (800a034 <floor+0xfc>)
 8009f86:	4137      	asrs	r7, r6
 8009f88:	ea01 0307 	and.w	r3, r1, r7
 8009f8c:	4303      	orrs	r3, r0
 8009f8e:	d01f      	beq.n	8009fd0 <floor+0x98>
 8009f90:	a325      	add	r3, pc, #148	; (adr r3, 800a028 <floor+0xf0>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f7f6 f921 	bl	80001dc <__adddf3>
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f7f6 fd63 	bl	8000a68 <__aeabi_dcmpgt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d0eb      	beq.n	8009f7e <floor+0x46>
 8009fa6:	2c00      	cmp	r4, #0
 8009fa8:	bfbe      	ittt	lt
 8009faa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009fae:	fa43 f606 	asrlt.w	r6, r3, r6
 8009fb2:	19a4      	addlt	r4, r4, r6
 8009fb4:	ea24 0407 	bic.w	r4, r4, r7
 8009fb8:	2500      	movs	r5, #0
 8009fba:	e7e0      	b.n	8009f7e <floor+0x46>
 8009fbc:	2e33      	cmp	r6, #51	; 0x33
 8009fbe:	dd0b      	ble.n	8009fd8 <floor+0xa0>
 8009fc0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009fc4:	d104      	bne.n	8009fd0 <floor+0x98>
 8009fc6:	ee10 2a10 	vmov	r2, s0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	f7f6 f906 	bl	80001dc <__adddf3>
 8009fd0:	ec41 0b10 	vmov	d0, r0, r1
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe0:	fa23 f707 	lsr.w	r7, r3, r7
 8009fe4:	4207      	tst	r7, r0
 8009fe6:	d0f3      	beq.n	8009fd0 <floor+0x98>
 8009fe8:	a30f      	add	r3, pc, #60	; (adr r3, 800a028 <floor+0xf0>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f7f6 f8f5 	bl	80001dc <__adddf3>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f7f6 fd37 	bl	8000a68 <__aeabi_dcmpgt>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d0bf      	beq.n	8009f7e <floor+0x46>
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	da02      	bge.n	800a008 <floor+0xd0>
 800a002:	2e14      	cmp	r6, #20
 800a004:	d103      	bne.n	800a00e <floor+0xd6>
 800a006:	3401      	adds	r4, #1
 800a008:	ea25 0507 	bic.w	r5, r5, r7
 800a00c:	e7b7      	b.n	8009f7e <floor+0x46>
 800a00e:	2301      	movs	r3, #1
 800a010:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a014:	fa03 f606 	lsl.w	r6, r3, r6
 800a018:	4435      	add	r5, r6
 800a01a:	4545      	cmp	r5, r8
 800a01c:	bf38      	it	cc
 800a01e:	18e4      	addcc	r4, r4, r3
 800a020:	e7f2      	b.n	800a008 <floor+0xd0>
 800a022:	2500      	movs	r5, #0
 800a024:	462c      	mov	r4, r5
 800a026:	e7aa      	b.n	8009f7e <floor+0x46>
 800a028:	8800759c 	.word	0x8800759c
 800a02c:	7e37e43c 	.word	0x7e37e43c
 800a030:	bff00000 	.word	0xbff00000
 800a034:	000fffff 	.word	0x000fffff

0800a038 <nan>:
 800a038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a040 <nan+0x8>
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	00000000 	.word	0x00000000
 800a044:	7ff80000 	.word	0x7ff80000

0800a048 <scalbn>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	ec55 4b10 	vmov	r4, r5, d0
 800a04e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a052:	4606      	mov	r6, r0
 800a054:	462b      	mov	r3, r5
 800a056:	b99a      	cbnz	r2, 800a080 <scalbn+0x38>
 800a058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a05c:	4323      	orrs	r3, r4
 800a05e:	d036      	beq.n	800a0ce <scalbn+0x86>
 800a060:	4b39      	ldr	r3, [pc, #228]	; (800a148 <scalbn+0x100>)
 800a062:	4629      	mov	r1, r5
 800a064:	ee10 0a10 	vmov	r0, s0
 800a068:	2200      	movs	r2, #0
 800a06a:	f7f6 fa6d 	bl	8000548 <__aeabi_dmul>
 800a06e:	4b37      	ldr	r3, [pc, #220]	; (800a14c <scalbn+0x104>)
 800a070:	429e      	cmp	r6, r3
 800a072:	4604      	mov	r4, r0
 800a074:	460d      	mov	r5, r1
 800a076:	da10      	bge.n	800a09a <scalbn+0x52>
 800a078:	a32b      	add	r3, pc, #172	; (adr r3, 800a128 <scalbn+0xe0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	e03a      	b.n	800a0f6 <scalbn+0xae>
 800a080:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a084:	428a      	cmp	r2, r1
 800a086:	d10c      	bne.n	800a0a2 <scalbn+0x5a>
 800a088:	ee10 2a10 	vmov	r2, s0
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	f7f6 f8a4 	bl	80001dc <__adddf3>
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	e019      	b.n	800a0ce <scalbn+0x86>
 800a09a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a09e:	460b      	mov	r3, r1
 800a0a0:	3a36      	subs	r2, #54	; 0x36
 800a0a2:	4432      	add	r2, r6
 800a0a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0a8:	428a      	cmp	r2, r1
 800a0aa:	dd08      	ble.n	800a0be <scalbn+0x76>
 800a0ac:	2d00      	cmp	r5, #0
 800a0ae:	a120      	add	r1, pc, #128	; (adr r1, 800a130 <scalbn+0xe8>)
 800a0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b4:	da1c      	bge.n	800a0f0 <scalbn+0xa8>
 800a0b6:	a120      	add	r1, pc, #128	; (adr r1, 800a138 <scalbn+0xf0>)
 800a0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0bc:	e018      	b.n	800a0f0 <scalbn+0xa8>
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	dd08      	ble.n	800a0d4 <scalbn+0x8c>
 800a0c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0ce:	ec45 4b10 	vmov	d0, r4, r5
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a0d8:	da19      	bge.n	800a10e <scalbn+0xc6>
 800a0da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a0e4:	dd0a      	ble.n	800a0fc <scalbn+0xb4>
 800a0e6:	a112      	add	r1, pc, #72	; (adr r1, 800a130 <scalbn+0xe8>)
 800a0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e2      	bne.n	800a0b6 <scalbn+0x6e>
 800a0f0:	a30f      	add	r3, pc, #60	; (adr r3, 800a130 <scalbn+0xe8>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fa27 	bl	8000548 <__aeabi_dmul>
 800a0fa:	e7cb      	b.n	800a094 <scalbn+0x4c>
 800a0fc:	a10a      	add	r1, pc, #40	; (adr r1, 800a128 <scalbn+0xe0>)
 800a0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0b8      	beq.n	800a078 <scalbn+0x30>
 800a106:	a10e      	add	r1, pc, #56	; (adr r1, 800a140 <scalbn+0xf8>)
 800a108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10c:	e7b4      	b.n	800a078 <scalbn+0x30>
 800a10e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a112:	3236      	adds	r2, #54	; 0x36
 800a114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a118:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a11c:	4620      	mov	r0, r4
 800a11e:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <scalbn+0x108>)
 800a120:	2200      	movs	r2, #0
 800a122:	e7e8      	b.n	800a0f6 <scalbn+0xae>
 800a124:	f3af 8000 	nop.w
 800a128:	c2f8f359 	.word	0xc2f8f359
 800a12c:	01a56e1f 	.word	0x01a56e1f
 800a130:	8800759c 	.word	0x8800759c
 800a134:	7e37e43c 	.word	0x7e37e43c
 800a138:	8800759c 	.word	0x8800759c
 800a13c:	fe37e43c 	.word	0xfe37e43c
 800a140:	c2f8f359 	.word	0xc2f8f359
 800a144:	81a56e1f 	.word	0x81a56e1f
 800a148:	43500000 	.word	0x43500000
 800a14c:	ffff3cb0 	.word	0xffff3cb0
 800a150:	3c900000 	.word	0x3c900000

0800a154 <_init>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr

0800a160 <_fini>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr
